O erro que você está enfrentando, "NameError: name 'frame_abatimentos' is not defined", ocorre porque você está tentando acessar frame_abatimentos antes de sua definição. Isso acontece porque o bloco de código que define frame_abatimentos e seus componentes não está dentro da função criar_abatimentos, onde deveria estar.

Correções Necessárias:
Defina o Frame e os Widgets Dentro da Função: Você deve mover a criação de frame_abatimentos e todos os seus widgets para dentro da função criar_abatimentos.

Chame a Função no Local Apropriado: A função criar_abatimentos deve ser chamada dentro de criar_frame_financeiro para garantir que o frame e seus widgets sejam configurados após a criação do frame financeiro.

Aqui está uma versão corrigida e reorganizada do seu código:

import tkinter as tk
from tkinter import ttk
from tkcalendar import DateEntry

# Declarações globais
frame_financeiro = None

def criar_frame_financeiro(parent):
    global frame_financeiro
    frame_financeiro = ttk.LabelFrame(parent, text="Informações Financeiras")
    frame_financeiro.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")

    # Chame a função que cria o frame de abatimentos
    criar_abatimentos(frame_financeiro)

def criar_abatimentos(parent):
    frame_abatimentos = ttk.LabelFrame(parent, text="Abatimentos")
    frame_abatimentos.grid(row=2, column=0, padx=10, pady=10, sticky="nw")

    # Checkbuttons para aplicar abatimentos
    global var_desconto_fixo  # Certifique-se de que a variável está definida
    var_desconto_fixo = tk.BooleanVar()
    
    check_fixo = ttk.Checkbutton(frame_abatimentos, text="Desconto Fixo (R$)", variable=var_desconto_fixo)
    check_fixo.grid(row=0, column=0, sticky="w")

    global entry_desconto_fixo  # Certifique-se de que a variável está definida
    entry_desconto_fixo = ttk.Entry(frame_abatimentos)
    entry_desconto_fixo.grid(row=0, column=1, padx=10, pady=5, sticky="w")

    global var_desconto_percentual  # Certifique-se de que a variável está definida
    var_desconto_percentual = tk.BooleanVar()
    
    check_percentual = ttk.Checkbutton(frame_abatimentos, text="Desconto Percentual (%)", variable=var_desconto_percentual)
    check_percentual.grid(row=1, column=0, sticky="w")

    global entry_desconto_percentual  # Certifique-se de que a variável está definida
    entry_desconto_percentual = ttk.Entry(frame_abatimentos)
    entry_desconto_percentual.grid(row=1, column=1, padx=10, pady=5, sticky="w")

    # Botão para calcular total
    botao_calcular = ttk.Button(frame_abatimentos, text="Calcular Total", command=calcular_total)
    botao_calcular.grid(row=2, column=0, pady=10)

    # Botão para limpar seleções
    botao_limpar = ttk.Button(frame_abatimentos, text="Limpar Seleções", command=limpar_selecoes)
    botao_limpar.grid(row=2, column=1, padx=10)

    # Label para exibir o resultado do cálculo
    global label_resultado  # Certifique-se de que a variável está definida
    label_resultado = ttk.Label(frame_abatimentos, text="Total com desconto: R$")
    label_resultado.grid(row=3, column=0, columnspan=2, padx=10, pady=5)

def atualizar_precos(event=None):
    porte_selecionado = combobox_porte.get().strip()
    total = 0
    precos_selecionados = []

    if porte_selecionado not in dados_pet:
        label_resultado.config(text="Erro: Nenhum porte válido foi selecionado!")
        return

    for servico, var in variaveis_servicos.items():
        if var.get():
            preco = dados_pet[porte_selecionado]["preços"].get(servico, 0)
            total += preco
            precos_selecionados.append(f"{servico}: R$ {preco:.2f}")

    label_resultado.config(text="\n".join(precos_selecionados) + f"\nTotal: R$ {total:.2f}")
    return total

def calcular_desconto(valor_total):
    desconto_fixo = float(entry_desconto_fixo.get()) if var_desconto_fixo.get() else 0
    desconto_percentual = float(entry_desconto_percentual.get()) if var_desconto_percentual.get() else 0
    valor_com_desconto = valor_total - desconto_fixo
    valor_com_desconto -= (valor_com_desconto * (desconto_percentual / 100))
    return valor_com_desconto

def calcular_total():
    valor_total = atualizar_precos()  # Obter o valor total dos serviços
    if valor_total is None:  # Se ocorrer erro no cálculo
        return
    valor_final = calcular_desconto(valor_total)
    label_resultado.config(text=f"Total com desconto: R$ {valor_final:.2f}")

def limpar_selecoes():
    for var in variaveis_servicos.values():
        var.set(False)  # Desmarca todos os Checkbuttons
    entry_desconto_fixo.delete(0, tk.END)  # Limpa o campo de desconto fixo
    entry_desconto_percentual.delete(0, tk.END)  # Limpa o campo de desconto percentual
    label_resultado.config(text="Total com desconto: R$ 0.00")  # Reseta o resultado

# Inicialização da janela principal
root = tk.Tk()
criar_frame_financeiro(root)  # Cria o frame financeiro

# Continue com a configuração de outros frames ou widgets, se necessário

root.mainloop()
Copy
Mudanças Feitas:
Definição de Widgets Dentro da Função: Todos os widgets relacionados a frame_abatimentos agora estão dentro da função criar_abatimentos, evitando o erro de referência antes da definição.
Uso de Variáveis Globais: As variáveis necessárias para checkbuttons e entradas de desconto foram definidas como globais, permitindo acesso em outras partes do código.
Chamada da Função: A função criar_abatimentos é chamada no momento apropriado, após a criação de frame_financeiro.
Com essas correções, seu código deve funcionar corretamente e evitar erros de referência a variáveis não definidas.

