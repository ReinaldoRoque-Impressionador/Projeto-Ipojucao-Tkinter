import tkinter as tk
from tkinter import ttk, Entry
from PIL import Image, ImageTk
import os
from tkcalendar import DateEntry
import sqlite3
import time


#from Cadastro import criar_frame_cadastro
#from Financeiro import criar_frame_financeiro



# janela = tk.Tk()
# janela.title("Sistema Relatórios")

# inner_frame = ttk.Frame(janela)
# inner_frame.grid(row=0, column=0, padx=10, pady=10,sticky="nsew")

# frame_cadastro = criar_frame_cadastro(inner_frame)
# frame_financeiro = criar_frame_financeiro(inner_frame)


# Iniciando a janela
janela = tk.Tk()
janela.title("Cadastro Pet Shop")

# Criando as abas
aba_principal = ttk.Notebook(janela)


#aba_config = ttk.Frame(janela)
aba_config = ttk.Frame(aba_principal)
aba_principal.add(aba_config, text="Configuração")


#aba_config.grid(padx=10, pady=10)  # Adicionando padding para melhor visualização
janela.geometry("1400x600")  # Ajuste o tamanho da janela conforme necessário
janela.state('zoomed')  # Abre em tela cheia

# Criando um Frame para a barra de rolagem
scrollable_frame = ttk.Frame(janela)
scrollable_frame.grid(row=0, column=0, sticky="nsew")

# Configuração da janela
janela.grid_rowconfigure(0, weight=1)
janela.grid_columnconfigure(0, weight=1)

scrollable_frame.grid_rowconfigure(0, weight=1)
scrollable_frame.grid_columnconfigure(0, weight=1)

# Criando o Canvas e as Scrollbars
canvas = tk.Canvas(scrollable_frame)
vertical_scrollbar = ttk.Scrollbar(scrollable_frame, orient="vertical", command=canvas.yview)
horizontal_scrollbar = ttk.Scrollbar(scrollable_frame, orient="horizontal", command=canvas.xview)

# Criando o Frame dentro do Canvas
inner_frame = ttk.Frame(canvas)

# Ajustando a rolagem
inner_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))

# Criando a janela dentro do Canvas
canvas.create_window((0, 0), window=inner_frame, anchor="nw")

# Posicionando o Canvas e as Scrollbars
canvas.grid(row=0, column=0, sticky="nsew")
vertical_scrollbar.grid(row=0, column=1, sticky="ns")
horizontal_scrollbar.grid(row=1, column=0, sticky="ew")

# Configurando as barras de rolagem
canvas.configure(yscrollcommand=vertical_scrollbar.set)
canvas.configure(xscrollcommand=horizontal_scrollbar.set)

# Garantindo que a rolagem funcione corretamente
def ajustar_tamanho_canvas(event):
    canvas.configure(scrollregion=canvas.bbox("all"))

inner_frame.bind("<Configure>", ajustar_tamanho_canvas)

# Adicione alguns widgets ao inner_frame como exemplo
for i in range(50):
    ttk.Label(inner_frame, text=f"Item {i}").grid(row=i, column=0, sticky="w")
# Configurar a largura da coluna do inner_frame para permitir a rolagem horizontal
inner_frame.grid_columnconfigure(0, minsize=300)  # Ajuste o tamanho conforme necessário

# Definindo o tamanho do Canvas
canvas.config(height=700)  # Aumente a altura do Canvas se necessário
canvas.config(width=800) # Aumente a largura do Canvas se necessário


# # Criando o Notebook (guias/abas)
# notebook = ttk.Notebook(janela)
# notebook.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
#
#
# # Criando aba de configuração
# aba_config = ttk.Frame(aba_principal)
# aba_principal.add(aba_config, text="Configuração")
#
#
# # Criando abas
# # aba_porte_config = ttk.Frame(notebook)
# # aba_porte_raca = ttk.Frame(notebook)
# #aba_config = ttk.Frame(notebook)
# aba_cadastro = ttk.Frame(notebook)
# aba_consulta = ttk.Frame(notebook)
#
# # Criando aba de serviços
# aba_servicos = ttk.Frame(aba_principal)
# aba_principal.add(aba_servicos, text="Serviços")
#
# #aba_servicos = ttk.Frame(notebook)
#
#
# aba_pacotes = ttk.Frame(notebook)
#
# # Criando aba financeira
# aba_financeiro = ttk.Frame(aba_principal)
# aba_principal.add(aba_financeiro, text="Financeiro")
#
#
# #aba_financeiro = ttk.Frame(notebook)
#
# # Criando aba de relatórios
# aba_relatórios = ttk.Frame(aba_principal)
# aba_principal.add(aba_relatórios, text="Relatórios")
#
#
# #aba_relatorios = ttk.Frame(notebook)
#
#
# # Frame de configuração
# frame_config = ttk.Frame(aba_config)
# frame_config.grid(pady=10)
#
#
# # Adicionando as abas ao notebook
# notebook.add(aba_config, text="Configuração Global")
# #notebook.add(aba_porte_raca, text="Selecione Porte e Raça")
# notebook.add(aba_cadastro, text="Cadastro")
# notebook.add(aba_consulta, text="Consulta")
# notebook.add(aba_servicos, text="Serviços")
# notebook.add(aba_pacotes, text="Pacotes")
# notebook.add(aba_financeiro, text="Financeiro")
# notebook.add(aba_relatorios, text="Relatórios")
# ttk.Label(aba_relatorios, text="Filtrar por Data").grid(pady=10)
# calendario_inicial = ttk.Entry(aba_relatorios)
# calendario_inicial.grid(pady=5)
#
#
#

# Criando as abas (Notebook)
# Criando as abas (Notebook)
notebook = ttk.Notebook(janela)
notebook.grid(row=0, column=0, sticky='nsew')  # Use grid corretamente

# Criando aba de configuração
aba_config = ttk.Frame(notebook)
notebook.add(aba_config, text="Configuração")

# Criando aba financeira
aba_financeiro = ttk.Frame(notebook)
notebook.add(aba_financeiro, text="Financeiro")

# Criando aba de serviços
aba_servicos = ttk.Frame(notebook)
notebook.add(aba_servicos, text="Serviços")

# Criando aba de relatórios
aba_relatórios = ttk.Frame(notebook)
notebook.add(aba_relatórios, text="Relatórios")


# Criando aba Cadastro
aba_cadastro = ttk.Frame(notebook)
notebook.add(aba_cadastro, text="Cadastro")

# Frame de configuração
frame_config = ttk.Frame(aba_config)
frame_config.grid(pady=10)



#🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀




base_path = "C:/Users/VEIRANO/PycharmProjects/ModuloTkinter/Planilha Controle Ipojucão/imagensipojucao"

# Dicionário para armazenar imagens dos portes
imagens_portes = {
    "pequeno": "pequeno.jpg",
    "médio": "medio.jpg",
    "grande": "grande.jpg",
    "maior": "maior.jpg"
}

# Dicionário para armazenar imagens das raças
imagens_racas = {
    'Schitzu': 'schitzu.jpg',
    'Lhasa Apso': 'lhasa_apso.jpg',
    'Maltês': 'maltes.jpg',
    'Yorkshire': 'yorkshire.jpg',
    'Dachshund': 'dachshund.jpg',
    'Cavalier King Charles Spaniel': 'cavalier_king_charles_spaniel.jpg',  # Nome completo
    'Biewer Terrier': 'biewer_terrier.jpg',
    'Buldog Francês': 'bulldog_frances.jpg',
    'Pug': 'pug.jpg',
    'Chihuahua': 'chihuahua.jpg',
    'Cocker Spaniel': 'cocker_spaniel.jpg',
    'Papillon': 'papillon.jpg',
    'Spitz Alemão': 'spitz_alemao.jpg',
    'Pinscher': 'pinscher.jpg',
    'Poodle': 'poodle.jpg',
    'Jack Russell Terrier': 'jack_russell_terrier.jpg',
    'Galgo Italiano': 'galgo_italiano.jpg',
    'Pequinês': 'pequines.jpg',
    'Bichon Frise': 'bichon_frise.jpg',
    'Boston Terrier': 'boston_terrier.jpg',
    'Fox Paulistinha': 'fox_paulistinha.jpg',
    'American Pit Bull': 'american_pitbull.jpg',
    'Australian Cattle Dog': 'australian_cattle.jpg',
    'Australian Shepherd': 'australian_shepherd.jpg',
    'Basset Griffon': 'basset_griffon.jpg',
    'Basset Hound': 'basset_hound.jpg',
    'Bulldog Campeiro': 'bulldog_campeiro.jpg',
    'Bulldog': 'bulldog.jpg',
    'Bulldog Inglês': 'bulldog_ingles.jpg',
    'Bull Terrier': 'bull_terrier.jpg',
    'Basset Fulvo': 'basset_fulvo.jpg',
    'Boxer': 'boxer.jpg',
    'Clumber Spaniel': 'clumber_spaniel.jpg',
    'Cocker Americano': 'cocker_americano.jpg',
    'Cocker Inglês': 'cocker_ingles.jpg',
    'Flat Coated Retriever': 'flat_coated_retriever.jpg',
    'Pastor de Shetland': 'pastor_de_shetland.jpg',
    'Pumi': 'pumi.jpg',
    'Schnauzer Standard': 'schnauzer_standard.jpg',
    'Shar Pei': 'shar_pei.jpg',
    'Spaniel Bretão': 'spaniel_bretao.jpg',
    'Spaniel Francês': 'spaniel_frances.jpg',
    'Spitz Japonês': 'spitz_japones.jpg',
    'Springer Spaniel': 'springer_spaniel.jpg',
    'Springer Spaniel Inglês': 'springer_spaniel_ingles.jpg',
    'Terrier Tibetano': 'terrier_tibetano.jpg',
    'American Bully': 'american_bully.jpg',
    'SRD Médio': 's_r_d_medio.jpg',
    'Dogo Argentino': 'dogo_argentino.jpg',
    'Dálmata': 'dalmatian.jpg',
    'Weimaraner': 'weimaraner.jpg',
    'Mastim Tibetano': 'mastim_tibetano.jpg',
    'Leonberger': 'leonberger.jpg',
    'Pastor Australiano': 'pastor_australiano.jpg',
    'Setter Irlandês': 'setter_irlandes.jpg',
    'Bulmastife': 'bulmastife.jpg',
    'Mastim Napolitano': 'mastim_napolitano.jpg',
    'Dogue de Bordeaux': 'dogue_de_bordeaux.jpg',
    'Cão de Santo Humberto': 'cao_de_santo_humberto.jpg',
    'Rhodesian Ridgeback': 'rhodesian_ridgeback.jpg',
    'Boiadeiro da Flandres': 'boiadeiro_da_flandres.jpg',
    'Bearded Collie': 'bearded_collie.jpg',
    'Bichon Bolonhês': 'bichon_bolonhes.jpg',
    'Basenji': 'basenji.jpg',
    'Boerboel': 'boerboel.jpg',
    'Pastor do Cáucaso': 'pastor_do_caucaso.jpg',
    'Veadeiro Pampeano': 'veadeiro_pampeano.jpg',
    'Buhund Norueguês': 'buhund_noruegues.jpg',
    'Basset Artesiano Normando': 'basset_artesiano_normando.jpg',
    'Braco de Auvernia': 'braco_de_auvernia.jpg',
    'Galgo Inglês': 'galgo_ingles.jpg',
    'Pastor Belga': 'pastor_belga.jpg',
    'Mastiff': 'mastiff.jpg',
    'Bernese': 'bernese.jpg',
    'Akita': 'akita.jpg',
    'Bloodhound': 'bloodhound.jpg',
    'Pit Bull': 'pit_bull.jpg',
    'Fila Brasileiro': 'fila_brasileiro.jpg',
    'Chow Chow': 'chow_chow.jpg',
    'Doberman': 'doberman.jpg',
    'Chip Dog': 'chip_dog.jpg',
}

var_porte = tk.StringVar()
var_raca = tk.StringVar()

# Dados centralizados (raças e preços)
dados_pet = {
    "pequeno": {"raças": ['Schitzu', 'Lhasa Apso', 'Maltes', 'yorkshire', 'Dachshund', 'Cavalier K.C. Spaniel',
                  'Biewer Terrier', 'Bulldog Frances', 'Pug', 'Chihuahua', 'Cocker Spaniel', 'Papillon',
                  'Spitz Alemao', 'Pinscher', 'Poodle', 'Jack Russel Terrier', 'Galgo Italiano', 'Pequines',
                  'Bichon Frise', 'Boston Terrier', 'Fox Paulistinha']},
    "médio": {"raças": ['American Pitbull', 'Australian Cattle', 'Australian Shepherd', 'Basset Griffon', 'Basset Hound',
                  'Bulldog Campeiro', 'Bulldog', 'Bulldog Ingles', 'Bull Terrier', 'Basset Fulvo',
                  'Boxer', 'Clumber Spaniel', 'Cocker Americano', 'Cocker Ingles', 'Flat Coated Retriever',
                  'Pastor de Shetland', 'Pumi', 'Schnauzer Standard', 'Shar Pei', 'Spaniel Bretao', 'Spaniel Frances',
                  'Spitz Japones', 'Spriger Spaniel Ingles', 'Terrier Tibetano', 'American Bully', 'S.R.D.-Médio']},
    "grande": {"raças": ['Pastor Alemao', 'Dogue Alemao', 'Terra Nova', 'Rottweiler', 'Sao-Bernardo', 'Labrador Retriever',
                  'Golden Retriever', 'Fila brasileiro', 'Cane corso', 'Border collie', 'Boiadeiro de Berna',
                  'Akita Inu', 'Mastim Ingles', 'Husky Siberiano', 'Dogo argentino', 'Dalmata', 'Weimaraner',
                  'Bull terrier', 'Mastim tibetano', 'Leonberger', 'Pastor australiano', 'Setter irlandes',
                  'Bulmastife', 'Mastim napolitano', 'Dogue de bordeus', 'Bulmastife', 'cao de Santo Humberto',
                  'Rhodesian ridgeback', 'Boiadeiro da Flandres', 'Bearded collie', 'Bichon bolonhes', 'Basenji',
                  'Boerboel', 'Pastor do caucaso', 'Veadeiro Pampeano', 'Buhund noruegues',
                  'Basset artesiano normando', 'Braco de Auvernia', 'Galgo Ingles', 'Pastor Belga', 'Mastiff',
                  'Bernese', 'Akita', 'Bloodhound']},
    "maior": {"raças": ['Pit Bull', 'Fila Brasileiro', 'Chow-Chow', 'Doberman', 'Chip-dog', 'American Pit Bul terrier',
                  'Chow-chow']}
}

# Criando Label para exibir imagens
label_imagem = tk.Label(aba_config, text="Nenhuma imagem disponível", width=200, height=200)
label_imagem.grid(row=2, column=0, columnspan=2, padx=10, pady=10)

# Criando Label para exibir imagens
label_imagem = tk.Label(aba_config, text="Nenhuma imagem disponível", width=200, height=200)
label_imagem.grid(row=2, column=0, columnspan=2, padx=10, pady=10)

# Função para atualizar a imagem do porte
# def update_porte_image(*args):
#     #porte = var_porte.get().strip()
#     porte = combobox_porte.get().strip()
#     print(f"Selecionado Porte: {porte}")  # Debug
#
#     if porte in imagens_portes:
#         image_path = os.path.join(base_path, f"{porte.lower()}.png").replace("\\", "/")
#         #image_path = os.path.join(base_path, imagens_portes[porte])
#         print(f"Verificando imagem do porte em: {image_path}")  # Debug
#         if os.path.exists(image_path):
#             try:
#                 img = Image.open(image_path).resize((120, 120))
#                 img_tk = ImageTk.PhotoImage(img)
#                 label_imagem.config(image=img_tk, text="")
#                 label_imagem.image = img_tk
#             except Exception as e:
#                 print(f"Erro ao carregar imagem do porte: {e}")
#         else:
#             label_imagem.config(text="Imagem do porte não encontrada", image="")
#             label_imagem.image = None

#combobox_porte.bind("<<ComboboxSelected>>", lambda event: [atualizar_lista_racas(event), update_porte_image(event)])


# Funções para atualizar imagens
def update_porte_image(event=None):
    porte = var_porte.get().strip().lower()
    image_path = os.path.join(base_path, imagens_portes.get(porte, ''))
    if os.path.exists(image_path):
        img = Image.open(image_path).resize((200, 200))
        img_tk = ImageTk.PhotoImage(img)
        label_imagem.config(image=img_tk)
        label_imagem.image = img_tk
    else:
        label_imagem.config(text="Imagem do porte não encontrada", image="")
        label_imagem.image = None


# Função para atualizar a lista de raças
def atualizar_lista_racas(event=None):
    porte = var_porte.get().strip().lower()
    print(f"Selecionado Porte: {porte}")  # Debug
    time.sleep(0.5)  # Pausa para garantir atualização

    #racas = dados_pet.get(porte, {}).get("raças", [])
    racas = list(dados_pet.get(porte, {}).get("raças", []))
    combobox_raca["values"] = racas
    combobox_raca.set("Selecione uma raça")
    update_porte_image(event)

    if racas:
        combobox_raca.set(racas[0])  # Define a primeira raça como padrão
    else:
        combobox_raca.set("Nenhuma raça disponível")

# Função para atualizar a imagem da raça
def update_raca_image(event=None):
    #raca = combobox_raca.get().strip()
    raca = var_raca.get().strip()
    image_path = os.path.join(base_path, imagens_racas.get(raca, ''))
    print(f"Selecionado Raça: {raca}")  # Debug

    time.sleep(0.5)  # Pausa para garantir que a variável foi atualizada

    # if raca in imagens_racas:
    #     image_path = os.path.join(base_path, imagens_racas.get(raca, '')).replace("\\", "/")
    #     #image_path = os.path.join(base_path, imagens_racas[raca])
    #     print(f"Verificando imagem da raça em: {image_path}")  # Debug
    #     if os.path.exists(image_path):
    #         try:
    #             img = Image.open(image_path).resize((200, 200))
    #             img_tk = ImageTk.PhotoImage(img)
    #             label_imagem.config(image=img_tk, text="")
    #             label_imagem.image = img_tk
    print(f"Imagem do porte em: {image_path}")  # Debug

    if os.path.exists(image_path):
        img = Image.open(image_path).resize((200, 200))
        img_tk = ImageTk.PhotoImage(img)
        label_imagem.config(image=img_tk)
        label_imagem.image = img_tk
    else:
        label_imagem.config(text="Imagem da raça não encontrada", image="")
        label_imagem.image = None
        #     except Exception as e:
        #     print(f"Erro ao carregar imagem da raça: {e}")
        # else:
        #     label_imagem.config(text="Imagem não encontrada", image="")
        #     label_imagem.image = None

# Dados centralizados (raças e preços)
dados_pet = {
    "Pequeno": {
        "raças": ['Schitzu', 'Lhasa Apso', 'Maltes', 'yorkshire', 'Dachshund', 'Cavalier K.C. Spaniel',
                  'Biewer Terrier', 'Bulldog Frances', 'Pug', 'Chihuahua', 'Cocker Spaniel', 'Papillon',
                  'Spitz Alemao', 'Pinscher', 'Poodle', 'Jack Russel Terrier', 'Galgo Italiano', 'Pequines',
                  'Bichon Frise', 'Boston Terrier', 'Fox Paulistinha'],
        "preços": {"Banho": 55, "Hidratação": 20, "Desembolo": 20, "Remoção de Pelos": 20, "Corte de Unhas": 15,
                   "Escovação de Dentes": 15, "Tosa Higiênica": 20, "Tosa na Máquina": 115,
                   "Tosa na Tesoura": 125, "Leva e Trás": 10},
    },
    "Médio": {
        "raças": ['American Pitbull', 'Australian Cattle', 'Australian Shepherd', 'Basset Griffon', 'Basset Hound',
                  'Bulldog Campeiro', 'Bulldog', 'Bulldog Ingles', 'Bull Terrier', 'Basset Fulvo',
                  'Boxer', 'Clumber Spaniel', 'Cocker Americano', 'Cocker Ingles', 'Flat Coated Retriever',
                  'Pastor de Shetland', 'Pumi', 'Schnauzer Standard', 'Shar Pei', 'Spaniel Bretao', 'Spaniel Frances',
                  'Spitz Japones', 'Spriger Spaniel Ingles', 'Terrier Tibetano', 'American Bully', 'S.R.D.-Médio'],
        "preços": {"Banho": 65, "Hidratação": 20, "Desembolo": 20, "Remoção de Pelos": 20, "Corte de Unhas": 15,
                   "Escovação de Dentes": 15, "Tosa Higiênica": 20, "Tosa na Máquina": 115,
              "Tosa na Tesoura": 125, "Leva e Trás": 10},
    },
    "Grande": {
        "raças": ['Pastor Alemao', 'Dogue Alemao', 'Terra Nova', 'Rottweiler', 'Sao-Bernardo', 'Labrador Retriever',
                  'Golden Retriever', 'Fila brasileiro', 'Cane corso', 'Border collie', 'Boiadeiro de Berna',
                  'Akita Inu', 'Mastim Ingles', 'Husky Siberiano', 'Dogo argentino', 'Dalmata', 'Weimaraner',
                  'Bull terrier', 'Mastim tibetano', 'Leonberger', 'Pastor australiano', 'Setter irlandes',
                  'Bulmastife', 'Mastim napolitano', 'Dogue de bordeus', 'Bulmastife', 'cao de Santo Humberto',
                  'Rhodesian ridgeback', 'Boiadeiro da Flandres', 'Bearded collie', 'Bichon bolonhes', 'Basenji',
                  'Boerboel', 'Pastor do caucaso', 'Veadeiro Pampeano', 'Buhund noruegues',
                  'Basset artesiano normando', 'Braco de Auvernia', 'Galgo Ingles', 'Pastor Belga', 'Mastiff',
                  'Bernese', 'Akita', 'Bloodhound'],
        "preços": {"Banho": 70, "Hidratação": 20, "Desembolo": 20, "Remoção de Pelos": 20, "Corte de Unhas": 15,
                   "Escovação de Dentes": 15, "Tosa Higiênica": 20, "Tosa na Máquina": 115,
                "Tosa na Tesoura": 125, "Leva e Trás": 10},
    },
    "Maior": {
        "raças": ['Pit Bull', 'Fila Brasileiro', 'Chow-Chow', 'Doberman', 'Chip-dog', 'American Pit Bul terrier',
                  'Chow-chow'],
        "preços": {"Banho": 120, "Hidratação": 20, "Desembolo": 20, "Remoção de Pelos": 80, "Corte de Unhas": 50,
               "Escovação de Dentes": 55, "Tosa Higiênica": 75, "Tosa na Máquina": 85,
               "Tosa na Tesoura": 100, "Leva e Trás": 10},
    },
}

# Criando Combobox para seleção de porte
# ttk.Label(aba_config, text="Selecione o Porte:").grid(row=0, column=0, padx=10, pady=5, sticky="w")
# combobox_porte = ttk.Combobox(aba_config, textvariable=var_porte, values=list(dados_pet.keys()), state="readonly")
# combobox_porte.grid(row=0, column=1, padx=10, pady=5, sticky="ew")

# Criando Combobox para seleção de porte
ttk.Label(aba_config, text="Selecione o Porte:").grid(row=0, column=0, padx=10, pady=5)
combobox_porte = ttk.Combobox(aba_config, textvariable=var_porte, values=list(dados_pet.keys()), state="readonly")
combobox_porte.grid(row=1, column=0, padx=10, pady=5)
#combobox_porte.bind("<<ComboboxSelected>>", lambda event: [atualizar_lista_racas(event), update_porte_image(event)])



# Criando Combobox para seleção de raça
ttk.Label(aba_config, text="Selecione a Raça:").grid(row=0, column=1, padx=10, pady=5, sticky="w")
combobox_raca = ttk.Combobox(aba_config, textvariable=var_raca, state="readonly")
combobox_raca.grid(row=1, column=1, padx=10, pady=5, sticky="ew")
combobox_raca.bind("<<ComboboxSelected>>", update_raca_image)


# Configurando a coluna para expandir
aba_config.grid_columnconfigure(0, weight=1)

combobox_raca.bind("<<ComboboxSelected>>", update_raca_image)



# Criando Label para exibir imagens
label_imagem = tk.Label(aba_config, text="Nenhuma imagem disponível", width=200, height=200)
label_imagem.grid(row=2, column=0, columnspan=2, padx=10, pady=10)


# Adicionando `trace_add` para ativar automaticamente a atualização da imagem e das raças
var_porte.trace_add("write", lambda *args: atualizar_lista_racas(*args))
var_porte.trace_add("write", lambda *args: update_porte_image(*args))

# abaixo CONFIGURANDO aba_config
# Dados centralizados (raças e preços)
# dados_pet = {
#     "Pequeno": {
#         "raças": ['Schitzu', 'Lhasa Apso', 'Maltes', 'yorkshire', 'Dachshund', 'Cavalier K.C. Spaniel',
#                   'Biewer Terrier', 'Bulldog Frances', 'Pug', 'Chihuahua', 'Cocker Spaniel', 'Papillon',
#                   'Spitz Alemao', 'Pinscher', 'Poodle', 'Jack Russel Terrier', 'Galgo Italiano', 'Pequines',
#                   'Bichon Frise', 'Boston Terrier', 'Fox Paulistinha'],
#         "preços": {"Banho": 55, "Hidratação": 20, "Desembolo": 20, "Remoção de Pelos": 20, "Corte de Unhas": 15,
#                    "Escovação de Dentes": 15, "Tosa Higiênica": 20, "Tosa na Máquina": 115,
#                    "Tosa na Tesoura": 125, "Leva e Trás": 10},
#     },
#     "Médio": {
#         "raças": ['American Pitbull', 'Australian Cattle', 'Australian Shepherd', 'Basset Griffon', 'Basset Hound',
#                   'Bulldog Campeiro', 'Bulldog', 'Bulldog Ingles', 'Bull Terrier', 'Basset Fulvo',
#                   'Boxer', 'Clumber Spaniel', 'Cocker Americano', 'Cocker Ingles', 'Flat Coated Retriever',
#                   'Pastor de Shetland', 'Pumi', 'Schnauzer Standard', 'Shar Pei', 'Spaniel Bretao', 'Spaniel Frances',
#                   'Spitz Japones', 'Spriger Spaniel Ingles', 'Terrier Tibetano', 'American Bully', 'S.R.D.-Médio'],
#         "preços": {"Banho": 65, "Hidratação": 20, "Desembolo": 20, "Remoção de Pelos": 20, "Corte de Unhas": 15,
#                    "Escovação de Dentes": 15, "Tosa Higiênica": 20, "Tosa na Máquina": 115,
#               "Tosa na Tesoura": 125, "Leva e Trás": 10},
#     },
#     "Grande": {
#         "raças": ['Pastor Alemao', 'Dogue Alemao', 'Terra Nova', 'Rottweiler', 'Sao-Bernardo', 'Labrador Retriever',
#                   'Golden Retriever', 'Fila brasileiro', 'Cane corso', 'Border collie', 'Boiadeiro de Berna',
#                   'Akita Inu', 'Mastim Ingles', 'Husky Siberiano', 'Dogo argentino', 'Dalmata', 'Weimaraner',
#                   'Bull terrier', 'Mastim tibetano', 'Leonberger', 'Pastor australiano', 'Setter irlandes',
#                   'Bulmastife', 'Mastim napolitano', 'Dogue de bordeus', 'Bulmastife', 'cao de Santo Humberto',
#                   'Rhodesian ridgeback', 'Boiadeiro da Flandres', 'Bearded collie', 'Bichon bolonhes', 'Basenji',
#                   'Boerboel', 'Pastor do caucaso', 'Veadeiro Pampeano', 'Buhund noruegues',
#                   'Basset artesiano normando', 'Braco de Auvernia', 'Galgo Ingles', 'Pastor Belga', 'Mastiff',
#                   'Bernese', 'Akita', 'Bloodhound'],
#         "preços": {"Banho": 70, "Hidratação": 20, "Desembolo": 20, "Remoção de Pelos": 20, "Corte de Unhas": 15,
#                    "Escovação de Dentes": 15, "Tosa Higiênica": 20, "Tosa na Máquina": 115,
#                 "Tosa na Tesoura": 125, "Leva e Trás": 10},
#     },
#     "Maior": {
#         "raças": ['Pit Bull', 'Fila Brasileiro', 'Chow-Chow', 'Doberman', 'Chip-dog', 'American Pit Bul terrier',
#                   'Chow-chow'],
#         "preços": {"Banho": 120, "Hidratação": 20, "Desembolo": 20, "Remoção de Pelos": 80, "Corte de Unhas": 50,
#                "Escovação de Dentes": 55, "Tosa Higiênica": 75, "Tosa na Máquina": 85,
#                "Tosa na Tesoura": 100, "Leva e Trás": 10},
#     },
# }







# Função para atualizar a imagem do porte
# def update_porte_image(event=None):
#     porte = var_porte.get().strip()
#     print(f"Selecionado Porte: {porte}")  # Debug para verificar se captura corretamente
#     if porte in imagens_portes:
#         image_path = os.path.join(base_path, imagens_portes.get(porte, ""))
#         print(f"Verificando imagem do porte em: {image_path}")  # Debug para ver caminho
#
#     if os.path.exists(image_path):
#         try:
#             img = Image.open(image_path).resize((120, 120))
#             img_tk = ImageTk.PhotoImage(img)
#             label_imagem.config(image=img_tk, text="")
#             label_imagem.image = img_tk
#         except Exception as e:
#             label_imagem.config(text="Erro ao carregar imagem", image="")
#             label_imagem.image = None
#             print(f"Erro ao carregar imagem do porte: {e}")
#     else:
#         label_imagem.config(text="Imagem do porte não encontrada", image="")
#         label_imagem.image = None
#
#     # if porte in imagens_portes:
#     #     image_path = os.path.join(base_path, imagens_portes[porte])
#     #     if os.path.exists(image_path):
#     #         try:
#     #             img = Image.open(image_path).resize((120, 120))
#     #             img_tk = ImageTk.PhotoImage(img)
#     #             label_imagem.config(image=img_tk, text="")
#     #             label_imagem.image = img_tk
#     #         except Exception as e:
#     #             label_imagem.config(text="Erro ao carregar imagem", image="")
#     #             label_imagem.image = None
#     #             print(f"Erro ao carregar imagem do porte: {e}")
#     #     else:
#     #         label_imagem.config(text="Imagem do porte não encontrada", image="")
#     #         label_imagem.image = None
#     #
#     # else:
#     #     label_imagem.config(text="Nenhuma imagem disponível", image="")
#     #     label_imagem.image = None
#
#
# # Função para atualizar a lista de raças automaticamente
# def atualizar_lista_racas(*args):
#     porte = var_porte.get().strip()
#     print(f"Selecionado Porte: {porte}")  # Debug
#
#     racas = dados_pet.get(porte, {}).get("raças", [])
#     print(f"Raças disponíveis para {porte}: {racas}")  # Debug
#
#     combobox_raca["values"] = racas
#     if racas:
#         combobox_raca.set(racas[0])  # Define a primeira raça como padrão
#     else:
#         combobox_raca.set("Nenhuma raça disponível")
#
#
# # Função para atualizar a imagem da raça
# def update_raca_image(event=None):
#     raca = var_raca.get().strip()
#     print(f"Selecionado Raça: {raca}")  # Debug
#
#
#     if raca in imagens_racas:
#         image_path = os.path.join(base_path, imagens_racas.get(raca, ""))
#         print(f"Verificando imagem da raça em: {image_path}")  # Debug
#         if os.path.exists(image_path):
#             try:
#                 img = Image.open(image_path).resize((200, 200))
#                 img_tk = ImageTk.PhotoImage(img)
#                 label_imagem.config(image=img_tk, text="")
#                 label_imagem.image = img_tk
#             except Exception as e:
#                 print(f"Erro ao carregar imagem da raça: {e}")
#             label_imagem.config(text="Erro ao carregar imagem", image="")
#             label_imagem.image = None
#             print(f"Erro ao carregar imagem da raça: {e}")
#     else:
#         label_imagem.config(text="Imagem não encontrada", image="")
#         label_imagem.image = None

    # if raca in imagens_racas:
    #     image_path = os.path.join(base_path, imagens_racas[raca])
    #     if os.path.exists(image_path):
    #         try:
    #             img = Image.open(image_path).resize((200, 200))
    #             img_tk = ImageTk.PhotoImage(img)
    #             label_imagem.config(image=img_tk, text="")
    #             label_imagem.image = img_tk
    #         except Exception as e:
    #             label_imagem.config(text="Erro ao carregar imagem", image="")
    #             label_imagem.image = None
    #             print(f"Erro ao carregar imagem da raça: {e}")
    #     else:
    #         label_imagem.config(text="Imagem não encontrada", image="")
    #         label_imagem.image = None
    # else:
    #     label_imagem.config(text="Nenhuma imagem disponível", image="")
    #     label_imagem.image = None

# Função para atualizar as raças com base no porte selecionado
# def atualizar_lista_racas(event=None):
#     porte = var_porte.get().strip()
#     print(f"Selecionado Porte: {porte}")  # Debug para verificar se captura o porte corretamente
#
#     racas = dados_pet.get(porte, {}).get("raças", [])
#     print(f"Raças disponíveis para {porte}: {racas}")  # Debug
#
#     combobox_raca["values"] = racas
#     # combobox_raca["values"] = racas
#     # combobox_raca.set("Selecione uma raça")
#
#     if racas:
#         combobox_raca.set(racas[0])  # Define a primeira raça como padrão
#         print(f"Raças disponíveis para {porte}: {racas}")  # Debug
#     else:
#         combobox_raca["values"] = []
#         combobox_raca.set("Selecione uma raça")
#
#
#
# # Criando Combobox para seleção de porte
# ttk.Label(aba_config, text="Selecione o Porte:").grid(row=0, column=0, padx=10, pady=5, sticky="w")
# combobox_porte = ttk.Combobox(aba_config, textvariable=var_porte, values=list(dados_pet.keys()), state="readonly")
# var_porte.set("Pequeno")  # Define um valor inicial para evitar problemas de variável vazia
# combobox_porte.grid(row=0, column=1, padx=10, pady=5, sticky="ew")
# combobox_porte.bind("<<ComboboxSelected>>", lambda event: [atualizar_lista_racas(event), update_porte_image(event)])



# Criando Combobox para seleção de raça
# ttk.Label(aba_config, text="Selecione a Raça:").grid(row=1, column=0, padx=10, pady=5, sticky="w")
# combobox_raca = ttk.Combobox(aba_config, textvariable=var_raca, state="readonly")
# combobox_raca.grid(row=1, column=1, padx=10, pady=5, sticky="ew")
# combobox_raca.bind("<<ComboboxSelected>>", update_raca_image)

# Adicionando `trace_add` para ativar automaticamente a atualização da imagem e das raças
# var_porte.trace_add("write", lambda *args: atualizar_lista_racas(*args))
# var_porte.trace_add("write", lambda *args: update_porte_image(*args))
#
#
# # Criando Label para exibir imagens
# label_imagem = tk.Label(aba_config, text="Nenhuma imagem disponível", width=200, height=200)
# label_imagem.grid(row=2, column=0, columnspan=2, padx=10, pady=10)




#base_path = "C:/Users/VEIRANO/Desktop/imagensipojucao"
#🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀
# ABAIXO AS SUGESTÕES DE MUDANÇAS DE HASHBOT EM 15/06/2025 ÀS 09:04 HS.
#🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀

# Funções para atualizar imagens e raças
# def update_porte_image(event=None):
#     porte = var_porte.get().strip()
#     image_path = os.path.join(base_path, f"{porte.lower()}.jpg")
#     if os.path.exists(image_path):
#         img = Image.open(image_path).resize((120, 120))
#         img_tk = ImageTk.PhotoImage(img)
#         label_imagem.config(image=img_tk)
#         label_imagem.image = img_tk
#     else:
#         label_imagem.config(text="Imagem do porte não encontrada", image="")
#         label_imagem.image = None
#
# def update_raca_image(event=None):
#     raca = var_raca.get().strip()
#     image_path = os.path.join(base_path, imagens_racas.get(raca, ''))
#     if os.path.exists(image_path):
#         img = Image.open(image_path).resize((120, 120))
#         img_tk = ImageTk.PhotoImage(img)
#         label_imagem.config(image=img_tk)
#         label_imagem.image = img_tk
#     else:
#         label_imagem.config(text="Imagem da raça não encontrada", image="")
#         label_imagem.image = None
#
# def atualizar_lista_racas(event=None):
#     porte = var_porte.get().strip()
#     racas = dados_pet.get(porte, {}).get("raças", [])
#     combobox_raca["values"] = racas
#     combobox_raca.set("Selecione uma raça")
#
# # # Configurando a interface
# # janela = tk.Tk()
# # aba_config = ttk.Frame(janela)
# # aba_config.grid()
#
# ttk.Label(aba_config, text="Selecione o Porte:").grid(row=0, column=0)
# combobox_porte = ttk.Combobox(aba_config, textvariable=var_porte, values=list(dados_pet.keys()))
# combobox_porte.grid(row=1, column=0)
# combobox_porte.bind("<<ComboboxSelected>>", lambda event: [atualizar_lista_racas(event), update_porte_image(event)])
#
# ttk.Label(aba_config, text="Selecione a Raça:").grid(row=0, column=1)
# combobox_raca = ttk.Combobox(aba_config, textvariable=var_raca, state="readonly")
# combobox_raca.grid(row=1, column=1)
# combobox_raca.bind("<<ComboboxSelected>>", update_raca_image)
#
# label_imagem = tk.Label(aba_config, text="Nenhuma imagem disponível", width=200, height=200)
# label_imagem.grid(row=2, column=0, columnspan=2)
#


















#🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀
# ACIMA AS SUGESTÕES DE MUDANÇAS DE HASHBOT EM 15/06/2025 ÀS 09:04 HS.
#🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀

# ttk.Label(aba_config, text="Selecione o Porte:").grid(row=0, column=0, padx=10, pady=5, sticky="w")
# combobox_porte = ttk.Combobox(aba_config, values=list(dados_pet.keys()))
# combobox_porte.grid(row=1, column=0, padx=10, pady=5)
# #combobox_porte.bind("<<ComboboxSelected>>", atualizar_lista_racas)  # Atualiza raças ao selecionar porte
# combobox_porte.bind("<<ComboboxSelected>>", lambda event: [atualizar_lista_racas(event), update_porte_image(event)])  # Atualiza raças e imagem ao selecionar porte
# scrollable_frame.rowconfigure(0, weight=1)  # Para o row 0 (combobox)
#
#
#
# # Criando Combobox para seleção de raça
# ttk.Label(aba_config, text="Selecione a Raça:").grid(row=1, column=1, padx=10, pady=5, sticky="w")
# combobox_raca = ttk.Combobox(aba_config, state="readonly")
# combobox_raca.grid(row=1, column=1, padx=10, pady=5, sticky="ew")






# def update_porte_image(event=None):
#     porte = var_porte.get().strip()
#     print(f"Selecionado Porte: {porte}")  # Debug
#
#     if porte:
#         image_path = os.path.join(base_path, f"{porte.lower()}.jpg")  # Assegure-se de que as imagens sigam esse padrão
#         print(f"Verificando imagem em: {image_path}")  # Debug
#         if os.path.exists(image_path):
#             try:
#                 img = Image.open(image_path).resize((120, 120))
#                 img_tk = ImageTk.PhotoImage(img)
#
#                 label_imagem.config(image=img_tk, text="")
#                 label_imagem.image = img_tk
#             except Exception as e:
#                 print(f"Erro ao carregar imagem: {e}")  # Adicione esta linha para ver se há um erro específico
#         else:
#             label_imagem.config(text="Imagem do porte não encontrada", image="")
#             label_imagem.image = None
#     else:
#         label_imagem.config(image="", text="Nenhuma imagem disponível")
#         label_imagem.image = None

#
#
# # Função para atualizar a imagem da raça
# def update_raca_image(event=None):
#     raca = var_raca.get().strip()
#     print(f"Selecionado Raça: {raca}")  # Debug
#
#     if not raca:  # Se nenhuma raça foi selecionada, não exibe imagem
#         label_imagem.config(image="", text="Nenhuma imagem disponível")
#         label_imagem.image = None
#         return
#         # Forçar a atualização do layout
#     janela.update_idletasks()
#
#     # Caminho da imagem
#     image_path = os.path.join(base_path, imagens_racas.get(raca, '')).replace("\\", "/")
#     print(f"Verificando imagem em: {image_path}")  # Debug
#
#
#     if os.path.exists(image_path):
#         try:
#             img = Image.open(image_path).resize((200, 200))
#             img_tk = ImageTk.PhotoImage(img)
#
#                 # Atualizar a referência da imagem no widget
#             label_imagem.config(image=img_tk, text="")
#             label_imagem.image = img_tk
#         except Exception as e:
#             label_imagem.config(text="Erro ao carregar imagem", image="")
#             label_imagem.image = None
#             print(f"Erro ao carregar imagem da raça: {e}")
#
#     else:
#         label_imagem.config(text="Imagem não encontrada", image="")
#         label_imagem.image = None
#
#     # except Exception as e:
#     #     print(f"Erro ao carregar imagem: {e}")  # Adicione essa linha para ver o erro específico
#     #
#     #     label_imagem.config(text="Erro ao carregar imagem", image="")
#     #     label_imagem.image = None
#
# # Função para atualizar as raças com base no porte selecionado
# def atualizar_lista_racas(event=None):
#     porte = combobox_porte.get().strip()
#     racas = dados_pet.get(porte, {}).get("raças", [])
#     combobox_raca["values"] = racas
#     combobox_raca.set("Selecione uma raça")
#
# # Acima # AQUI CRIANDO OS COMBOBOX PORTE E RAÇA PARA A aba_config QUE COMPARTILHA COM TODAS AS abas
#
# # Criando o Notebook (guias/abas)
# # notebook = ttk.Notebook(janela)
# # notebook.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
#
#
# ttk.Label(aba_config, text="Selecione o Porte:").grid(row=0, column=0, padx=10, pady=5, sticky="w")
# combobox_porte = ttk.Combobox(aba_config, values=list(dados_pet.keys()))
# combobox_porte.grid(row=1, column=0, padx=10, pady=5)
# #combobox_porte.bind("<<ComboboxSelected>>", atualizar_lista_racas)  # Atualiza raças ao selecionar porte
# combobox_porte.bind("<<ComboboxSelected>>", lambda event: [atualizar_lista_racas(event), update_porte_image(event)])  # Atualiza raças e imagem ao selecionar porte
# scrollable_frame.rowconfigure(0, weight=1)  # Para o row 0 (combobox)
#
#
#
# # Criando Combobox para seleção de raça
# ttk.Label(aba_config, text="Selecione a Raça:").grid(row=1, column=1, padx=10, pady=5, sticky="w")
# combobox_raca = ttk.Combobox(aba_config, state="readonly")
# combobox_raca.grid(row=1, column=1, padx=10, pady=5, sticky="ew")
#
#
#
#
#
# # Label para exibir imagem (Sem imagem padrão na inicialização)
# label_imagem = tk.Label(inner_frame, text="Nenhuma imagem disponível", width=200, height=200)
# label_imagem.grid(row=6, column=4, padx=10, pady=10)
#
#     # Adicione outras raças e suas respectivas imagens
#     # Certifique-se de que as imagens estão no mesmo diretório base_path
#
# # Bind a função de atualização da imagem da raça ao combobox_raca
# combobox_raca.bind("<<ComboboxSelected>>", update_raca_image)

# acima CONFIGURANDO aba_config
#🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀






# Criando um Frame para a barra de rolagem
# scrollable_frame = ttk.Frame(janela)
# scrollable_frame.grid(row=0, column=0, sticky="nsew")

# Configuração da janela
# janela.grid_rowconfigure(0, weight=1)
# janela.grid_columnconfigure(0, weight=1)

# scrollable_frame.grid_rowconfigure(0, weight=1)
# scrollable_frame.grid_columnconfigure(0, weight=1)



# Criando o Canvas e a Scrollbar
# canvas = tk.Canvas(scrollable_frame)
# scrollbar = ttk.Scrollbar(scrollable_frame, orient="vertical", command=canvas.yview)

# Criando o Frame dentro do Canvas
#inner_frame = ttk.Frame(canvas)

# Ajustando a rolagem
#inner_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))

# Criando a janela dentro do Canvas
#canvas.create_window((0, 0), window=inner_frame, anchor="nw")

# Posicionando o Canvas e a Scrollbar
# canvas.grid(row=0, column=0, sticky="nsew")
# scrollbar.grid(row=0, column=1, sticky="nsew")

#canvas.configure(yscrollcommand=scrollbar.set)

# Garantindo que a rolagem funcione corretamente
# def ajustar_tamanho_canvas(event):
#     canvas.configure(scrollregion=canvas.bbox("all"))

#inner_frame.bind("<Configure>", ajustar_tamanho_canvas)



# Criando o frame principal para dados cadastrais
# frame_porte_raca = ttk.LabelFrame(inner_frame, text="Dados Cadastrais")
# frame_porte_raca.grid(row=7, column=0, padx=10, pady=10, sticky="nsew")



# Criando o frame principal para dados cadastrais
frame_cadastro = ttk.LabelFrame(inner_frame, text="Dados Cadastrais")
frame_cadastro.grid(row=7, column=0, padx=10, pady=10, sticky="nsew")


# Criando o frame principal para Serviços
frame_servicos = ttk.LabelFrame(inner_frame, text="Serviços")
frame_servicos.grid(row=5, column=0, padx=10, pady=10, sticky="nsew")


# Criando o frame principal para informações financeiras

# Criando o frame principal para Relatórios
frame_relatorios = ttk.LabelFrame(inner_frame, text="Informações Financeiras")
frame_relatorios.grid(row=8, column=4, padx=10, pady=10, sticky="nsew")


# ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO
#     AQUI ESTÃO AS VARIÁVES QUE IRÃO SALVAR TODAS AS INFORMAÇÕES INSERIDAS EM TODAS AS GUIAS,
#     PARA CADA INFORMAÇÃO INSERIDA NAS DIVERSAS GUIAS, PRECISA INCLUIR UMA tk.StringVar() PARA SALVAR NO BANCO DE DADOS
#     StringVar PARA SALVAR RADIOBUTTONS, tk.BooleanVar() PARA SALVAR CHECKBUTTONS E DateEntry PARA SALVAR DATAS.
#     ATENÇÃO, NÃO ESQUECER DE INSERIR ESSES COMANDOS PARA CADA NOVA INFORMAÇÃO INCREMENTADA NO CÓDIGO.

# Criando variáveis para entrada de dados
var_porte = tk.StringVar() # Esta StringVar para utilizar na aba_config que compartilha informação para todas as abas
var_raca = tk.StringVar() # Esta StringVar para utilizar na aba_config que compartilha informação para todas as abas


var_nome_pet = tk.StringVar()
var_idade_anos = tk.StringVar()
var_idade_meses = tk.StringVar()
var_descricao = tk.StringVar()  # Para os Radiobuttons
var_tipopelo = tk.StringVar()
var_check_servico1 = tk.BooleanVar() # Para os Checkbutons
var_check_servico2 = tk.BooleanVar()

# ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO





# abaixo AQUI CRIANDO OS COMBOBOX PORTE E RAÇA SUGERIDO PARA A aba_config QUE COMPARTILHA COM TODAS AS abas

# Criando Combobox para seleção de porte
# ttk.Label(aba_config, text="Selecione o Porte:").grid(row=0, column=0, padx=10, pady=5, sticky="w")
# combobox_porte = ttk.Combobox(aba_config, textvariable=var_porte, values=["Pequeno", "Médio", "Grande", "Maior"], state="readonly")
# combobox_porte.grid(row=0, column=1, padx=10, pady=5, sticky="ew")

#COMBOBOX_PORTE EDITADA PARA aba.config
# Combobox para selecionar porte
# ttk.Label(aba_config, text="Selecione o Porte:").grid(row=0, column=0, padx=10, pady=5, sticky="w")
# combobox_porte = ttk.Combobox(aba_config, values=list(dados_pet.keys()))
# combobox_porte.grid(row=1, column=0, padx=10, pady=5)
# #combobox_porte.bind("<<ComboboxSelected>>", atualizar_lista_racas)  # Atualiza raças ao selecionar porte
# combobox_porte.bind("<<ComboboxSelected>>", lambda event: [atualizar_lista_racas(event), update_porte_image(event)])  # Atualiza raças e imagem ao selecionar porte
# scrollable_frame.rowconfigure(0, weight=1)  # Para o row 0 (combobox)
#
#
# # Criando Combobox para seleção de raça
# ttk.Label(aba_config, text="Selecione a Raça:").grid(row=1, column=0, padx=10, pady=5, sticky="w")
# combobox_raca = ttk.Combobox(aba_config, textvariable=var_raca, values=["Raça 1", "Raça 2", "Raça 3"], state="readonly")
# combobox_raca.grid(row=1, column=1, padx=10, pady=5, sticky="ew")




#
# # Criando um dicionário de preços baseado no porte
#
# base_path = "C:/Users/VEIRANO/PycharmProjects/ModuloTkinter/Planilha Controle Ipojucão/imagensipojucao"
# Dados centralizados (raças e preços)
# dados_pet = {
#     "Pequeno": {
#         "raças": ['Schitzu', 'Lhasa Apso', 'Maltes', 'yorkshire', 'Dachshund', 'Cavalier K.C. Spaniel',
#                   'Biewer Terrier', 'Bulldog Frances', 'Pug', 'Chihuahua', 'Cocker Spaniel', 'Papillon',
#                   'Spitz Alemao', 'Pinscher', 'Poodle', 'Jack Russel Terrier', 'Galgo Italiano', 'Pequines',
#                   'Bichon Frise', 'Boston Terrier', 'Fox Paulistinha'],
#         "preços": {"Banho": 55, "Hidratação": 20, "Desembolo": 20, "Remoção de Pelos": 20, "Corte de Unhas": 15,
#                    "Escovação de Dentes": 15, "Tosa Higiênica": 20, "Tosa na Máquina": 115,
#                    "Tosa na Tesoura": 125, "Leva e Trás": 10},
#     },
#     "Médio": {
#         "raças": ['American Pitbull', 'Australian Cattle', 'Australian Shepherd', 'Basset Griffon', 'Basset Hound',
#                   'Bulldog Campeiro', 'Bulldog', 'Bulldog Ingles', 'Bull Terrier', 'Basset Fulvo',
#                   'Boxer', 'Clumber Spaniel', 'Cocker Americano', 'Cocker Ingles', 'Flat Coated Retriever',
#                   'Pastor de Shetland', 'Pumi', 'Schnauzer Standard', 'Shar Pei', 'Spaniel Bretao', 'Spaniel Frances',
#                   'Spitz Japones', 'Spriger Spaniel Ingles', 'Terrier Tibetano', 'American Bully', 'S.R.D.-Médio'],
#         "preços": {"Banho": 65, "Hidratação": 20, "Desembolo": 20, "Remoção de Pelos": 20, "Corte de Unhas": 15,
#                    "Escovação de Dentes": 15, "Tosa Higiênica": 20, "Tosa na Máquina": 115,
#               "Tosa na Tesoura": 125, "Leva e Trás": 10},
#     },
#     "Grande": {
#         "raças": ['Pastor Alemao', 'Dogue Alemao', 'Terra Nova', 'Rottweiler', 'Sao-Bernardo', 'Labrador Retriever',
#                   'Golden Retriever', 'Fila brasileiro', 'Cane corso', 'Border collie', 'Boiadeiro de Berna',
#                   'Akita Inu', 'Mastim Ingles', 'Husky Siberiano', 'Dogo argentino', 'Dalmata', 'Weimaraner',
#                   'Bull terrier', 'Mastim tibetano', 'Leonberger', 'Pastor australiano', 'Setter irlandes',
#                   'Bulmastife', 'Mastim napolitano', 'Dogue de bordeus', 'Bulmastife', 'cao de Santo Humberto',
#                   'Rhodesian ridgeback', 'Boiadeiro da Flandres', 'Bearded collie', 'Bichon bolonhes', 'Basenji',
#                   'Boerboel', 'Pastor do caucaso', 'Veadeiro Pampeano', 'Buhund noruegues',
#                   'Basset artesiano normando', 'Braco de Auvernia', 'Galgo Ingles', 'Pastor Belga', 'Mastiff',
#                   'Bernese', 'Akita', 'Bloodhound'],
#         "preços": {"Banho": 70, "Hidratação": 20, "Desembolo": 20, "Remoção de Pelos": 20, "Corte de Unhas": 15,
#                    "Escovação de Dentes": 15, "Tosa Higiênica": 20, "Tosa na Máquina": 115,
#                 "Tosa na Tesoura": 125, "Leva e Trás": 10},
#     },
#     "Maior": {
#         "raças": ['Pit Bull', 'Fila Brasileiro', 'Chow-Chow', 'Doberman', 'Chip-dog', 'American Pit Bul terrier',
#                   'Chow-chow'],
#         "preços": {"Banho": 120, "Hidratação": 20, "Desembolo": 20, "Remoção de Pelos": 80, "Corte de Unhas": 50,
#                "Escovação de Dentes": 55, "Tosa Higiênica": 75, "Tosa na Máquina": 85,
#                "Tosa na Tesoura": 100, "Leva e Trás": 10},
#     },
# }
#
# # Função para atualizar as raças com base no porte selecionado
# def atualizar_lista_racas(event=None):
#     porte = combobox_porte.get().strip()
#     racas = dados_pet.get(porte, {}).get("raças", [])
#     combobox_raca["values"] = racas
#     combobox_raca.set("Selecione uma raça")
#
#
# # Bind a função de atualização da imagem da raça ao combobox_raca
# combobox_raca.bind("<<ComboboxSelected>>", update_raca_image)
#
# # Dicionário para armazenar imagens das raças
# imagens_racas = {
#     'Schitzu': 'schitzu.jpg',
#     'Lhasa Apso': 'lhasa_apso.jpg',
#     'Maltês': 'maltes.jpg',
#     'Yorkshire': 'yorkshire.jpg',  # Corrigido para 'Yorkshire'
#     'Dachshund': 'dachshund.jpg',
#     'Cavalier King Charles Spaniel': 'cavalier_king_charles_spaniel.jpg',  # Nome completo
#     'Biewer Terrier': 'biewer_terrier.jpg',
#     'Buldog Francês': 'bulldog_frances.jpg',
#     'Pug': 'pug.jpg',
#     'Chihuahua': 'chihuahua.jpg',  # Corrigido para 'Chihuahua'
#     'Cocker Spaniel': 'cocker_spaniel.jpg',
#     'Papillon': 'papillon.jpg',
#     'Spitz Alemão': 'spitz_alemao.jpg',  # Corrigido para 'Spitz'
#     'Pinscher': 'pinscher.jpg',
#     'Poodle': 'poodle.jpg',
#     'Jack Russell Terrier': 'jack_russell_terrier.jpg',  # Corrigido para 'Russell'
#     'Galgo Italiano': 'galgo_italiano.jpg',
#     'Pequinês': 'pequines.jpg',
#     'Bichon Frise': 'bichon_frise.jpg',
#     'Boston Terrier': 'boston_terrier.jpg',
#     'Fox Paulistinha': 'fox_paulistinha.jpg',
#     'American Pit Bull': 'american_pitbull.jpg',  # Corrigido para 'Pit Bull'
#     'Australian Cattle Dog': 'australian_cattle.jpg',
#     'Australian Shepherd': 'australian_shepherd.jpg',
#     'Basset Griffon': 'basset_griffon.jpg',
#     'Basset Hound': 'basset_hound.jpg',
#     'Bulldog Campeiro': 'bulldog_campeiro.jpg',
#     'Bulldog': 'bulldog.jpg',
#     'Bulldog Inglês': 'bulldog_ingles.jpg',
#     'Bull Terrier': 'bull_terrier.jpg',
#     'Basset Fulvo': 'basset_fulvo.jpg',
#     'Boxer': 'boxer.jpg',
#     'Clumber Spaniel': 'clumber_spaniel.jpg',
#     'Cocker Americano': 'cocker_americano.jpg',
#     'Cocker Inglês': 'cocker_ingles.jpg',
#     'Flat Coated Retriever': 'flat_coated_retriever.jpg',
#     'Pastor de Shetland': 'pastor_de_shetland.jpg',
#     'Pumi': 'pumi.jpg',
#     'Schnauzer Standard': 'schnauzer_standard.jpg',
#     'Shar Pei': 'shar_pei.jpg',
#     'Spaniel Bretão': 'spaniel_bretao.jpg',
#     'Spaniel Francês': 'spaniel_frances.jpg',
#     'Spitz Japonês': 'spitz_japones.jpg',
#     'Springer Spaniel': 'springer_spaniel.jpg',  # Corrigido para 'Springer'
#     'Springer Spaniel Inglês': 'springer_spaniel_ingles.jpg',
#     'Terrier Tibetano': 'terrier_tibetano.jpg',
#     'American Bully': 'american_bully.jpg',
#     'SRD Médio': 's_r_d_medio.jpg',  # Corrigido o acento
#     'Dogo Argentino': 'dogo_argentino.jpg',
#     'Dálmata': 'dalmatian.jpg',  # Corrigido para 'Dálmata' e nome do arquivo
#     'Weimaraner': 'weimaraner.jpg',
#     'Mastim Tibetano': 'mastim_tibetano.jpg',
#     'Leonberger': 'leonberger.jpg',
#     'Pastor Australiano': 'pastor_australiano.jpg',
#     'Setter Irlandês': 'setter_irlandes.jpg',
#     'Bulmastife': 'bulmastife.jpg',
#     'Mastim Napolitano': 'mastim_napolitano.jpg',
#     'Dogue de Bordeaux': 'dogue_de_bordeaux.jpg',  # Corrigido para 'Dogue de Bordeaux'
#     'Cão de Santo Humberto': 'cao_de_santo_humberto.jpg',
#     'Rhodesian Ridgeback': 'rhodesian_ridgeback.jpg',
#     'Boiadeiro da Flandres': 'boiadeiro_da_flandres.jpg',
#     'Bearded Collie': 'bearded_collie.jpg',
#     'Bichon Bolonhês': 'bichon_bolonhes.jpg',
#     'Basenji': 'basenji.jpg',
#     'Boerboel': 'boerboel.jpg',
#     'Pastor do Cáucaso': 'pastor_do_caucaso.jpg',
#     'Veadeiro Pampeano': 'veadeiro_pampeano.jpg',
#     'Buhund Norueguês': 'buhund_noruegues.jpg',
#     'Basset Artesiano Normando': 'basset_artesiano_normando.jpg',
#     'Braco de Auvernia': 'braco_de_auvernia.jpg',
#     'Galgo Inglês': 'galgo_ingles.jpg',
#     'Pastor Belga': 'pastor_belga.jpg',
#     'Mastiff': 'mastiff.jpg',
#     'Bernese': 'bernese.jpg',
#     'Akita': 'akita.jpg',
#     'Bloodhound': 'bloodhound.jpg',
#     'Pit Bull': 'pit_bull.jpg',
#     'Fila Brasileiro': 'fila_brasileiro.jpg',
#     'Chow Chow': 'chow_chow.jpg',
#     'Doberman': 'doberman.jpg',
#     'Chip Dog': 'chip_dog.jpg',
# }
#
# def update_porte_image(event=None):
#     porte = combobox_porte.get().strip()
#
#     if not porte:  # Se nenhum porte foi selecionado, não exibe imagem
#         label_imagem.config(image="", text="Nenhuma imagem disponível")
#         label_imagem.image = None
#         return
#
#     print(f"Atualizando imagem para o porte: {porte}")  # Debugging
#
#     # Caminho da imagem
#     image_path = os.path.join(base_path, f"{porte.lower()}.jpg").replace("\\", "/")
#     print(f"Caminho da imagem: {image_path}")  # Debugging
#
#     try:
#         if os.path.exists(image_path):
#             print(f"Imagem encontrada para o porte: {porte}")
#             img = Image.open(image_path).resize((180, 180))
#             img_tk = ImageTk.PhotoImage(img)
#
#             # Atualizar a referência da imagem no widget
#             label_imagem.config(image=img_tk, text="")
#             label_imagem.image = img_tk
#             # Forçar a atualização do layout
#             janela.update_idletasks()
#
#         else:
#             print(f"Imagem NÃO encontrada para o porte: {porte}")
#             label_imagem.config(text="Imagem não encontrada", image="")
#             label_imagem.image = None
#
#     except Exception as e:
#         print(f"Erro ao carregar a imagem para o porte: {porte} - {e}")
#         label_imagem.config(text="Erro ao carregar imagem", image="")
#         label_imagem.image = None
#
#
# # Label para exibir imagem (Sem imagem padrão na inicialização)
# label_imagem = tk.Label(inner_frame, text="Nenhuma imagem disponível", width=180, height=180)
# label_imagem.grid(row=1, column=3, padx=10, pady=10)
#
#     # Adicione outras raças e suas respectivas imagens
#     # Certifique-se de que as imagens estão no mesmo diretório base_path
#
# # Função para atualizar a imagem da raça
# def update_raca_image(event=None):
#     raca = combobox_raca.get().strip()
#
#     if not raca:  # Se nenhuma raça foi selecionada, não exibe imagem
#         label_imagem.config(image="", text="Nenhuma imagem disponível")
#         label_imagem.image = None
#         return
#         # Forçar a atualização do layout
#     janela.update_idletasks()
#
#     # Caminho da imagem
#     image_path = os.path.join(base_path, imagens_racas.get(raca, '')).replace("\\", "/")
#
#     try:
#         if os.path.exists(image_path):
#             img = Image.open(image_path).resize((200, 200))
#             img_tk = ImageTk.PhotoImage(img)
#
#             # Atualizar a referência da imagem no widget
#             label_imagem.config(image=img_tk, text="")
#             label_imagem.image = img_tk
#         else:
#             label_imagem.config(text="Imagem não encontrada", image="")
#             label_imagem.image = None
#
#     except Exception as e:
#         label_imagem.config(text="Erro ao carregar imagem", image="")
#         label_imagem.image = None
#
#
#
# # Acima # AQUI CRIANDO OS COMBOBOX PORTE E RAÇA PARA A aba_config QUE COMPARTILHA COM TODAS AS abas
#
#
#

# **Função única para salvar todos os dados, incluindo as datas**
def salvar_todos_dados():
    # Capturar os valores inseridos
    nome_pet = var_nome_pet.get()
    idade_anos = var_idade_anos.get()
    idade_meses = var_idade_meses.get()
    descricao_pelagem = var_descricao.get()
    servico_banho = var_check_servico1.get()
    servico_tosa = var_check_servico2.get()
    data_selecionada = data_cadastro.get_date().strftime("%Y-%m-%d")  # Formato padrão para banco

    # Conectar ao banco de dados
    conn = sqlite3.connect("petshop.db")
    cursor = conn.cursor()

    # Criar tabela se não existir
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS cadastro_pet (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT,
            idade_anos TEXT,
            idade_meses TEXT,
            descricao_pelagem TEXT,
            servico_banho BOOLEAN,
            servico_tosa BOOLEAN,
            data_cadastro DATE
        )
    ''')

    # Inserir dados
    cursor.execute("INSERT INTO cadastro_pet (nome, idade_anos, idade_meses, descricao_pelagem, servico_banho, servico_tosa, data_cadastro) VALUES (?, ?, ?, ?, ?, ?, ?)",
                   (nome_pet, idade_anos, idade_meses, descricao_pelagem, servico_banho, servico_tosa, data_selecionada))

    conn.commit()
    conn.close()

    print(f"Todos os dados foram salvos com sucesso! Data: {data_selecionada}")

# Criando botão central para salvar todas as informações
btn_salvar_tudo = ttk.Button(janela, text="Salvar Tudo", command=salvar_todos_dados)
btn_salvar_tudo.grid(row=1, column=0, pady=20)

# Iniciando a janela






# **Agora adicionamos elementos dentro das abas**
# ttk.Label(aba_cadastro, text="Nome do Pet:").grid(pady=10)
# entry_nome_pet = ttk.Entry(aba_cadastro)
# entry_nome_pet.grid(pady=5)



notebook.add(aba_cadastro, text="Cadastro")


# No início do seu código
var_desconto_fixo = tk.BooleanVar()
var_desconto_percentual = tk.BooleanVar()
var_status_pagamento = tk.StringVar(value="")
var_pagamento = tk.StringVar(value="")
var_condicao_pagamento = tk.StringVar(value="")
var_data_pagamento = tk.StringVar(value="")
var_calendario_cadastro = tk.StringVar(value="")
# ... e outras variáveis que você deseja tornar globais.


# O resto do seu código vai aqui, mas agora você deve adicionar os widgets dentro do scrollable_frame
# Por exemplo:




# Função para ativar/desativar métodos de pagamento
def atualizar_pagamento():
    global var_pagamento  # Declare a variável como global
    if var_status_pagamento.get() == "pago":
        # Ativar botões de pagamento
        radiobutton_pix.config(state="normal")
        radiobutton_debito.config(state="normal")
        radiobutton_credito.config(state="normal")
        radiobutton_dinheiro.config(state="normal")
    else:
        # Resetar e desabilitar botões de pagamento
        var_pagamento.set("")
        radiobutton_pix.config(state="disabled")
        radiobutton_debito.config(state="disabled")
        radiobutton_credito.config(state="disabled")
        radiobutton_dinheiro.config(state="disabled")



# Frame para seleção de porte e raça
frame_cabecalho = ttk.LabelFrame(inner_frame, text="Seleção de Porte e Raça")
frame_cabecalho.grid(row=1, column=0, padx=10, pady=10, sticky="nw")

# 🚀🚀🚀🚀🚀 COMBOBOX_PORTE ANTERIOR A CRIAÇÃO DE ABAS

# Combobox para selecionar porte
# combobox_porte = ttk.Combobox(inner_frame, values=list(dados_pet.keys()))
# combobox_porte.grid(row=1, column=0, padx=10, pady=5)
# #combobox_porte.bind("<<ComboboxSelected>>", atualizar_lista_racas)  # Atualiza raças ao selecionar porte
# combobox_porte.bind("<<ComboboxSelected>>", lambda event: [atualizar_lista_racas(event), update_porte_image(event)])  # Atualiza raças e imagem ao selecionar porte
# scrollable_frame.rowconfigure(0, weight=1)  # Para o row 0 (combobox)

# 🚀🚀🚀🚀🚀 COMBOBOX_PORTE ANTERIOR A CRIAÇÃO DE ABAS

# Combobox para selecionar raça
# combobox_raca = ttk.Combobox(frame_porte_raca)
# combobox_raca.grid(row=1, column=1, padx=10, pady=5)

# Criando um Frame para serviços
frame_disponiveis = ttk.LabelFrame(frame_servicos, text="Serviços Disponíveis")
frame_disponiveis.grid(row=10, column=1, padx=10, pady=5, sticky="nw")

scrollable_frame.rowconfigure(1, weight=1)  # Para o row 1 (serviços)

# Frame para Data do Serviço
frame_calendario_servico = ttk.LabelFrame(frame_servicos, text="Data do Serviço")
frame_calendario_servico.grid(row=11, column=0, padx=10, pady=10, sticky="w")
calendario_servico = DateEntry(frame_servicos, year=2025, locale='pt_br')
calendario_servico.grid(row=12, column=0 , padx=10, pady=10, sticky='nsew')


# Criando Checkbuttons para serviços
variaveis_servicos = {}
servicos_disponiveis = ["Banho", "Hidratação", "Desembolo", "Remoção de Pelos", "Corte de Unhas",
                        "Escovação de Dentes", "Tosa Higiênica", "Tosa na Máquina", "Tosa na Tesoura", "Leva e Trás"]

for i, servico in enumerate(servicos_disponiveis):
    variaveis_servicos[servico] = tk.BooleanVar()
    check_servico = ttk.Checkbutton(frame_servicos, text=servico, variable=variaveis_servicos[servico])
    check_servico.grid(row=i, column=0, sticky="w")


scrollable_frame.rowconfigure(2, weight=1)  # Para o row 2 (abatimentos)

# Variáveis para abatimentos
# var_desconto_fixo = tk.BooleanVar()
# var_desconto_percentual = tk.BooleanVar()


# base_path = "C:/Users/VEIRANO/PycharmProjects/ModuloTkinter/Planilha Controle Ipojucão/imagensipojucao"



# frame_imagem = ttk.LabelFrame(inner_frame, text="imagem")
# frame_imagem.grid(row=2, column=3, padx=10, pady=10, sticky="w")
# Função para atualizar a imagem
# Função para atualizar a imagem do PET
# def update_pet_image(pet_name):
#     image_path = os.path.join(base_path, f"{pet_name.lower()}.jpg").replace("\\", "/")
#
#     try:
#         if os.path.exists(image_path):
#             img = Image.open(image_path).resize((200, 200))
#             img_tk = ImageTk.PhotoImage(img)
#
#             label_imagem.config(image=img_tk, text="")
#             label_imagem.image = img_tk
#         else:
#             label_imagem.config(text="Imagem não encontrada", image="")
#             label_imagem.image = None
#
#     except Exception as e:
#         label_imagem.config(text="Erro ao carregar imagem", image="")
#         label_imagem.image = None
#
#
# # Função para selecionar a imagem do PET
# def select_image():
#     file_path = filedialog.askopenfilename(
#         title="Selecione a imagem do PET",
#         filetypes=[("Imagens", "*.jpg;*.jpg;*.jpg;*.gif")]
#     )
#
#     if file_path:
#         # Atualiza a imagem do PET no diretório especificado
#         pet_name = combobox_pet.get().lower()
#         new_image_path = os.path.join(base_path, f"{pet_name}.jpg")
#
#         # Copia a imagem para o local desejado
#         with open(file_path, 'rb') as fsrc, open(new_image_path, 'wb') as fdst:
#             fdst.write(fsrc.read())
#
#         # Atualiza a exibição da imagem
#         update_pet_image(pet_name)
#
# # Definindo o caminho base onde as imagens dos PETs estão armazenadas
# base_path = "C:\Users\VEIRANO\PycharmProjects\ModuloTkinter\Planilha Controle Ipojucão\pet_cadastrado"  # Substitua pelo caminho correto
#
# # Criação do ComboBox para selecionar o PET
# combobox_pet = ttk.Combobox(janela, values=["pet1", "pet2", "pet3"])  # Substitua pelos nomes reais dos PETs
# combobox_pet.entry()
# combobox_pet.bind("<<ComboboxSelected>>", lambda event: update_pet_image(combobox_pet.get()))
#
# # Label para exibir a imagem
# label_imagem = tk.Label(janela)
# label_imagem.entry()
#
# # Botão para selecionar a imagem do PET
# button_select_image = tk.Button(janela, text="Selecionar Imagem do PET", command=select_image)
# button_select_image.entry()
#
# # Label para selecionar raça (opcional)
# combobox_raca = ttk.Combobox(janela, values=["raça1", "raça2"])  # Adicione as raças reais
# combobox_raca.entry()
# combobox_raca.bind("<<ComboboxSelected>>", update_raca_image)
#
#
#
# # Adiciona o botão para selecionar imagem
# button_select_image = tk.Button(janela, text="Selecionar Imagem do PET", command=select_image)
# button_select_image.entry()


# Função para atualizar a imagem da raça
# def update_raca_image(event=None):
#     raca = combobox_raca.get().strip()
#
#     if not raca:  # Se nenhuma raça foi selecionada, não exibe imagem
#         label_imagem.config(image="", text="Nenhuma imagem disponível")
#         label_imagem.image = None
#         return
#
#     # Caminho da imagem
#     image_path = os.path.join(base_path, imagens_racas.get(raca, '')).replace("\\", "/")
#
#     try:
#         if os.path.exists(image_path):
#             img = Image.open(image_path).resize((200, 200))
#             img_tk = ImageTk.PhotoImage(img)
#
#             # Atualizar a referência da imagem no widget
#             label_imagem.config(image=img_tk, text="")
#             label_imagem.image = img_tk
#         else:
#             label_imagem.config(text="Imagem não encontrada", image="")
#             label_imagem.image = None
#
#     except Exception as e:
#         label_imagem.config(text="Erro ao carregar imagem", image="")
#         label_imagem.image = None


#Calendário Cadastrar Item
def cadastrar_item():
    data = calendario_cadastro.get_date()
    print(f"Data cadastrada  {data}")  # Substitua por lógica de salvar o item
    label_resultado.config(text=f"Data cadastrada  {data}")

# Frame para Data do Cadastro
frame_calendario_cadastro = ttk.LabelFrame(aba_cadastro, text="Calendario Cadastro")
frame_calendario_cadastro.grid(row=0, column=0, padx=10, pady=10, sticky="w")
calendario_cadastro = DateEntry(frame_calendario_cadastro, year=2025, locale='pt_br')
calendario_cadastro.grid(row=3, column=1 , padx=10, pady=10, sticky='nsew')

# Criando um Frame para Dados Cadastrais
# frame_cadastramento = ttk.LabelFrame(aba_cadastro, text="Dados dos Cadastrais")
# frame_cadastramento.grid(row=2, column=0, columnspan=2, padx=5, pady=5, sticky="nsew")

def criar_frame_cadastro(parent, text="Dados Cadastrais"):
    frame_cadastro = ttk.LabelFrame(parent, )
    frame_cadastro.grid(row=1, column=0, padx=10, pady=10, sticky="nsew")

    frame_cadastramento = ttk.Label(aba_cadastro, "Dados Cadastrais").grid(row=0, column=0, padx=5, pady=5, sticky="nsew")

    # nome Pet
    ttk.Label(aba_cadastro, text="Nome do Pet", anchor='w').grid(row=1, column=0, padx=10, pady=10, sticky='w')
    entry_nome = tk.Entry(frame_cadastramento)
    entry_nome.grid(row=1, column=1, columnspan=2, pady=1, sticky='nsew')

    # idade
    ttk.Label(aba_cadastro, text="Idade Anos").grid(row=2, column=0, padx=10, pady=10, sticky='nsew')
    entry_idadedopetanos = ttk.Entry(aba_cadastro)
    entry_idadedopetanos.grid(row=2, column=1, padx=10, pady=10, sticky='nsew')

    ttk.Label(aba_cadastro, text="Meses").grid(row=3, column=0, padx=10, pady=10, sticky='nsew')
    entry_idadedopetmeses = ttk.Entry(aba_cadastro)
    entry_idadedopetmeses.grid(row=3, column=1, padx=10, pady=10, sticky='nsew')

    # Tutor 1
    ttk.LabelFrame(aba_cadastro, text="Tutor 1").grid(row=4, column=0, padx=10, pady=10, sticky='nsew')
    entry_tutor_1 = tk.Entry(aba_cadastro)
    entry_tutor_1.grid(row=4, column=1, padx=10, pady=10, sticky='nsew')

    # telefone1
    ttk.Label(aba_cadastro, text="Telefone Tutor 1", anchor='e').grid(row=5, column=0, padx=10, pady=10, sticky='e')
    entry_telefone_1 = tk.Entry(aba_cadastro)
    entry_telefone_1.grid(row=5, column=1, padx=10, pady=10, sticky='nsew')
    # email Tutor1
    ttk.Label(aba_cadastro, text="email Tutor 1", anchor='e').grid(row=6, column=0, padx=10, pady=10, sticky='e')
    entry_email_tutor_1 = tk.Entry(aba_cadastro)
    entry_email_tutor_1.grid(row=6, column=1, padx=10, pady=10, sticky='nsew')

    #tutor 2
    ttk.Label(aba_cadastro, text="Tutor 2", anchor='e').grid(row=7, column=0, padx=10, pady=10, sticky='nsew')
    # Campo de entrada (Entry)
    entry_tutor_2 = tk.Entry(aba_cadastro)
    entry_tutor_2.grid(row=7, column=1, padx=10, pady=10, sticky='nsew')

    #telefone 2
    ttk.Label(aba_cadastro, text="Telefone Tutor 2", anchor='e').grid(row=8, column=0, padx=10, pady=10, sticky='nsew')
    # Campo de entrada (Entry)
    entry_telefone_2 = tk.Entry(aba_cadastro)
    entry_telefone_2.grid(row=8, column=1, padx=10, pady=10, sticky='nsew')
    frame_telefone_2a = ttk.LabelFrame(aba_cadastro, text="Telefone_a", borderwidth=1, relief='solid')
    entry_telefone_2a = tk.Entry(aba_cadastro)
    entry_telefone_2a.grid(row=9, column=0, padx=10, pady=10, sticky='nsew')

    #email Tutor2
    frame_email_tutor_2 = ttk.LabelFrame(aba_cadastro, text="email Tutor 2", anchor='e')
    frame_email_tutor_2.grid(row=9, column=1, padx=10, pady=10, sticky='e')
    entry_email_tutor_2 = tk.Entry(aba_cadastro)
    entry_email_tutor_2.grid(row=10, column=0, padx=10, pady=10, sticky='nsew')

    # Criando um Frame para Endereço e Observações
    ttk.Label(aba_cadastro, text="Endereço e Observações").grid(row=0, column=1, columnspan=2, padx=10, pady=5, sticky="nsew")
    #logradouro.config(height=170)  # Define a altura manualmente

    #frame_logradouro.grid_propagate(False)  # Impede que os widgets internos alterem o tamanho do frame


    #Endereço Logradouro
    ttk.Label(aba_cadastro, text="Endereço").grid(row=1, column=1, padx=10, pady=10, sticky='nsew')
    # Campo de entrada (Entry)
    entry_enderecopet = tk.Entry(aba_cadastro)
    entry_enderecopet.grid(row=2, column=1, padx=10, pady=10, sticky='nsew', columnspan=2)
    #entry_nome.grid(row=1, column=0, columnspan=4, pady=1, sticky='nsew')

    #endereço Número
    frame_endereconumero = ttk.Label(aba_cadastro, text="Número", anchor='e')
    frame_endereconumero.grid(row=3, column=1, padx=10, pady=10, sticky='nsew')
    # Campo de entrada (Entry)
    entry_endereconumero = tk.Entry(aba_cadastro)
    entry_endereconumero.grid(row=3, column=2, padx=10, pady=10, sticky='nsew')

    #Endereço Complemento
    frame_enderecocomplemento = ttk.Label(aba_cadastro, text="Complemento", anchor='e')
    frame_enderecocomplemento.grid(row=4, column=1, padx=10, pady=10, sticky='nsew')
    # Campo de entrada (Entry)
    entry_enderecocomplemento = tk.Entry(aba_cadastro)
    entry_enderecocomplemento.grid(row=4, column=2, padx=10, pady=10, sticky='nsew')



    frame_recomendacoes = ttk.Label(aba_cadastro, text="Recomendações", borderwidth=1, relief='solid')
    frame_recomendacoes.grid(row=20, column=0, columnspan=2, padx=10, pady=5, sticky="w")

    # Observações sobre o PET
    frame_recomendacoes = ttk.Label(aba_cadastro, text="Recomendações Sobre o pet", borderwidth=1, relief='solid' )
    frame_recomendacoes.grid(row=21, column=0, columnspan=2, padx=10, pady=10, sticky='nsew')
    # Campo de entrada (Entry)
    campo_observacoes = tk.Text(aba_cadastro, width=80, height=12, borderwidth=2, relief='solid' )
    campo_observacoes.grid(row=30, column=0, columnspan=2, padx=10, pady=10)

    # Configuração para expandir corretamente
    janela.columnconfigure(0, weight=1)
    janela.rowconfigure(0, weight=1)
    aba_cadastro.columnconfigure(1, weight=1)
#=

# entry_recomendacoes = tk.Entry(frame_recomendacoes)
# entry_recomendacoes.grid(row=0, column=3, padx=10, pady=10, sticky='nsew', columnspan=3)

# Criando um Frame para Endereço e Observações
# frame_recomendacoes = ttk.LabelFrame(inner_frame, text="Recomendações Sobre o PET")
# frame_cadastro.grid(row=2, column=5, columnspan=6, padx=10, pady=5, sticky="nsew")
#label_relatorio = tk.Label(frame_relatorio, text="Recomendações", borderwidth=1, relief='solid' )
#Campo para exibir o relatório
# campo_observacoes = tk.Text(frame_cadastro, width=50, height=10, borderwidth=2, relief='solid' )
# campo_observacoes.grid(row=4, column=0, columnspan=4, padx=10, pady=10)

#RELATÓRIOS:

# Definindo variáveis globais
combobox_item = None
combobox_item1 = None
combobox_item2 = None
calendario_inicial = None
calendario_final = None


item= {
    "Relatórios": {
        "Serviços": ['Banho', 'Hidratação', 'Desembolo', 'Remoção Pelos', 'Corte Unhas', 'Escovação Dentes', 'Tosa Higiênica', 'Tosa Máquina', 'Tosa Tesoura', 'Leva Trás']}}
                  #

item1= {
    "Relatórios": {
        "Cadastro": ['Cadastrado Desde', 'Nome Pet', 'Idade', 'Tutor 1', 'Tutor 2', 'Telefone Tutor 1', 'email Tutor 1',
                  'Telefone Tutor 2', 'email Tutor 2', 'Endereço', 'Número', 'Complemento', 'Recomendações']}}

item2= {
    "Relatórios": {
        "Pagamentos": ['Condições Pagamento', 'Abatimentos', 'Status Pagamento', 'Data Pagamento', 'Forma Pagamento']}}






# Frame para combobox item
frame_data_pagamento = ttk.LabelFrame(inner_frame, text="Data do Pagamento")
frame_data_pagamento.grid(row=9, column=1, padx=10, pady=10, sticky="w")

#combobox_item = ttk.LabelFrame(inner_frame, text="Item para Relatório")
combobox_item = ttk.Combobox(frame_relatorios, values=item["Relatórios"]["Serviços"])
combobox_item.grid(row=10, column=1, padx=10, pady=10, sticky="nsew")
combobox_item.bind("<<ComboboxSelected>>", lambda event: [atualizar_item(event)])  # Atualiza raças e imagem ao selecionar porte])  # Atualiza raças e imagem ao selecionar porte


#combobox_item1 = ttk.LabelFrame(inner_frame, text="Item para Relatório")
combobox_item1 = ttk.Combobox(frame_relatorios, values=item1["Relatórios"]["Cadastro"])
combobox_item1.grid(row=11, column=2, padx=10, pady=10, sticky="nsew")
combobox_item1.bind("<<ComboboxSelected>>", lambda event: [atualizar_item1(event),])  # Atualiza raças e imagem ao selecionar porte])  # Atualiza raças e imagem ao selecionar porte


#combobox_item = ttk.LabelFrame(inner_frame, text="Item para Relatório")
combobox_item2 = ttk.Combobox(frame_relatorios, values=item2["Relatórios"]["Pagamentos"])
combobox_item2.grid(row=12, column=3, padx=10, pady=10, sticky="nsew")
combobox_item2.bind("<<ComboboxSelected>>", lambda event: [atualizar_item2(event)])  # Atualiza raças e imagem ao selecionar porte])  # Atualiza raças e imagem ao selecionar porte
# combobox_porte = ttk.Combobox(inner_frame, values=list(dados_pet.keys()))
# combobox_porte.grid(row=0, column=0, padx=10, pady=5)
#combobox_porte.bind("<<ComboboxSelected>>", atualizar_lista_racas)  # Atualiza raças ao selecionar porte


#scrollable_frame.rowconfigure(0, weight=1)  # Para o row 0 (combobox)


# combobox_item = ttk.LabelFrame(inner_frame, text="Calendario Cadastro")
# combobox_item = ttk.Combobox(inner_frame, values=list(dados_pet.keys()))
# combobox_item.grid(row=3, column=2, padx=10, pady=10, sticky="nsew")
# scrollable_frame.rowconfigure(0, weight=1)  # Para o row 0 (combobox)



# Função única para gerar relatórios
def gerar_relatorio(event=None):
    global calendario_inicial, calendario_final


    # Captura das datas e do item selecionado
    date_inicial = calendario_inicial.get_date()
    data_final = calendario_final.get_date()
    item_selecionado = None # Definido à seguir

    # Verifica qual combobox está sendo utilizado
    if combobox_item.get():
        item_selecionado = combobox_item.get()
        relatorio_texto = f"Relatório do item {item_selecionado}\nOcorrências simuladas: {item['Relatórios']['Serviços']}"
    elif combobox_item1.get():
        item_selecionado = combobox_item1.get()
        relatorio_texto = f"Relatório do item {item_selecionado}\nOcorrências simuladas: {item1['Relatórios']['Cadastro']}"
    elif combobox_item2.get():
        item_selecionado = combobox_item2.get()
        relatorio_texto = f"Relatório do item {item_selecionado}\nOcorrências simuladas:{item2['Relatórios']['Pagamentos']}"
    else:
        relatotio_texto = "Por favor, selecione um item para pesquisa!"

        # Exibir o relatório no campo de texto
    campo_relatorio.delete('1.0', 'end')
    campo_relatorio.insert('1.0', relatorio_texto)

# Configuraçao dos Calendário
#
#
#
#
#
#
#
#
#     combobox_item = ttk.Combobox(scrollable_frame, values=list(dados_pet.keys()))
#     combobox_item.grid(row=1, column=2, padx=10, pady=5)
#     #combobox_porte.bind("<<ComboboxSelected>>", atualizar_lista_racas)  # Atualiza raças ao selecionar porte
#     combobox_item.bind("<<ComboboxSelected>>", lambda event: [atualizar_lista_racas(event), update_porte_image(event)])  # Atualiza raças e imagem ao selecionar porte
#     scrollable_frame.rowconfigure(0, weight=1)  # Para o row 0 (combobox)
#
# def gerar_relatorio():
#     # Capturar as datas e o item selecionado
#     global calendario_inicial, calendario_final, combobox_item
#
#     data_inicial = calendario_inicial.get_date()
#     data_final = calendario_final.get_date()
#     item_selecionado = combobox_item.get()
#
#
#     # Verificar se o item foi selecionado e as datas estão corretas
#     if not item_selecionado:
#         relatorio_texto = "Por favor, selecione um item para a pesquisa!\n"
#     elif not data_inicial or not data_final:
#         relatorio_texto = "Por favor, selecione a datas inicial e final!\n"
#     else:
#         # Criar o texto do relatório
#         relatorio_texto = f"Relatório do item  {item_selecionado}\n"
#         relatorio_texto += f"Data inicial  {data_inicial}\n"
#         relatorio_texto += f"Data final  {data_final}\n"
#         relatorio_texto += f"Ocorrências simuladas: ['Banho', 'Hidratação', 'Desembolo', 'Remoção Pelos', 'Corte Unhas', 'Escovação Dentes', 'Tosa Higiênica', 'Tosa Máquina', 'Tosa Tesoura', 'Leva Trás']"
#
# def gerar_relatorio():
#     # Capturar as datas e o item selecionado
#     global calendario_inicial, calendario_final, combobox_item1
#
#     data_inicial = calendario_inicial.get_date()
#     data_final = calendario_final.get_date()
#     item_selecionado = combobox_item1.get()
#
#
#     # Verificar se o item foi selecionado e as datas estão corretas
#     if not item_selecionado:
#         relatorio_texto = "Por favor, selecione um item para a pesquisa!\n"
#     elif not data_inicial or not data_final:
#         relatorio_texto = "Por favor, selecione a datas inicial e final!\n"
#     else:
#         # Criar o texto do relatório
#         relatorio_texto = f"Relatório do item  {item_selecionado}\n"
#         relatorio_texto += f"Data inicial  {data_inicial}\n"
#         relatorio_texto += f"Data final  {data_final}\n"
#         relatorio_texto += f"Ocorrências simuladas: ['Cadastrado Desde', 'Nome Pet', 'Idade', 'Tutor 1', 'Tutor 2', 'Telefone Tutor 1', 'email Tutor 1',
#                   'Telefone Tutor 2', 'email Tutor 2', 'Endereço', 'Número', 'Complemento', 'Recomendações']"
#
#
#
# def gerar_relatorio():
#     # Capturar as datas e o item selecionado
#     global calendario_inicial, calendario_final, combobox_item2
#
#     data_inicial = calendario_inicial.get_date()
#     data_final = calendario_final.get_date()
#     item_selecionado = combobox_item2.get()
#
#
#     # Verificar se o item foi selecionado e as datas estão corretas
#     if not item_selecionado:
#         relatorio_texto = "Por favor, selecione um item para a pesquisa!\n"
#     elif not data_inicial or not data_final:
#         relatorio_texto = "Por favor, selecione a datas inicial e final!\n"
#     else:
#         # Criar o texto do relatório
#         relatorio_texto = f"Relatório do item  {item_selecionado}\n"
#         relatorio_texto += f"Data inicial  {data_inicial}\n"
#         relatorio_texto += f"Data final  {data_final}\n"
#         relatorio_texto += f"Ocorrências simuladas: ['Condições Pagamento', 'Abatimentos', 'Status Pagamento', 'Data Pagamento', 'Forma Pagamento']"
#
#
#
# def update_porte_item1(event=None):
#     global combobox_item1
#     porte = combobox_item1.get().strip()
#
# def gerar_relatorio():
#     # Capturar as datas e o item selecionado
#     global calendario_inicial, calendario_final, combobox_item
#
#     data_inicial = calendario_inicial.get_date()
#     data_final = calendario_final.get_date()
#     item_selecionado = combobox_item.get()
#
#
#     # Verificar se o item foi selecionado e as datas estão corretas
#     if not item_selecionado:
#         relatorio_texto = "Por favor, selecione um item para a pesquisa!\n"
#     elif not data_inicial or not data_final:
#         relatorio_texto = "Por favor, selecione a datas inicial e final!\n"
#     else:
#         # Criar o texto do relatório
#         relatorio_texto = f"Relatório do item  {item_selecionado}\n"
#         relatorio_texto += f"Data inicial  {data_inicial}\n"
#         relatorio_texto += f"Data final  {data_final}\n"
#         relatorio_texto += f"Ocorrências simuladas: ['Porte', 'Raça', 'Serviço', 'Condições Pagamento', 'Abatimentos', 'Status Pagamento', 'Data Pagamento', 'Forma Pagamento', 'Cadastrado Desde', 'Nome Pet', 'Idade', 'Tutor 1', 'Tutor 2', 'Telefone 1', 'Telefone 2', 'Endereço', 'Poodle', 'Recomendações', 'Em Aberto-Total', 'Pago-Total', 'Em Aberto-Individual', 'Pago-Individual']"
#
#         # Exibir o relatório no campo de texto
#     campo_relatorio.delete('1.0', 'end')
#     campo_relatorio.insert('1.0', relatorio_texto)

# Configuração de Calendários
frame_calendario_inicial = ttk.LabelFrame(frame_relatorios, text="Data Inicial-Relatório")
frame_calendario_inicial.grid(row=2, column=3, padx=10, pady=10, sticky="w")
date_inicial = DateEntry(frame_relatorios, year=2025, locale='pt_br')
date_inicial.grid(row=3, column=3 , padx=10, pady=10, sticky='nsew')

frame_calendario_final = ttk.LabelFrame(inner_frame, text="Data Final-Relatório")
frame_calendario_final.grid(row=2, column=4, padx=10, pady=10, sticky="w")
date_final = DateEntry(frame_relatorios, year=2025, locale='pt_br')
date_final.grid(row=3, column=5 , padx=10, pady=10, sticky='nsew')

def limpar_relatorio():
    campo_relatorio.delete('1.0', 'end')

#Botão para limpar o relatório exibido
botao_limpar = ttk.Button(inner_frame, text="Limpar Relatório", command=limpar_relatorio)
botao_limpar.grid(row=5, column=4, pady=6)


# Criando um Frame para Relatório
frame_relatorio = ttk.LabelFrame(inner_frame, text="Relatórios-(Cadastro, Serviços, Controle Pagamentos)")
frame_relatorio.grid(row=3, column=5, columnspan=2, padx=10, pady=5, sticky="w")
#label_relatorio = tk.Label(frame_relatorio, text="Recomendações", borderwidth=1, relief='solid' )
# Campo para exibir o relatório
campo_relatorio = tk.Text(frame_relatorio, width=50, height=5, borderwidth=2, relief='solid')
campo_relatorio.grid(row=4, column=5, columnspan=2, padx=10, pady=10)



# Botão para gerar relatório
# botao_gerar = ttk.Button(inner_frame, text="Gerar Relatório", command=gerar_relatorio)
# botao_gerar.grid(row=3, column=4, pady=6)
#
# # Botão para limpar o relatório exibido
# botao_limpar = ttk.Button(inner_frame, text="Limpar Relatório", command=limpar_relatorio)
# botao_limpar.grid(row=6, column=4, pady=6)


# botao_fechar = tk.Button(text='Fechar', command=janela.quit, borderwidth=2, relief='solid')
# botao_fechar.grid(row=3, column=6, padx=6, pady=10, sticky='nsew', columnspan=4)


# FINANCEIRO FINANCEIRO FINANCEIRO

def criar_frame_financeiro(parent):
    frame_financeiro = ttk.LabelFrame(parent, text="Informações Financeiras")
    frame_financeiro.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")

    frame_financeiro = ttk.LabelFrame(inner_frame, text="Informações Financeiras")
    frame_financeiro.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")

    frame_condicoes_pagamento = ttk.LabelFrame(frame_financeiro, text="Condições de Pagamento")
    frame_condicoes_pagamento.grid(row=0, column=0, padx=5, pady=5, sticky="nsew")

    # Função para calcular e atualizar os preços dos serviços
    def atualizar_precos(event=None):
        porte_selecionado = combobox_porte.get().strip()
        total = 0
        precos_selecionados = []

        if porte_selecionado not in dados_pet:
            label_resultado.config(text="Erro: Nenhum porte válido foi selecionado!")
            return

        for servico, var in variaveis_servicos.items():
            if var.get():
                preco = dados_pet[porte_selecionado]["preços"].get(servico, 0)
                total += preco
                precos_selecionados.append(f"{servico}: R$ {preco:.2f}")

        label_resultado.config(text="\n".join(precos_selecionados) + f"\nTotal: R$ {total:.2f}")
        return total

    # Criando o Frame para abatimentos
    frame_abatimentos = ttk.LabelFrame(frame_financeiro, text="Abatimentos")
    frame_abatimentos.grid(row=2, column=0, padx=10, pady=10, sticky="nw")

    # Função para calcular abatimentos
    def calcular_desconto(valor_total):
        desconto_fixo = float(entry_desconto_fixo.get()) if var_desconto_fixo.get() else 0
        desconto_percentual = float(entry_desconto_percentual.get()) if var_desconto_percentual.get() else 0
        valor_com_desconto = valor_total - desconto_fixo
        valor_com_desconto -= (valor_com_desconto * (desconto_percentual / 100))
        return valor_com_desconto

    # Função para calcular total
    def calcular_total():
        valor_total = atualizar_precos()  # Obter o valor total dos serviços
        if valor_total is None:  # Se ocorrer erro no cálculo
            return
        valor_final = calcular_desconto(valor_total)
        label_resultado.config(text=f"Total com desconto: R$ {valor_final:.2f}")

    # Função para limpar seleções
    def limpar_selecoes():
        for var in variaveis_servicos.values():
            var.set(False)  # Desmarca todos os Checkbuttons
        entry_desconto_fixo.delete(0, tk.END)  # Limpa o campo de desconto fixo
        entry_desconto_percentual.delete(0, tk.END)  # Limpa o campo de desconto percentual
        label_resultado.config(text="Total com desconto: R$ 0.00")  # Reseta o resultado

    # Criando o Frame Principal
scrollable_frame = ttk.Frame(inner_frame, padding=10)
scrollable_frame.grid(row=1, column=0, padx=10, pady=10, sticky="nsew")



#🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀

# VERIFICAR VERIFICAR VERIFICAR VERIFICAR
#  NÃO DEFINIDO, NÃO DEFINIDO, NÃO DEFINITO

#🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀

    # Checkbuttons para aplicar abatimentos
# check_fixo = ttk.Checkbutton(frame_abatimentos, text="Desconto Fixo (R$)", variable=var_desconto_fixo)
# check_fixo.grid(row=0, column=0, sticky="w")

# entry_desconto_fixo = ttk.Entry(frame_abatimentos)
# entry_desconto_fixo.grid(row=0, column=1, padx=10, pady=5, sticky="w")

# check_percentual = ttk.Checkbutton(frame_abatimentos, text="Desconto Percentual (%)",
#                                        variable=var_desconto_percentual)
# check_percentual.grid(row=1, column=0, sticky="w")
#
# entry_desconto_percentual = ttk.Entry(frame_abatimentos)
# entry_desconto_percentual.grid(row=1, column=1, padx=10, pady=5, sticky="w")

    # Botão para calcular total
# botao_calcular = ttk.Button(frame_abatimentos, text="Calcular Total", command=calcular_total)
# botao_calcular.grid(row=2, column=0, pady=10)
#
#     # Botão para limpar seleções
# botao_limpar = ttk.Button(frame_abatimentos, text="Limpar Seleções", command=limpar_selecoes)
# botao_limpar.grid(row=2, column=1, padx=10)
#
#     # Label para exibir o resultado do cálculo
# label_resultado = ttk.Label(frame_abatimentos, text="Total com desconto: R$")
# label_resultado.grid(row=3, column=0, columnspan=2, padx=10, pady=5)


#🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀

# VERIFICAR VERIFICAR VERIFICAR VERIFICAR
#  NÃO DEFINIDO, NÃO DEFINIDO, NÃO DEFINITO

#🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀


    # Variável para definir se o pagamento foi feito ou está em aberto
var_status_pagamento = tk.StringVar(value="Nenhuma Opção Marcada")
# = tk.StringVar(value="")  # COMANDO ADICIONADO PARA REPOSICIONAR CAMPOS RADIOBUTTON E IMAGEM COMBOBOX_PORTE
var_pagamento = tk.StringVar(value="")  # Correção aqui


    # Frame para os métodos de pagamento
    # frame_pagamento = ttk.LabelFrame(inner_frame, text="Forma de Pagamento")
    # frame_pagamento.grid(row=5, column=0, columnspan=2, padx=10, pady=10, sticky="nw")

scrollable_frame.rowconfigure(3, weight=1)  # Para o row 3 (pagamento)

    # Botões para definir o status do pagamento
    # ttk.Label(inner_frame, text="Status Pagamento:").grid(row=4, column=0, padx=10, pady=5, sticky="w")
    # botao_pago = tk.Radiobutton(inner_frame, text="Pago", variable=var_status_pagamento, value="pago")
    # botao_pago.grid(row=5, column=1, sticky="w")

    # Variável para definir o status de pagamento
    # var_status_pagamento = tk.StringVar(value="")  # Inicia vazio

# frame_status_pagamento = ttk.LabelFrame(frame_financeiro, text="Status Pagamento")
# frame_status_pagamento.config(height=10)  # Define a altura manualmente
# frame_status_pagamento.grid(row=1, column=1, padx=10, pady=10, sticky="w")
# frame_status_pagamento.grid_propagate(False)  # Impede que os widgets internos alterem o tamanho do frame
#
#     # criação frame aberto_pago
# frame_aberto_pago = ttk.LabelFrame(frame_financeiro, text="Status Pagamento")
# frame_aberto_pago.grid(row=3, column=0, padx=10, pady=5, sticky="w")
#
#     # Botões para definir o status do pagamento
#     # ttk.Label(frame_aberto_pago, text="Status Pagamento:").grid(row=3, column=0, padx=10, pady=5, sticky="w")
# botao_em_aberto = tk.Radiobutton(frame_aberto_pago, text="Em Aberto", variable=var_status_pagamento,
#                                      value="em_aberto", command=atualizar_pagamento)
# botao_em_aberto.grid(row=3, column=1, sticky="w")
# botao_pago = tk.Radiobutton(frame_aberto_pago, text="Pago", variable=var_status_pagamento, value="pago",
#                                 command=atualizar_pagamento)
# botao_pago.grid(row=4, column=1, sticky="w")
#
#     # Variável para armazenar a forma de pagamento
#     # var_pagamento = tk.StringVar(value="")  # Inicia vazio
#
#     # Frame para Data do Pagamento
# frame_data_pagamento = ttk.LabelFrame(frame_financeiro, text="Data do Pagamento")
# frame_data_pagamento.grid(row=3, column=1, padx=10, pady=10, sticky="w")
# calendario_data_pagamento = DateEntry(frame_data_pagamento, year=2025, locale='pt_br')
# calendario_data_pagamento.grid(row=2, column=1, padx=10, pady=10, sticky='nsew')
#
#     # Frame para os métodos de pagamento
# frame_pagamento = ttk.LabelFrame(frame_financeiro, text="Forma de Pagamento")
# frame_pagamento.grid(row=4, column=0, padx=10, pady=10, sticky="nsew")
#


#🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀

# VERIFICAR VERIFICAR VERIFICAR VERIFICAR
#  NÃO DEFINIDO, NÃO DEFINIDO, NÃO DEFINITO

#🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀


    # label_data_do_pagamento = tk.Label(frame_pagamento, text="Data do Pagamento")
    # label_data_do_pagamento.grid(row=14, column=0 , padx=10,pady=10, sticky='nsew')
    # Instanciação correta do DateEntry

    # Botões de forma de pagamento (inicialmente desabilitados)
# radiobutton_pix = tk.Radiobutton(frame_pagamento, text="PIX", variable=var_pagamento, value="PIX", state="disabled")
# radiobutton_pix.grid(row=0, column=0, sticky="w")
#
# radiobutton_debito = tk.Radiobutton(frame_pagamento, text="Cartão de Débito", variable=var_pagamento,
#                                         value="Débito", state="disabled")
# radiobutton_debito.grid(row=1, column=0, sticky="w")
# radiobutton_credito = tk.Radiobutton(frame_pagamento, text="Cartão de Crédito", variable=var_pagamento,
#                                          value="Crédito", state="disabled")
# radiobutton_credito.grid(row=2, column=0, sticky="w")
#
# radiobutton_dinheiro = tk.Radiobutton(frame_pagamento, text="Em Espécie (Dinheiro)", variable=var_pagamento,
#                                           value="Dinheiro", state="disabled")
# radiobutton_dinheiro.grid(row=3, column=0, sticky="w")

    # scrollable_frame.rowconfigure(4, weight=1)  # Para o row 4 (status de pagamento)

    # Frame para condições de pagamento
# frame_classificacao_cliente = ttk.LabelFrame(frame_financeiro, text="Condições de Pagamento")
# frame_classificacao_cliente.grid(row=1, column=0, padx=10, pady=10, sticky="w")
#     #                                (row=1, column=0, columnspan=2, padx=10, pady=5, sticky="nw")
#     # Variável para armazenar a condição de pagamento
# var_condicao_pagamento = tk.StringVar(value="")
#
#     # Labels e Radiobuttons para condições de pagamento
# ttk.Label(frame_classificacao_cliente, text="Tipo:").grid(row=1, column=1, padx=10, pady=5, sticky="w")
#
# radiobutton_pago_individual = tk.Radiobutton(frame_classificacao_cliente, text="Individual(Na Data)",
#                                                  variable=var_condicao_pagamento, value="pago_individual")
# radiobutton_pago_individual.grid(row=0, column=0, sticky="w")
#
# radiobutton_pacote_quinzenal = tk.Radiobutton(frame_classificacao_cliente, text="Pacote Quinzenal",
#                                                   variable=var_condicao_pagamento, value="pacote_quinzenal")
# radiobutton_pacote_quinzenal.grid(row=1, column=0, sticky="w")
#
# radiobutton_pacote_mensal = tk.Radiobutton(frame_classificacao_cliente, text="Pacote Mensal",
#                                                variable=var_condicao_pagamento, value="pacote_mensal")
# radiobutton_pacote_mensal.grid(row=2, column=0, sticky="w")

#🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀

# VERIFICAR VERIFICAR VERIFICAR VERIFICAR
#  NÃO DEFINIDO, NÃO DEFINIDO, NÃO DEFINITO

#🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀


    # Variável para armazenar a forma de pagamento
    # var_pagamento = tk.StringVar(value="")  # Inicia vazio

    # Frame para os métodos de pagamento
    # frame_pagamento = ttk.LabelFrame(inner_frame, text="Forma de Pagamento")
    # frame_pagamento.grid(row=5, column=0, columnspan=3, padx=10, pady=10, sticky="nsew")
    #
    # scrollable_frame.rowconfigure(4, weight=1)  # Para o row 4 (status de pagamento)


# FINANCEIRO FINANCEIRO FINANCEIRO





# CONSULTA CONSULTA CONSULTA

def criar_frame_consulta(parent):
    frame_consulta = ttk.LabelFrame(parent, text="Informações Sobre o PET")
    frame_consulta.grid(row=0, column=0, padx=5, pady=5, sticky="nsew")

    frame_consulta = ttk.LabelFrame(frame_consulta, text="Consultando PET")
    frame_consulta.grid(row=0, column=0, padx=5, pady=5, sticky="nsew")

    # nome Pet
#     frame_nome_pet = ttk.LabelFrame(frame_cadastro, text="Nome do Pet", anchor='w')
#     frame_nome_pet.grid(row=1, column=0, padx=10, pady=10, sticky='w')
#     entry_nome = tk.Entry(frame_cadastro)
#     entry_nome.grid(row=1, column=1, columnspan=4, pady=1, sticky='nsew')
#
#     # idade
#     frame_idadedopetanos = ttk.LabelFrame(frame_cadastro, text="Idade Anos")
#     frame_idadedopetanos.grid(row=2, column=0, padx=10, pady=10, sticky='nsew')
#     entry_idadedopetanos = tk.Entry(frame_cadastro)
#     entry_idadedopetanos.grid(row=2, column=1, padx=10, pady=10, sticky='nsew')
#
#     frame_idadedopetmeses = ttk.LabelFrame(frame_cadastro, text="Meses")
#     frame_idadedopetmeses.grid(row=3, column=0, padx=10, pady=10, sticky='nsew')
#     entry_idadedopetmeses = tk.Entry(frame_cadastro)
#     entry_idadedopetmeses.grid(row=3, column=1, padx=10, pady=10, sticky='nsew')
#
#     # Tutor 1
#     frame_tutor1 = ttk.LabelFrame(frame_cadastro, text="Tutor 1", anchor='e')
#     frame_tutor1.grid(row=4, column=0, padx=10, pady=10, sticky='nsew')
#     entry_tutor_1 = tk.Entry(frame_cadastro)
#     entry_tutor_1.grid(row=4, column=1, padx=10, pady=10, sticky='nsew')
#
#     # telefone1
#     frame_telefone_1 = ttk.LabelFrame(frame_cadastro, text="Telefone Tutor 1", anchor='e')
#     frame_telefone_1.grid(row=5, column=0, padx=10, pady=10, sticky='e')
#     entry_telefone_1 = tk.Entry(frame_cadastro)
#     entry_telefone_1.grid(row=5, column=1, padx=10, pady=10, sticky='nsew')
#     # email Tutor1
#     frame_email_tutor_1 = ttk.LabelFrame(frame_cadastro, text="email Tutor 1", anchor='e')
#     frame_email_tutor_1.grid(row=6, column=0, padx=10, pady=10, sticky='e')
#     entry_email_tutor_1 = tk.Entry(frame_cadastro)
#     entry_email_tutor_1.grid(row=6, column=1, padx=10, pady=10, sticky='nsew')
#
#     # tutor 2
#     frame_tutor2 = ttk.LabelFrame(frame_cadastro, text="Tutor 2", anchor='e')
#     frame_tutor2.grid(row=7, column=0, padx=10, pady=10, sticky='nsew')
#     # Campo de entrada (Entry)
#     entry_tutor_2 = tk.Entry(frame_cadastro)
#     entry_tutor_2.grid(row=7, column=1, padx=10, pady=10, sticky='nsew')
#
#     # telefone 2
#     frame_telefone_2 = ttk.LabelFrame(frame_cadastro, text="Telefone Tutor 2", anchor='e')
#     frame_telefone_2.grid(row=8, column=0, padx=10, pady=10, sticky='nsew')
#     # Campo de entrada (Entry)
#     entry_telefone_2 = tk.Entry(frame_cadastro)
#     entry_telefone_2.grid(row=8, column=1, padx=10, pady=10, sticky='nsew')
#     frame_telefone_2a = ttk.LabelFrame(frame_cadastro, text="Telefone_a", borderwidth=1, relief='solid')
#     entry_telefone_2a = tk.Entry(inner_frame)
#     entry_telefone_2a.grid(row=9, column=0, padx=10, pady=10, sticky='nsew')
#
#     # email Tutor2
#     frame_email_tutor_2 = ttk.LabelFrame(frame_cadastro, text="email Tutor 2", anchor='e')
#     frame_email_tutor_2.grid(row=9, column=1, padx=10, pady=10, sticky='e')
#     entry_email_tutor_2 = tk.Entry(frame_cadastro)
#     entry_email_tutor_2.grid(row=10, column=0, padx=10, pady=10, sticky='nsew')
#
#     # Criando um Frame para Endereço e Observações
#     logradouro = tttk.LabelFrame(frame_cadastro, text="Endereço e Observações")
#     # logradouro.config(height=170)  # Define a altura manualmente
#     logradouro.grid(row=13, column=0, columnspan=5, padx=10, pady=5, sticky="nsew")
#     # frame_logradouro.grid_propagate(False)  # Impede que os widgets internos alterem o tamanho do frame
#
#     # Endereço Logradouro
#     frame_enderecopet = ttk.LabelFrame(frame_cadastro, text="Endereço", anchor='e')
#     frame_enderecopet.grid(row=14, column=0, padx=10, pady=10, sticky='nsew')
#     # Campo de entrada (Entry)
#     entry_enderecopet = tk.Entry(frame_cadastro)
#     entry_enderecopet.grid(row=14, column=1, padx=10, pady=10, sticky='nsew', columnspan=6)
#     # entry_nome.grid(row=1, column=0, columnspan=4, pady=1, sticky='nsew')
#
#     # endereço Número
#     frame_endereconumero = ttk.LabelFrame(frame_cadastro, text="Número", anchor='e')
#     frame_endereconumero.grid(row=15, column=0, padx=10, pady=10, sticky='nsew')
#     # Campo de entrada (Entry)
#     entry_endereconumero = tk.Entry(frame_cadastro)
#     entry_endereconumero.grid(row=15, column=1, padx=10, pady=10, sticky='nsew')
# qua
#     # Endereço Complemento
#     ttk.Label(frame_endereco, text="Complemento").grid(row=15, column=2, padx=10, pady=10, sticky='nsew')
#     # Campo de entrada (Entry)
#     entry_enderecocomplemento = ttk.Entry(frame_endereco)
#     entry_enderecocomplemento.grid(row=2, column=1, padx=10, pady=10, sticky='nsew')
#
#     frame_recomendacoes = tttk.LabelFrameFrame(frame_cadastro, text="Recomendações", borderwidth=1, relief='solid')
#     frame_recomendacoes.grid(row=20, column=0, columnspan=4, padx=10, pady=5, sticky="w")
#
#     # Observações sobre o PET
#     frame_recomendacoes = ttk.LabelFrame(frame_cadastro, text="Recomendações Sobre o pet", borderwidth=1,
#                                          relief='solid')
#     frame_recomendacoes.grid(row=21, column=0, columnspan=5, padx=10, pady=10, sticky='nsew')
#     # Campo de entrada (Entry)
#     campo_observacoes = tk.Text(frame_cadastro, width=80, height=12, borderwidth=2, relief='solid')
#     campo_observacoes.grid(row=30, column=0, columnspan=6, padx=10, pady=10)

# import tkinter as tk
# from tkinter import ttk
#
# # Criando a janela principal
# janela = tk.Tk()
# janela.title("Cadastro Pet Shop")

# Criando o Notebook
# notebook = ttk.Notebook(janela)
# notebook.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
#


# Criando um Frame para Dados Cadastrais
frame_cadastramento = tk.LabelFrame(aba_cadastro, text="Dados Cadastrais", borderwidth=3, relief='groove')
frame_cadastramento.grid(row=1, column=0, padx=10, pady=10, sticky="nsew")

# Nome do Pet
ttk.Label(frame_cadastramento, text="Nome do Pet:").grid(row=0, column=0, padx=10, pady=5, sticky="w")
entry_nome_pet = ttk.Entry(frame_cadastramento)
entry_nome_pet.grid(row=0, column=1, padx=10, pady=5, sticky="ew")

# Idade
ttk.Label(frame_cadastramento, text="Idade (Anos):").grid(row=1, column=0, padx=10, pady=5, sticky="w")
entry_idade_anos = ttk.Entry(frame_cadastramento)
entry_idade_anos.grid(row=1, column=1, padx=10, pady=5, sticky="ew")

ttk.Label(frame_cadastramento, text="Idade (Meses):").grid(row=2, column=0, padx=10, pady=5, sticky="w")
entry_idade_meses = ttk.Entry(frame_cadastramento)
entry_idade_meses.grid(row=2, column=1, padx=10, pady=5, sticky="ew")

# Criando um Frame para Endereço e Observações
frame_endereco = tk.LabelFrame(aba_cadastro, text="Endereço e Observações", borderwidth=3, relief='groove')
frame_endereco.grid(row=0, column=2, columnspan=2, padx=10, pady=10, sticky="nsew")

ttk.Label(frame_endereco, text="Endereço:").grid(row=0, column=0, padx=10, pady=5, sticky="w")
entry_expande = ttk.Entry(frame_endereco)
entry_expande.grid(row=0, column=1, columnspan=2, padx=10, pady=5, sticky="ew")

# aumentando o tamanho do entry configurando columnconfigure(1, weight=1)
frame_endereco.columnconfigure(1, weight=2)

# Configura as colunas do frame_endereco para expansão
# for col in range(2):
#     frame_endereco.columnconfigure(col, weight=1)



ttk.Label(frame_endereco, text="Número:").grid(row=1, column=0, padx=10, pady=5, sticky="w")
entry_fixo = ttk.Entry(frame_endereco)
entry_fixo.grid(row=1, column=1, padx=10, pady=5, sticky="w")

# Endereço Complemento
ttk.Label(frame_endereco, text="Complemento").grid(row=2, column=0, padx=10, pady=10, sticky='nsew')     # Campo de entrada (Entry)
entry_enderecocomplemento = ttk.Entry(frame_endereco)
entry_enderecocomplemento.grid(row=2, column=1, columnspan=2, padx=10, pady=10, sticky='ew')

# EXEMPLO EXPANSÃO OU NÃO DE LINHAS

# Configuração das linhas (impedindo que algumas expandam)
# frame_exemplo.rowconfigure(0, weight=0)  # Linha fixa
# frame_exemplo.rowconfigure(1, weight=1)  # Linha que pode expandir


# Configuração das linhas (impedindo que algumas expandam)
# frame_exemplo.rowconfigure(0, weight=0)  # Linha fixa
# frame_exemplo.rowconfigure(1, weight=1)  # Linha que pode expandir
#
# # Adicionando widgets
# ttk.Label(frame_exemplo, text="Linha fixa:").grid(row=0, column=0, padx=10, pady=5, sticky="w")
# entry_fixo = ttk.Entry(frame_exemplo)
# entry_fixo.grid(row=0, column=1, padx=10, pady=5, sticky="w")  # Não vai expandir
#
# ttk.Label(frame_exemplo, text="Linha expansível:").grid(row=1, column=0, padx=10, pady=5, sticky="w")
# entry_expande = ttk.Entry(frame_exemplo)
# entry_expande.grid(row=1, column=1, padx=10, pady=5, sticky="ew")  # Vai expandir
#


# Configuração das linhas (impedindo que algumas expandam)
#frame_endereco.rowconfigure(0, weight=0)  # Linha fixa
#frame_endereco.rowconfigure(1, weight=1)  # Linha que pode expandir

# Adicionando widgets
# ttk.Label(frame_endereco, text="Linha fixa:").grid(row=0, column=0, padx=10, pady=5, sticky="w")
# entry_fixo = ttk.Entry(frame_endereco)
# entry_fixo.grid(row=0, column=1, padx=10, pady=5, sticky="w")  # Não vai expandir
#
# ttk.Label(frame_endereco, text="Linha expansível:").grid(row=1, column=0, padx=10, pady=5, sticky="w")
# entry_expande = ttk.Entry(frame_endereco)
# entry_expande.grid(row=1, column=1, padx=10, pady=5, sticky="ew")  # Vai expandir


# EXEMPLO EXPANSÃO OU NÃO DE LINHAS


# Criando um Frame para Dados Cadastrais
frame_tutor = tk.LabelFrame(aba_cadastro, text="Dados dos Tutores", borderwidth=3, relief='groove')
frame_tutor.grid(row=3, column=0, padx=10, pady=10, sticky="nsew")

# Tutor 1
ttk.Label(frame_tutor, text="NOME Tutor 1:").grid(row=3, column=0, padx=10, pady=10, sticky='nsew')
entry_tutor_1 = tk.Entry(frame_tutor)
entry_tutor_1.grid(row=3, column=1, padx=10, pady=10, sticky='nsew')

# telefone1
ttk.Label(frame_tutor, text="Telefone Tutor 1").grid(row=4, column=0, padx=10, pady=10, sticky='e')
entry_telefone_1 = tk.Entry(frame_tutor)
entry_telefone_1.grid(row=4, column=1, padx=10, pady=10, sticky='nsew')

# email Tutor1
ttk.Label(frame_tutor, text="email Tutor 1").grid(row=5, column=0, padx=10, pady=10, sticky='e')
entry_email_tutor_1 = tk.Entry(frame_tutor)
entry_email_tutor_1.grid(row=5, column=1, padx=10, pady=10, sticky='nsew')

# tutor 2
ttk.Label(frame_tutor, text="NOME Tutor 2:").grid(row=6, column=0, padx=10, pady=10, sticky='nsew')

# Campo de entrada (Entry)
entry_tutor_2 = tk.Entry(frame_tutor)
entry_tutor_2.grid(row=6, column=1, padx=10, pady=10, sticky='nsew')

# telefone 2
ttk.Label(frame_tutor, text="Telefone Tutor 2").grid(row=7, column=0, padx=10, pady=10, sticky='nsew')
# Campo de entrada (Entry)
entry_telefone_2 = tk.Entry(frame_tutor)
entry_telefone_2.grid(row=7, column=1, padx=10, pady=10, sticky='nsew')
ttk.LabelFrame(frame_tutor, text="Telefone_a")
entry_telefone_2a = tk.Entry(inner_frame)
entry_telefone_2a.grid(row=8, column=0, padx=10, pady=10, sticky='nsew')

# email Tutor2
ttk.Label(frame_tutor, text="email Tutor 2").grid(row=9, column=0, padx=10, pady=10, sticky='e')
entry_email_tutor_2 = tk.Entry(frame_tutor)
entry_email_tutor_2.grid(row=9, column=1, padx=10, pady=10, sticky='nsew')



# Configuração para expandir corretamente
# janela.columnconfigure(0, weight=1)
# janela.rowconfigure(0, weight=1)
# aba_cadastro.columnconfigure(1, weight=1)

# Criando um frame para tipopelo e Características do PET
# frame_descricao = tk.LabelFrame(aba_cadastro, text="tipopelo e Características - Pelagem", borderwidth=3, relief='groove')
# frame_descricao.grid(row=4, column=0, padx=10, pady=10, sticky="nsew")

# ALTERAÇÃO COPILOT

# Criando um Frame para tipopelo e Características
aba_cadastro = ttk.Frame(aba_cadastro)
aba_cadastro.grid(row=1, column=1, padx=10, pady=10, sticky="nsew")

frame_descricao = tk.LabelFrame(aba_cadastro, text=" Tamanho e Características - Pelagem ", borderwidth=3, relief="groove")
frame_descricao.grid(row=1, column=0, padx=10, pady=10, sticky="nsew")

# Criando variável para os Radiobuttons
var_descricao = tk.StringVar(value="") # Inicializa sem nenhuma seleção

# ALTERAÇÃO COPITOL


# Botões de Características - Pelagem (inicialmente desabilitados)
radiobutton_curta = tk.Radiobutton(frame_descricao, text="Curta", variable=var_descricao, value="Curta")
radiobutton_curta.grid(row=2, column=0, sticky="w")

radiobutton_mediana = tk.Radiobutton(frame_descricao, text="Mediana", variable=var_descricao, value="Mediana")
radiobutton_mediana.grid(row=3, column=0, sticky="w")

radiobutton_longa = tk.Radiobutton(frame_descricao, text="Longa", variable=var_descricao, value="Longa")
radiobutton_longa.grid(row=4, column=0, sticky="w")

# Função para ativar/desativar Radiobuttons
def atualizar_descricao():
    global var_descricao  # Declare a variável como global
    if var_descricao.get() in ["Curta", "Mediana", "Longa"]:
        # Ativar botões de pagamento
        radiobutton_curta.config(state="normal")
        radiobutton_mediana.config(state="normal")
        radiobutton_longa.config(state="normal")
    else:
        # Resetar e desabilitar botões de pagamento
        var_descricao.set("") # Ressetar seleção
        radiobutton_curta.config(state="disabled")
        radiobutton_mediana.config(state="disabled")
        radiobutton_longa.config(state="disabled")

# Botão para testar ativação dos Radiobuttons
# btn_ativar = ttk.Button(frame_descricao, text="Ativar Seleção", command=atualizar_descricao)
# btn_ativar.grid(row=5, column=0, pady=10, sticky="w")


# Função para salvar no banco de dados
def salvar_descricao():
    descricao_selecionada = var_descricao.get()

    if descricao_selecionada:
        conn = sqlite3.connect("petshop.db")  # Conectar ao banco de dados
        cursor = conn.cursor()

        # Criar tabela se não existir
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS caracteristicas_pet (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                descricao TEXT
            )
        ''')

        # Inserir dados
        cursor.execute("INSERT INTO caracteristicas_pet (descricao) VALUES (?)", (descricao_selecionada,))
        conn.commit()
        conn.close()

        print(f"tipopelo '{descricao_selecionada}' salva no banco de dados!")


# Botão para salvar no banco de dados
# btn_salvar = ttk.Button(frame_descricao, text="Salvar Seleção", command=salvar_descricao)
# btn_salvar.grid(row=6, column=0, pady=10, sticky="w")














# Criando um Frame para Tipos de Pelos
aba_cadastro = ttk.Frame(aba_cadastro)
aba_cadastro.grid(row=2, column=1, padx=10, pady=10, sticky="nsew")

frame_tipopelo = tk.LabelFrame(aba_cadastro, text="Tipo de Pelo", borderwidth=3, relief="groove")
frame_tipopelo.grid(row=3, column=1, padx=10, pady=10, sticky="nsew")

# Criando variável para os Radiobuttons
var_tipopelo = tk.StringVar(value="") # Inicializa sem nenhuma seleção
#
# # ALTERAÇÃO COPITOL
#
#
# # Botões de forma de pagamento (inicialmente desabilitados)
radiobutton_grosso = tk.Radiobutton(frame_tipopelo, text="Grosso Espesso", variable=var_tipopelo, value="Grosso Espesso")
radiobutton_grosso.grid(row=1, column=1, sticky="w")

radiobutton_fino = tk.Radiobutton(frame_tipopelo, text="Fino Suave", variable=var_tipopelo, value="Fino Suave")
radiobutton_fino.grid(row=2, column=1, sticky="w")


# Função para ativar/desativar Radiobuttons
def atualizar_tipopelo():
    global var_tipopelo  # Declare a variável como global
    if var_tipopelo.get() in ["Grosso", "Fino"]:
        # Ativar botões de pagamento
        radiobutton_grosso.config(state="normal")
        radiobutton_fino.config(state="normal")

    else:
        # Resetar e desabilitar botões de pagamento
        var_tipopelo.set("") # Ressetar seleção
        radiobutton_grosso.config(state="disabled")
        radiobutton_fino.config(state="disabled")

# Botão para testar ativação dos Radiobuttons
# btn_ativar = ttk.Button(frame_tipopelo, text="Ativar Seleção", command=atualizar_tipopelo)
# btn_ativar.grid(row=4, column=3, pady=10, sticky="w")


# Função para salvar no banco de dados
def salvar_tipopelo():
    tipopelo_selecionada = var_tipopelo.get()

    if tipopelo_selecionada:
        conn = sqlite3.connect("petshop.db")  # Conectar ao banco de dados
        cursor = conn.cursor()

        # Criar tabela se não existir
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS caracteristicas_pet (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                descricao TEXT
            )
        ''')

        # Inserir dados
        cursor.execute("INSERT INTO caracteristicas_pet (descricao) VALUES (?)", (tipopelo_selecionada,))
        conn.commit()
        conn.close()

        print(f"tipopelo '{tipopelo_selecionada}' salva no banco de dados!")

#
# # Botão para salvar no banco de dados
# btn_salvar = ttk.Button(frame_tipopelo, text="Salvar Seleção", command=salvar_tipopelo)
# btn_salvar.grid(row=5, column=3, pady=10, sticky="w")






















# Criando um Frame para Cuidados Necessários
aba_cadastro = ttk.Frame(aba_cadastro)
aba_cadastro.grid(row=3, column=1, padx=10, pady=10, sticky="nsew")

frame_cuidados = tk.LabelFrame(aba_cadastro, text="Tipo de Pelo", borderwidth=3, relief="groove")
frame_cuidados.grid(row=3, column=1, padx=10, pady=10, sticky="nsew")

# Criando variável para os Radiobuttons
var_cuidados = tk.StringVar(value="") # Inicializa sem nenhuma seleção
#
# # ALTERAÇÃO COPITOL
#
#
# # Botões de forma de pagamento (inicialmente desabilitados)
# radiobutton_grosso = tk.Radiobutton(frame_tipopelo, text="Grosso Espesso", variable=var_tipopelo, value="Grosso Espesso")
# radiobutton_grosso.grid(row=1, column=1, sticky="w")
#
# radiobutton_fino = tk.Radiobutton(frame_tipopelo, text="Fino Suave", variable=var_tipopelo, value="Fino Suave")
# radiobutton_fino.grid(row=2, column=1, sticky="w")
#
#
# # Função para ativar/desativar Radiobuttons
# def atualizar_tipopelo():
#     global var_tipopelo  # Declare a variável como global
#     if var_tipopelo.get() in ["Grosso", "Fino"]:
#         # Ativar botões de pagamento
#         radiobutton_grosso.config(state="normal")
#         radiobutton_fino.config(state="normal")
#
#     else:
#         # Resetar e desabilitar botões de pagamento
#         var_tipopelo.set("") # Ressetar seleção
#         radiobutton_grosso.config(state="disabled")
#         radiobutton_fino.config(state="disabled")
#
# # Botão para testar ativação dos Radiobuttons
# # btn_ativar = ttk.Button(frame_tipopelo, text="Ativar Seleção", command=atualizar_tipopelo)
# # btn_ativar.grid(row=4, column=3, pady=10, sticky="w")
#
#
# # Função para salvar no banco de dados
# def salvar_tipopelo():
#     tipopelo_selecionada = var_tipopelo.get()
#
#     if tipopelo_selecionada:
#         conn = sqlite3.connect("petshop.db")  # Conectar ao banco de dados
#         cursor = conn.cursor()
#
#         # Criar tabela se não existir
#         cursor.execute('''
#             CREATE TABLE IF NOT EXISTS caracteristicas_pet (
#                 id INTEGER PRIMARY KEY AUTOINCREMENT,
#                 descricao TEXT
#             )
#         ''')
#
#         # Inserir dados
#         cursor.execute("INSERT INTO caracteristicas_pet (descricao) VALUES (?)", (tipopelo_selecionada,))
#         conn.commit()
#         conn.close()
#
#         print(f"tipopelo '{tipopelo_selecionada}' salva no banco de dados!")

# Executar a interface gráfica


# CONSULTA CONSULTA CONSULTA

janela.mainloop()

