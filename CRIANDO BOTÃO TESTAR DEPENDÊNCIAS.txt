CRIANDO BOT√ÉO TESTAR DEPEND√äNCIAS:

import tkinter as tk
from tkinter import messagebox

def testar_dependencias():
    pacotes = {
        "matplotlib": "Importa√ß√£o gr√°fica",
        "pandas": "Planilhas e tabelas",
        "PIL": "Manipula√ß√£o de imagens",
        "tkcalendar": "Calend√°rio no tkinter"
    }

    erros = []

    for modulo in pacotes:
        try:
            __import__(modulo)
        except ImportError:
            erros.append(f"‚ùå {modulo} ({pacotes[modulo]})")

    if not erros:
        messagebox.showinfo("Testar Depend√™ncias", "‚úÖ Todos os m√≥dulos necess√°rios est√£o instalados!")
    else:
        msg = "Algumas depend√™ncias est√£o faltando:\n\n" + "\n".join(erros)
        messagebox.showwarning("Depend√™ncias ausentes", msg)



























Reinaldo, agora sim vamos criar um verdadeiro **Painel de Diagn√≥stico Profissional** pro seu sistema ‚Äî com testes autom√°ticos de m√≥dulos, sugest√µes de instala√ß√£o via `pip`, e um bot√£o para exportar um log dos testes. Isso vai facilitar muito a manuten√ß√£o e vai te poupar dor de cabe√ßa no futuro üí°üß∞üì¶

---

## ‚úÖ O que esse painel vai fazer:

1. Testar se os principais pacotes est√£o instalados (`matplotlib`, `pandas`, `PIL`, etc.)
2. Exibir um painel de status visual (em cores)
3. Sugerir o comando `pip install` para os pacotes ausentes
4. Permitir exportar o log como `.txt` com o resultado dos testes

---

## üß† Como usar

Voc√™ pode colocar isso dentro da sua aba de configura√ß√£o (ex: `aba_config.py`) ou at√© numa aba separada chamada "Diagn√≥stico".

---

## üß± C√≥digo completo do painel

```python
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from datetime import datetime

def criar_painel_diagnostico(parent):
    frame_diag = ttk.LabelFrame(parent, text="Painel de Diagn√≥stico do Sistema")
    frame_diag.grid(row=99, column=0, padx=10, pady=10, sticky="nsew")

    text_output = tk.Text(frame_diag, width=80, height=15, state="disabled", bg="#f0f0f0")
    text_output.grid(row=1, column=0, padx=10, pady=5)

    def verificar_modulos():
        pacotes = {
            "matplotlib": "Visualiza√ß√£o de gr√°ficos",
            "pandas": "Manipula√ß√£o de dados",
            "PIL": "Imagens (via Pillow)",
            "tkcalendar": "Calend√°rio no Tkinter",
            "openpyxl": "Excel exporta√ß√£o",
            "sqlite3": "Banco de dados local",
            "tkinter": "Interface gr√°fica",
        }

        text_output.configure(state="normal")
        text_output.delete("1.0", tk.END)
        text_output.insert(tk.END, f"üîç Verificando depend√™ncias - {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n\n")

        ausentes = []

        for pacote in pacotes:
            try:
                if pacote == "PIL":
                    import PIL
                else:
                    __import__(pacote)
                text_output.insert(tk.END, f"‚úÖ {pacote} - OK ({pacotes[pacote]})\n")
            except ImportError:
                text_output.insert(tk.END, f"‚ùå {pacote} - AUSENTE! ({pacotes[pacote]})\n")
                ausentes.append(pacote)

        if not ausentes:
            text_output.insert(tk.END, "\n‚úÖ Todos os pacotes est√£o instalados!\n")
        else:
            text_output.insert(tk.END, "\n‚ö†Ô∏è Pacotes ausentes:\n")
            for pacote in ausentes:
                text_output.insert(tk.END, f"   üëâ pip install {pacote}\n")

        text_output.configure(state="disabled")

    def exportar_log():
        conteudo = text_output.get("1.0", tk.END)
        if not conteudo.strip():
            messagebox.showwarning("Exporta√ß√£o", "Nenhum conte√∫do para exportar.")
            return

        caminho = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Arquivo de Texto", "*.txt")])
        if caminho:
            with open(caminho, "w", encoding="utf-8") as arquivo:
                arquivo.write(conteudo)
            messagebox.showinfo("Exporta√ß√£o", f"Log exportado para:\n{caminho}")

    btn_testar = ttk.Button(frame_diag, text="üîÑ Testar Depend√™ncias", command=verificar_modulos)
    btn_testar.grid(row=0, column=0, pady=5, sticky="w")

    btn_exportar = ttk.Button(frame_diag, text="üíæ Exportar Log", command=exportar_log)
    btn_exportar.grid(row=0, column=0, pady=5, sticky="e")

    return frame_diag
```

---

### üí° Como adicionar ao projeto:

No final de `montar_aba_config()` ou em `montar_aba_diagnostico()`:

```python
criar_painel_diagnostico(inner_frame)
```

---

Se quiser, posso ainda:

‚úÖ Integrar esse painel com um atalho no menu  
‚úÖ Criar um ‚ÄúAutoCorrigir‚Äù que abre o terminal para instalar os pacotes (com cuidado)  
‚úÖ Exibir o ambiente Python ativo na tela

Quer que eu transforme esse painel em uma aba separada chamada "Diagn√≥stico do Sistema" com log, vers√£o do Python e sugest√µes em tempo real? üòÑüîßüìã Vamos deixar esse projeto afiado!













Perfeito, Reinaldo! Vamos levar esse painel de diagn√≥stico a um novo n√≠vel. Aqui est√° o que ele vai ter:

---

### ‚úÖ Funcionalidades do novo Painel de Diagn√≥stico

| Recurso                       | O que faz                                                                 |
|------------------------------|---------------------------------------------------------------------------|
| **Testar Depend√™ncias**      | Verifica se os pacotes essenciais est√£o instalados                        |
| **AutoCorrigir**             | Sugere e executa os comandos `pip install` diretamente do Python          |
| **Exportar Log**             | Salva os resultados da verifica√ß√£o em um `.txt`                           |
| **Atalho no Menu Superior**  | Adiciona uma op√ß√£o ‚ÄúDiagn√≥stico do Sistema‚Äù para abrir o painel rapidamente |

---

### üß† Como funciona o AutoCorrigir

Ele verifica quais pacotes est√£o ausentes e executa dinamicamente:

```python
subprocess.check_call([sys.executable, "-m", "pip", "install", pacote])
```

Com isso, voc√™ instala diretamente os pacotes que faltam sem sair da interface!

---

### üß± C√≥digo completo com integra√ß√£o de AutoCorrigir + Menu

```python
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from datetime import datetime
import sys
import subprocess

def criar_menu_diagnostico(janela_principal, notebook):
    menubar = tk.Menu(janela_principal)
    janela_principal.config(menu=menubar)

    menu_ferramentas = tk.Menu(menubar, tearoff=0)
    menubar.add_cascade(label="Ferramentas", menu=menu_ferramentas)

    def abrir_aba_diagnostico():
        aba_diag = ttk.Frame(notebook)
        notebook.add(aba_diag, text="Diagn√≥stico")
        montar_painel_diagnostico(aba_diag)
        notebook.select(aba_diag)

    menu_ferramentas.add_command(label="Diagn√≥stico do Sistema ü©∫", command=abrir_aba_diagnostico)

def montar_painel_diagnostico(parent):
    frame_diag = ttk.LabelFrame(parent, text="üîß Diagn√≥stico do Sistema")
    frame_diag.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")

    text_output = tk.Text(frame_diag, width=80, height=20, state="disabled", bg="#f0f0f0")
    text_output.grid(row=1, column=0, columnspan=3, padx=10, pady=5)

    pacotes = {
        "matplotlib": "Visualiza√ß√£o de gr√°ficos",
        "pandas": "Planilhas e tabelas",
        "PIL": "Manipula√ß√£o de imagens (Pillow)",
        "tkcalendar": "Calend√°rio em tkinter",
        "openpyxl": "Planilhas Excel",
        "sqlite3": "Banco de dados interno"
    }

    pacotes_faltando = []

    def testar():
        nonlocal pacotes_faltando
        pacotes_faltando = []

        text_output.configure(state="normal")
        text_output.delete("1.0", tk.END)
        text_output.insert(tk.END, f"Verifica√ß√£o - {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n\n")

        for nome in pacotes:
            try:
                if nome == "PIL":
                    import PIL
                else:
                    __import__(nome)
                text_output.insert(tk.END, f"‚úÖ {nome} - OK ({pacotes[nome]})\n")
            except ImportError:
                text_output.insert(tk.END, f"‚ùå {nome} - N√ÉO INSTALADO! ({pacotes[nome]})\n")
                pacotes_faltando.append(nome)

        if pacotes_faltando:
            text_output.insert(tk.END, "\nüì¶ Para instalar manualmente:\n")
            for nome in pacotes_faltando:
                text_output.insert(tk.END, f"   pip install {nome}\n")
        else:
            text_output.insert(tk.END, "\n‚úÖ Tudo pronto, sem pend√™ncias!\n")

        text_output.configure(state="disabled")

    def corrigir_automaticamente():
        if not pacotes_faltando:
            messagebox.showinfo("AutoCorrigir", "Tudo j√° est√° instalado!")
            return

        for nome in pacotes_faltando:
            try:
                subprocess.check_call([sys.executable, "-m", "pip", "install", nome])
                messagebox.showinfo("AutoCorrigir", f"{nome} instalado com sucesso.")
            except Exception as e:
                messagebox.showerror("Erro na instala√ß√£o", f"Falha ao instalar {nome}:\n{e}")

        testar()  # reexecutar ap√≥s instalar

    def exportar_log():
        log = text_output.get("1.0", tk.END)
        if not log.strip():
            messagebox.showwarning("Exporta√ß√£o", "Sem conte√∫do para exportar.")
            return
        caminho = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Arquivo de Texto", "*.txt")])
        if caminho:
            with open(caminho, "w", encoding="utf-8") as f:
                f.write(log)
            messagebox.showinfo("Exportado", f"Log salvo em:\n{caminho}")

    ttk.Button(frame_diag, text="üîç Testar", command=testar).grid(row=0, column=0, padx=10, pady=5)
    ttk.Button(frame_diag, text="üõ† AutoCorrigir", command=corrigir_automaticamente).grid(row=0, column=1, padx=10, pady=5)
    ttk.Button(frame_diag, text="üíæ Exportar Log", command=exportar_log).grid(row=0, column=2, padx=10, pady=5)
```

---

### üí° Como ativar no `main.py`

Adicione no final do seu `main.py`, ap√≥s construir a janela e o notebook:

```python
from aba_diagnostico import criar_menu_diagnostico  # se voc√™ salvar isso num novo arquivo

criar_menu_diagnostico(janela, notebook)
```

Ou, se estiver junto da `aba_config`, chame direto no final do `montar_aba_config()`.

---

Pronto, agora voc√™ tem um painel de diagn√≥stico de verdade!  
Quer que eu transforme isso numa aba com gr√°fico de status tamb√©m? üòÑüì¶üìà Podemos at√© mostrar a porcentagem de pacotes instalados com uma barra de progresso. S√≥ avisar que seguimos turbinando!



















import tkinter as tk
from tkinter import ttk, Entry, BooleanVar
from PIL import Image, ImageTk
import os
from tkcalendar import DateEntry
import sqlite3
import time
import dados_compartilhados as dc
#from aba_consulta import montar_aba_consulta
import pandas as pd
#import matplotlib.pyplot as plt
#from models import database, criar_app
from aba_diagnostico import criar_menu_diagnostico

#root = tk.Tk()

# #+++++++++++++++++++++++++++++++++++++++++++


import tkinter as tk
from tkinter import ttk
import dados_compartilhados as dc

# ü™ü Criando janela principal
janela = tk.Tk()
janela.title("Planilha Controle Ipojuc√£o")
janela.geometry("1024x700")
janela.rowconfigure(0, weight=1)
janela.columnconfigure(0, weight=1)

# üìí Criando o Notebook (abas)
notebook = ttk.Notebook(janela)
notebook.grid(row=0, column=0, sticky="nsew")

# üß† Inicializando vari√°veis globais (exemplo m√≠nimo)
dc.var_porte = tk.StringVar(value="pequeno")
dc.var_raca = tk.StringVar()

# üîß Menu Diagn√≥stico do Sistema
from aba_diagnostico import criar_menu_diagnostico
criar_menu_diagnostico(janela, notebook)

# üóÇ Importando e montando ABAS
from aba_config import montar_aba_config
aba_config = ttk.Frame(notebook)
notebook.add(aba_config, text="‚öôÔ∏è Configura√ß√£o")
montar_aba_config(aba_config)

from aba_cadastro import montar_aba_cadastro
aba_cadastro = ttk.Frame(notebook)
notebook.add(aba_cadastro, text="üê∂ Cadastro")
montar_aba_cadastro(aba_cadastro)

from aba_consulta import montar_aba_consulta
aba_consulta = ttk.Frame(notebook)
notebook.add(aba_consulta, text="üîç Consulta")
montar_aba_consulta(aba_consulta)

from aba_financeiro import montar_aba_financeiro
aba_financeiro = ttk.Frame(notebook)
notebook.add(aba_financeiro, text="üí∞ Financeiro")
montar_aba_financeiro(aba_financeiro)

from aba_relatorio import montar_aba_relatorio
aba_relatorio = ttk.Frame(notebook)
notebook.add(aba_relatorio, text="üìä Relat√≥rios")
montar_aba_relatorio(aba_relatorio)

# üü¢ Iniciando a aplica√ß√£o




# #++++++++++++++++++++++++++++++++++++++++++++

def montar_aba_main(aba):
    # Permitir expans√£o
    aba.grid_rowconfigure(0, weight=1)
    aba.grid_columnconfigure(0, weight=1)

    # Canvas + Scrollbar
    canvas = tk.Canvas(aba)
    scrollbar_y = ttk.Scrollbar(aba, orient="vertical", command=canvas.yview)
    canvas.configure(yscrollcommand=scrollbar_y.set)

    canvas.grid(row=0, column=0, sticky="nsew")
    scrollbar_y.grid(row=0, column=1, sticky="ns")

    # Frame rol√°vel
    inner_frame = ttk.Frame(canvas)
    canvas.create_window((0, 0), window=inner_frame, anchor="nw")

    def ajustar_scroll(event):
        canvas.configure(scrollregion=canvas.bbox("all"))
    inner_frame.bind("<Configure>", ajustar_scroll)

    # === A partir daqui, crie widgets dentro do inner_frame ===

    # Exemplo b√°sico
    frame_exemplo = ttk.LabelFrame(inner_frame, text="Se√ß√£o de Exemplo")
    frame_exemplo.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")

    ttk.Label(frame_exemplo, text="Alguma informa√ß√£o importante").grid(row=0, column=0, sticky="w")

    # Repita quantos blocos quiser (outros frames, grids, entradas, etc.)

    # Se quiser ativar algo quando o porte mudar
    dc.var_porte.trace_add("write", lambda *args: atualizar_exemplo())

def atualizar_exemplo():
    porte = dc.var_porte.get()
    print(f"Porte selecionado na aba √©: {porte}")
#
#



janela.mainloop()










def atualizar_imagem_porte(porte):
    nome_arquivo = dc.imagens_portes.get(porte, "")
    caminho = os.path.join(base_path, nome_arquivo)

    if os.path.exists(caminho):
        img = Image.open(caminho).resize((200, 200))
        img_tk = ImageTk.PhotoImage(img)

        # üîÑ Atribuir como imagem padr√£o antes de ra√ßa ser exibida
        dc.label_imagem.img_ref = img_tk  # mant√©m refer√™ncia gen√©rica
        dc.label_imagem.config(image=img_tk, text="")
    else:
        dc.label_imagem.config(image="", text="Imagem do porte n√£o encontrada")
        dc.label_imagem.img_ref = None























