TODOS OS CÓDIGOS USADOS E COMENTADOS EM 24-06-2025

import tkinter as tk
from tkinter import ttk, Entry, BooleanVar
from PIL import Image, ImageTk
import os
from tkcalendar import DateEntry
import sqlite3
import time


# Iniciando a janela
janela = tk.Tk()
janela.title("Cadastro Pet Shop")

# Criando as abas
aba_principal = ttk.Notebook(janela)


#aba_config = ttk.Frame(janela)
aba_config = ttk.Frame(aba_principal)
aba_principal.add(aba_config, text="Configuração")


aba_config.grid(padx=10, pady=10)  # Adicionando padding para melhor visualização
janela.geometry("1400x600")  # Ajuste o tamanho da janela conforme necessário
janela.state('zoomed')  # Abre em tela cheia

# Criando um Frame para a barra de rolagem
scrollable_frame = ttk.Frame(janela)
scrollable_frame.grid(row=0, column=0, sticky="nsew")

# Configuração da janela
janela.grid_rowconfigure(0, weight=1)
janela.grid_columnconfigure(0, weight=1)

scrollable_frame.grid_rowconfigure(0, weight=1)
scrollable_frame.grid_columnconfigure(0, weight=1)

# Criando o Canvas e as Scrollbars
canvas = tk.Canvas(scrollable_frame)
vertical_scrollbar = ttk.Scrollbar(scrollable_frame, orient="vertical", command=canvas.yview)
horizontal_scrollbar = ttk.Scrollbar(scrollable_frame, orient="horizontal", command=canvas.xview)

# Criando o Frame dentro do Canvas
inner_frame = ttk.Frame(canvas)

# Ajustando a rolagem
inner_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))

# Criando a janela dentro do Canvas
canvas.create_window((0, 0), window=inner_frame, anchor="nw")

# Posicionando o Canvas e as Scrollbars
canvas.grid(row=0, column=0, sticky="nsew")
vertical_scrollbar.grid(row=0, column=1, sticky="ns")
horizontal_scrollbar.grid(row=1, column=0, sticky="ew")

# Configurando as barras de rolagem
canvas.configure(yscrollcommand=vertical_scrollbar.set)
canvas.configure(xscrollcommand=horizontal_scrollbar.set)

# Garantindo que a rolagem funcione corretamente
def ajustar_tamanho_canvas(event):
    canvas.configure(scrollregion=canvas.bbox("all"))

inner_frame.bind("<Configure>", ajustar_tamanho_canvas)

# Adicione alguns widgets ao inner_frame como exemplo
for i in range(50):
    ttk.Label(inner_frame, text=f"Item {i}").grid(row=i, column=0, sticky="w")
# Configurar a largura da coluna do inner_frame para permitir a rolagem horizontal
inner_frame.grid_columnconfigure(0, minsize=300)  # Ajuste o tamanho conforme necessário

# Definindo o tamanho do Canvas
canvas.config(height=700)  # Aumente a altura do Canvas se necessário
canvas.config(width=800) # Aumente a largura do Canvas se necessário

# Criando as abas (Notebook)
notebook = ttk.Notebook(janela)
notebook.grid(row=0, column=0, sticky='nsew')  # Use grid corretamente

# Criando aba de configuração
aba_config = ttk.Frame(notebook)
notebook.add(aba_config, text="Configuração")

# Criando aba financeira

# Função para criar uma aba com barra de rolagem
# def criar_aba_com_rolagem(parent, aba_nome):
#     # Criando um Frame para a barra de rolagem
#     scrollable_frame = ttk.Frame(parent)
#     scrollable_frame.grid(row=0, column=0, sticky="nsew")

#(aba_config, "Financeiro")


# Criando aba de serviços
aba_servicos = ttk.Frame(notebook)
notebook.add(aba_servicos, text="Serviços")

# Criando aba de relatórios
aba_relatórios = ttk.Frame(notebook)
notebook.add(aba_relatórios, text="Relatórios")


# Criando aba Cadastro
# Função para criar uma aba com barra de rolagem
# # Função para criar uma aba com barra de rolagem
# def criar_aba_com_rolagem(parent, aba_nome):
#     # Criando o Canvas e as Scrollbars
#     canvas = tk.Canvas(parent)
#     vertical_scrollbar = ttk.Scrollbar(parent, orient="vertical", command=canvas.yview)
#     horizontal_scrollbar = ttk.Scrollbar(parent, orient="horizontal", command=canvas.xview)
#
#     # Criando o Frame dentro do Canvas
#     inner_frame = ttk.Frame(canvas)
#
#     # Ajustando a rolagem
#     inner_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
#
#     # Criando a janela dentro do Canvas
#     canvas.create_window((0, 0), window=inner_frame, anchor="nw")
#
#     # Posicionando o Canvas e as Scrollbars
#     canvas.grid(row=0, column=0, sticky="nsew")
#     vertical_scrollbar.grid(row=0, column=1, sticky="ns")
#     horizontal_scrollbar.grid(row=1, column=0, sticky="ew")
#
#     # Configurando as barras de rolagem
#     canvas.configure(yscrollcommand=vertical_scrollbar.set)
#     canvas.configure(xscrollcommand=horizontal_scrollbar.set)
#
#     # Adicione alguns widgets ao inner_frame como exemplo
#     for i in range(50):
#         ttk.Label(inner_frame, text=f"{aba_nome} Item {i}").grid(row=i, column=0, sticky="w")
#
#     # Configurar a largura da coluna do inner_frame para permitir a rolagem horizontal
#     inner_frame.grid_columnconfigure(0, minsize=300)  # Ajuste o tamanho conforme necessário
#
#     # Definindo o tamanho do Canvas
#     canvas.config(height=700)  # Aumente a altura do Canvas se necessário
#     canvas.config(width=800)   # Aumente a largura do Canvas se necessário
#
# # Criando as abas (Notebook)
# notebook = ttk.Notebook(janela)
# notebook.grid(row=0, column=0, sticky='nsew')  # Use grid corretamente
#
# # Criando as abas com rolagem
# aba_config = ttk.Frame(notebook)
# notebook.add(aba_config, text="Configuração")
# criar_aba_com_rolagem(aba_config, "Configuração")
#
# aba_financeiro = ttk.Frame(notebook)
# notebook.add(aba_financeiro, text="Financeiro")
# criar_aba_com_rolagem(aba_financeiro, "Financeiro")
#
# aba_servicos = ttk.Frame(notebook)
# notebook.add(aba_servicos, text="Serviços")
# criar_aba_com_rolagem(aba_servicos, "Serviços")
#
# aba_relatórios = ttk.Frame(notebook)
# notebook.add(aba_relatórios, text="Relatórios")
# criar_aba_com_rolagem(aba_relatórios, "Relatórios")


# def criar_aba_com_rolagem(aba):
#     aba.grid_rowconfigure(0, weight=1)
#     aba.grid_columnconfigure(0, weight=1)
#
#     # Criar canvas e barras de rolagem
#     canvas = tk.Canvas(aba)
#     scrollbar_y = ttk.Scrollbar(aba, orient="vertical", command=canvas.yview)
#     scrollbar_x = ttk.Scrollbar(aba, orient="horizontal", command=canvas.xview)
#
#     canvas.configure(yscrollcommand=scrollbar_y.set, xscrollcommand=scrollbar_x.set)
#
#     canvas.grid(row=0, column=0, sticky="nsew")
#     scrollbar_y.grid(row=0, column=1, sticky="ns")
#     scrollbar_x.grid(row=1, column=0, sticky="ew")
#
#     # Frame interno onde você coloca o conteúdo
#     frame_conteudo = ttk.Frame(canvas)
#     canvas.create_window((0, 0), window=frame_conteudo, anchor="nw")
#
#     # Atualizar a área rolável sempre que o conteúdo for alterado
#     def on_configure(event):
#         canvas.configure(scrollregion=canvas.bbox("all"))
#
#     frame_conteudo.bind("<Configure>", on_configure)
#
#     return frame_conteudo
#
# #
# aba_cadastro = ttk.Frame(notebook)
# notebook.add(aba_cadastro, text="Configuração")
# frame_cadastro = criar_aba_com_rolagem(aba_cadastro)
#
# # Agora você pode adicionar widgets no frame_config!
# ttk.Label(frame_cadastro, text="Olá, com rolagem!").grid(row=0, column=0)

aba_cadastro = ttk.Frame(notebook)
notebook.add(aba_cadastro, text="Cadastro")
#criar_aba_com_rolagem(aba_cadastro)


# Frame de configuração
# Variável global para armazenar o porte selecionado
var_porte = tk.StringVar(value="Pequeno")  # Valor padrão
frame_config = ttk.Frame(aba_config)
frame_config.grid(pady=10)


base_path = "C:/Users/VEIRANO/PycharmProjects/ModuloTkinter/Planilha Controle Ipojucão/imagensipojucao"

# Dicionário para armazenar imagens dos portes
imagens_portes = {
    "pequeno": "pequeno.jpg",
    "médio": "medio.jpg",
    "grande": "grande.jpg",
    "maior": "maior.jpg"
}

# Dicionário para armazenar imagens das raças
imagens_racas = {
    'Schitzu':'schitzu.jpg','Lhasa Apso':'lhasa_apso.jpg','Maltês':'maltes.jpg','Yorkshire':'yorkshire.jpg','Dachshund':'dachshund.jpg',
    'Cavalier King Charles Spaniel':'cavalier_king_charles_spaniel.jpg','Biewer Terrier':'biewer_terrier.jpg','Bulldog Francês':'bulldog_frances.jpg',
    'Pug':'pug.jpg','Chihuahua':'chihuahua.jpg','Cocker Spaniel':'cocker_spaniel.jpg','Papillon':'papillon.jpg','Spitz Alemao':'spitz_alemao.jpg',
    'Pinscher':'pinscher.jpg','Poodle':'poodle.jpg','Jack Russell Terrier':'jack_russell_terrier.jpg','Galgo Italiano':'galgo_italiano.jpg',
    'Pequinês':'pequines.jpg','Bichon Frise':'bichon_frise.jpg','Boston Terrier':'boston_terrier.jpg','Fox Paulistinha':'fox_paulistinha.jpg',
    'American Pit Bull Terrier':'american_pit_bull_terrier.jpg','Australian Cattle Dog':'australian_cattle.jpg','Australian Shepherd':'australian_shepherd.jpg',
    'Petit Basset Griffon Vendéen':'petit_basset_griffon_vendéen.jpg','Basset Hound':'basset_hound.jpg','Bulldog Campeiro':'bulldog_campeiro.jpg','Bulldog':'bulldog.jpg',
    'Bulldog Inglês':'bulldog_ingles.jpg','Bull Terrier':'bull_terrier.jpg','Basset Fulvo':'basset_fulvo.jpg','Boxer':'boxer.jpg',
    'Clumber Spaniel':'clumber_spaniel.jpg','Cocker Americano':'cocker_americano.jpg','Cocker Inglês':'cocker_ingles.jpg',
    'Flat Coated Retriever':'flat_coated_retriever.jpg','Pastor de Shetland':'pastor_de_shetland.jpg','Pumi':'pumi.jpg',
    'Schnauzer Standard':'schnauzer_standard.jpg','Shar Pei':'shar_pei.jpg','Spaniel Bretão':'spaniel_bretao.jpg','Spaniel Francês':'spaniel_frances.jpg',
    'Spitz Japonês':'spitz_japones.jpg','Springer Spaniel':'springer_spaniel.jpg','Springer Spaniel Inglês':'springer_spaniel_ingles.jpg',
    'Terrier Tibetano':'terrier_tibetano.jpg','American Bully':'american_bully.jpg','SRD Médio':'s_r_d_medio.jpg','Dogo Argentino':'dogo_argentino.jpg',
    'Dálmata':'dalmatian.jpg','Weimaraner':'weimaraner.jpg','Mastim Tibetano':'mastim_tibetano.jpg','Leonberger':'leonberger.jpg',
    'Pastor Australiano':'pastor_australiano.jpg','Setter Irlandês':'setter_irlandes.jpg','Bulmastife':'bulmastife.jpg','Mastim Napolitano':'mastim_napolitano.jpg',
    'Dogue de Bordeaux':'dogue_de_bordeaux.jpg','Cão de Santo Humberto':'cao_de_santo_humberto.jpg','Rhodesian Ridgeback':'rhodesian_ridgeback.jpg',
    'Boiadeiro da Flandres':'boiadeiro_da_flandres.jpg','Bearded Collie':'bearded_collie.jpg','Bichon Bolonhês':'bichon_bolonhes.jpg','Basenji':'basenji.jpg',
    'Boerboel':'boerboel.jpg','Pastor do Cáucaso':'pastor_do_caucaso.jpg','Veadeiro Pampeano':'veadeiro_pampeano.jpg','Buhund Norueguês':'buhund_noruegues.jpg',
    'Basset Artesiano Normando':'basset_artesiano_normando.jpg','Braco de Auvernia':'braco_de_auvernia.jpg','Galgo Inglês':'galgo_ingles.jpg',
    'Pastor Belga':'pastor_belga.jpg','Mastiff':'mastiff.jpg','Bernese':'bernese.jpg','Akita':'akita.jpg','Bloodhound':'bloodhound.jpg','Pit Bull':'pit_bull.jpg',
    'Fila Brasileiro':'fila_brasileiro.jpg','Chow Chow':'chow_chow.jpg','Doberman':'doberman.jpg','Chip Dog':'chip_dog.jpg',
}


# ADICIONANDO CARACTERÍSTICAS DO PET
# Dicionário de características das raças
caracteristicas_racas = {
    "Chihuahua": {
        "peso": "1 a 3 kg",
        "tamanho": "15 a 23 cm",
        "pelos": "Curto",
        "temperamento": "Dócil",
        "imagem": "chihuahua.png"  # Adicione o caminho para a imagem
    },
    "Labrador": {
        "peso": "25 a 36 kg",
        "tamanho": "55 a 62 cm",
        "pelos": "Curto e grosso",
        "temperamento": "Dócil",
        "imagem": "labrador.png"
    },
    "Bulldog": {
        "peso": "18 a 25 kg",
        "tamanho": "30 a 40 cm",
        "pelos": "Curto",
        "temperamento": "Agressivo",
        "imagem": "bulldog.png"
    }
    # Adicione mais raças conforme necessário
}

class App:
    def __init__(self, root):
        self.root = root
        self.root.title("Cadastro PET SHOP")

        # Criação do Notebook para as abas
        self.notebook = ttk.Notebook(self.root)
        self.notebook.grid(row=0, column=0, sticky='nsew')  # Usando grid para o Notebook

        # Criação da aba_config
        self.aba_config = ttk.Frame(self.notebook)
        self.notebook.add(self.aba_config, text='Configuração')

        # Combobox de Raça
        self.combobox_raca = ttk.Combobox(self.aba_config, values=list(caracteristicas_racas.keys()))
        self.combobox_raca.grid(row=0, column=0, padx=10, pady=10)
        self.combobox_raca.bind("<<ComboboxSelected>>", self.atualizar_caracteristicas)

        # Campo de texto para características
        self.texto_caracteristicas = tk.Text(self.aba_config, height=10, width=50)
        self.texto_caracteristicas.grid(row=1, column=0, padx=10, pady=10)  # Mudado para row=1, column=0

        # Configuração de expansão
        self.root.grid_rowconfigure(0, weight=1)
        self.root.grid_columnconfigure(0, weight=1)

    def atualizar_caracteristicas(self, event):
        raca_selecionada = self.combobox_raca.get()
        if raca_selecionada in caracteristicas_racas:
            info = caracteristicas_racas[raca_selecionada]
            self.texto_caracteristicas.delete(1.0, tk.END)  # Limpa o campo de texto
            self.texto_caracteristicas.insert(tk.END, f"Peso: {info['peso']}\n")
            self.texto_caracteristicas.insert(tk.END, f"Tamanho: {info['tamanho']}\n")
            self.texto_caracteristicas.insert(tk.END, f"Pelos: {info['pelos']}\n")
            self.texto_caracteristicas.insert(tk.END, f"Temperamento: {info['temperamento']}")



# ADICIONANDO CARACTERÍSTICAS DO PET




var_porte = tk.StringVar()
var_raca = tk.StringVar()

# Dados centralizados (raças e preços)
# dados_pet = {
#     "pequeno": {"raças": ['schitzu.jpg', 'lhasa_apso.jpg', 'maltes.jpg', 'yorkshire.jpg', 'dachshund.jpg', 'cavalier_king_charles_spaniel.jpg',
#                   'biewer_terrier.jpg', 'bulldog_frances.jpg', 'pug.jpg', 'chihuahua.jpg', 'cocker_spaniel.jpg', 'papillon.jpg',
#                   'spitz_alemao.jpg', 'pinscher.jpg', 'poodle.jpg', 'jack_russel_terrier.jpg', 'galgo_italiano.jpg', 'pequines.jpg',
#                   'bichon_frise.jpg', 'boston_terrier.jpg', 'fox_paulistinha.jpg']},
#     "médio": {"raças": ['american_bully.jpg', 'australian_cattle.jpg', 'australian_shepherd', 'basset_griffon.jpg', 'basset_hound.jpg',
#                   'bulldog_campeiro.jpg', 'bulldog', 'bulldog_ingles.jpg', 'bull_terrier.jpg', 'basset_fulvo.jpg',
#                   'boxer.jpg', 'clumber_spaniel.jpg', 'cocker_americano.jpg', 'cocker_ingles.jpg', 'flat_coated_retriever.jpg',
#                   'pastor_de_shetland.jpg', 'pumi.jpg', 'schnauzer_standard.jpg', 'shar_pei.jpg', 'spaniel_bretao.jpg', 'spaniel_frances.jpg',
#                   'spitz_japones.jpg', 'spriger_spaniel_ingles.jpg', 'terrier_tibetano.jpg', 'S.R.D.-Médio']},
#     "grande": {"raças": ['Pastor Alemao', 'Dogue Alemao', 'Terra Nova', 'Rottweiler', 'Sao-Bernardo', 'Labrador Retriever',
#                   'Golden Retriever', 'Fila brasileiro', 'Cane corso', 'Border collie', 'Boiadeiro de Berna',
#                   'Akita Inu', 'Mastim Ingles', 'Husky Siberiano', 'Dogo argentino', 'Dalmata', 'Weimaraner',
#                   'Bull terrier', 'Mastim tibetano', 'Leonberger', 'Pastor australiano', 'Setter irlandes',
#                   'Bulmastife', 'Mastim napolitano', 'Dogue de bordeus', 'Bulmastife', 'cao de Santo Humberto',
#                   'Rhodesian ridgeback', 'Boiadeiro da Flandres', 'Bearded collie', 'Bichon bolonhes', 'Basenji',
#                   'Boerboel', 'Pastor do caucaso', 'Veadeiro Pampeano', 'Buhund noruegues',
#                   'Basset artesiano normando', 'Braco de Auvernia', 'Galgo Ingles', 'Pastor Belga', 'Mastiff',
#                   'Bernese', 'Akita', 'Bloodhound']},
#     "maior": {"raças": ['Pit Bull', 'Fila Brasileiro', 'Chow-Chow', 'Doberman', 'Chip-dog', 'American Pit Bul terrier',
#                   'Chow-chow']}
# }


#combobox_porte.bind("<<ComboboxSelected>>", lambda event: [atualizar_lista_racas(event), update_porte_image(event)])


# Funções para atualizar imagens
def update_porte_image(event=None):
    porte = var_porte.get().strip().lower()
    image_path = os.path.join(base_path, imagens_portes.get(porte, ''))
    if os.path.exists(image_path):
        img = Image.open(image_path).resize((200, 200))
        img_tk = ImageTk.PhotoImage(img)
        label_imagem.config(image=img_tk)
        label_imagem.image = img_tk
    else:
        label_imagem.config(text="Imagem do porte não encontrada", image="")
        label_imagem.image = None


# Função para atualizar a lista de raças
def atualizar_lista_racas(event=None):
    porte = var_porte.get().strip().lower()
    print(f"Selecionado Porte: {porte}")  # Debug
    time.sleep(0.5)  # Pausa para garantir atualização

    #racas = dados_pet.get(porte, {}).get("raças", [])
    racas = list(dados_pet.get(porte.capitalize(), {}).get("raças", [])) # Capitalize para correspondência
    combobox_raca["values"] = racas
    combobox_raca.set("Selecione uma raça")
    update_porte_image(event)

    if racas:
        combobox_raca.set(racas[0])  # Define a primeira raça como padrão
        update_raca_image()  # Atualiza a imagem da raça assim que uma raça é definida
    else:
        combobox_raca.set("Nenhuma raça disponível")

# Função para atualizar a imagem da raça
def update_raca_image(event=None):
    #raca = combobox_raca.get().strip()
    raca = var_raca.get().strip()
    image_path = os.path.join(base_path, imagens_racas.get(raca, ''))
    print(f"Selecionado Raça: {raca}")  # Debug
    print(f"Imagem do porte em: {image_path}")  # Debug
    time.sleep(0.9)  # Pausa para garantir que a variável foi atualizada

    # Verifique se o nome do arquivo não está vazio
    if not imagens_racas.get(raca):
        print(f"Nome do arquivo não encontrado para a raça: {raca}")  # Debug
        time.sleep(0.9)  # Pausa para garantir que a variável foi atualizada
        label_imagem.config(text="Imagem da raça não encontrada", image="")
        time.sleep(0.5)  # Pausa para garantir que a variável foi atualizada
        label_imagem.image = None
        return

    print(f"Imagem do porte em: {image_path}")  # Debug

    if os.path.exists(image_path):
        img = Image.open(image_path).resize((200, 200))
        img_tk = ImageTk.PhotoImage(img)
        label_imagem.config(image=img_tk)
        label_imagem.image = img_tk
    else:
        label_imagem.config(text="Imagem da raça não encontrada", image="")
        label_imagem.image = None
        #     except Exception as e:
        #     print(f"Erro ao carregar imagem da raça: {e}")
        # else:
        label_imagem.config(text="Imagem não encontrada", image="")
        label_imagem.image = None

# Dados centralizados (raças e preços)
dados_pet = {
    "Pequeno": {
        "raças": ['Schitzu', 'Lhasa Apso', 'Maltes', 'Yorkshire', 'Dachshund', 'Cavalier King Charles Spaniel',
                  'Biewer Terrier', 'Bulldog Francês', 'Pug', 'Chihuahua', 'Cocker Spaniel', 'Papillon',
                  'Spitz Alemao', 'Pinscher', 'Poodle', 'Jack Russell Terrier', 'Galgo Italiano', 'Pequinês',
                  'Bichon Frise', 'Boston Terrier', 'Fox Paulistinha', 'Petit Basset Griffon Vendéen'],
        "preços": {"Banho": 55, "Hidratação": 20, "Desembolo": 20, "Remoção de Pelos": 20, "Corte de Unhas": 15,
                   "Escovação de Dentes": 15, "Tosa Higiênica": 20, "Tosa na Máquina": 115,
                   "Tosa na Tesoura": 125, "Leva e Trás": 10},
    },
    "Médio": {
        "raças": ['American Bully', 'Australian Cattle Dog', 'Basset Hound',
                  'Bulldog Campeiro', 'Bulldog', 'Bulldog Ingles', 'Bull Terrier', 'Basset Fulvo',
                  'Boxer', 'Clumber Spaniel', 'Cocker Americano', 'Cocker Ingles', 'Flat Coated Retriever',
                  'Pastor de Shetland', 'Pumi', 'Schnauzer Standard', 'Shar Pei', 'Spaniel Bretao', 'Spaniel Frances',
                  'Spitz Japones', 'Spriger Spaniel Ingles', 'Terrier Tibetano', 'S.R.D. Médio'],
        "preços": {"Banho": 65, "Hidratação": 20, "Desembolo": 20, "Remoção de Pelos": 20, "Corte de Unhas": 15,
                   "Escovação de Dentes": 15, "Tosa Higiênica": 20, "Tosa na Máquina": 115,
              "Tosa na Tesoura": 125, "Leva e Trás": 10},
    },
    "Grande": {
        "raças": ['Pastor Alemao', 'Dogue Alemao', 'Terra Nova', 'Rottweiler', 'Sao-Bernardo', 'Labrador Retriever',
                  'Golden Retriever', 'Fila brasileiro', 'Cane corso', 'Border collie', 'Boiadeiro de Berna',
                  'Akita Inu', 'Mastim Ingles', 'Husky Siberiano', 'Dogo argentino', 'Dalmata', 'Weimaraner',
                  'Bull terrier', 'Mastim tibetano', 'Leonberger', 'Pastor australiano', 'Setter irlandes',
                  'Bulmastife', 'Mastim napolitano', 'Dogue de bordeus', 'Bulmastife', 'cao de Santo Humberto',
                  'Rhodesian ridgeback', 'Boiadeiro da Flandres', 'Bearded collie', 'Bichon bolonhes', 'Basenji',
                  'Boerboel', 'Pastor do caucaso', 'Veadeiro Pampeano', 'Buhund noruegues',
                  'Basset artesiano normando', 'Braco de Auvernia', 'Galgo Ingles', 'Pastor Belga', 'Mastiff',
                  'Bernese', 'Akita', 'Bloodhound', 'Australian Shepherd'],
        "preços": {"Banho": 70, "Hidratação": 20, "Desembolo": 20, "Remoção de Pelos": 20, "Corte de Unhas": 15,
                   "Escovação de Dentes": 15, "Tosa Higiênica": 20, "Tosa na Máquina": 115,
                "Tosa na Tesoura": 125, "Leva e Trás": 10},
    },
    "Maior": {
        "raças": ['American Pit Bull Terrier', 'Fila Brasileiro', 'Chow Chow', 'Doberman', 'Chip-dog', 'American Pit Bul terrier',
                  'Chow-chow'],
        "preços": {"Banho": 120, "Hidratação": 20, "Desembolo": 20, "Remoção de Pelos": 80, "Corte de Unhas": 50,
               "Escovação de Dentes": 55, "Tosa Higiênica": 75, "Tosa na Máquina": 85,
               "Tosa na Tesoura": 100, "Leva e Trás": 10},
    },
}

# Criando Combobox para seleção de porte
ttk.Label(aba_config, text="Selecione o Porte:").grid(row=0, column=0, padx=10, pady=5)
combobox_porte = ttk.Combobox(aba_config, textvariable=var_porte, values=list(dados_pet.keys()), state="readonly")
combobox_porte.grid(row=1, column=0, padx=10, pady=5)
combobox_porte.bind("<<ComboboxSelected>>", lambda event: [atualizar_lista_racas(event), update_porte_image(event)])



# Criando Combobox para seleção de raça
ttk.Label(aba_config, text="Selecione a Raça:").grid(row=0, column=1, padx=10, pady=5, sticky="w")
combobox_raca = ttk.Combobox(aba_config, textvariable=var_raca, state="readonly")
combobox_raca.grid(row=1, column=1, padx=10, pady=5, sticky="ew")
combobox_raca.bind("<<ComboboxSelected>>", update_raca_image)


# Configurando a coluna para expandir
aba_config.grid_columnconfigure(0, weight=1)

combobox_raca.bind("<<ComboboxSelected>>", update_raca_image)



# Criando Label para exibir imagens
label_imagem = tk.Label(aba_config, text="Nenhuma imagem disponível", width=180, height=180)
label_imagem.grid(row=2, column=0, columnspan=4, padx=10, pady=10)


# Adicionando `trace_add` para ativar automaticamente a atualização da imagem e das raças
var_porte.trace_add("write", lambda *args: atualizar_lista_racas(event=None))
var_porte.trace_add("write", lambda *args: update_porte_image(event=None))


# Criando o frame principal para dados cadastrais
frame_cadastro = ttk.LabelFrame(inner_frame, text="Dados Cadastrais")
frame_cadastro.grid(row=7, column=0, padx=10, pady=10, sticky="nsew")


# Criando o frame principal para Serviços
frame_servicos = ttk.LabelFrame(inner_frame, text="Serviços")
frame_servicos.grid(row=5, column=0, padx=10, pady=10, sticky="nsew")


# Criando o frame principal para informações financeiras

# Criando o frame principal para Relatórios
frame_relatorios = ttk.LabelFrame(inner_frame, text="Informações Financeiras")
frame_relatorios.grid(row=8, column=4, padx=10, pady=10, sticky="nsew")


# ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO
#     AQUI ESTÃO AS VARIÁVES QUE IRÃO SALVAR TODAS AS INFORMAÇÕES INSERIDAS EM TODAS AS GUIAS,
#     PARA CADA INFORMAÇÃO INSERIDA NAS DIVERSAS GUIAS, PRECISA INCLUIR UMA tk.StringVar() PARA SALVAR NO BANCO DE DADOS
#     StringVar PARA SALVAR RADIOBUTTONS, tk.BooleanVar() PARA SALVAR CHECKBUTTONS E DateEntry PARA SALVAR DATAS.
#     ATENÇÃO, NÃO ESQUECER DE INSERIR ESSES COMANDOS PARA CADA NOVA INFORMAÇÃO INCREMENTADA NO CÓDIGO.

# Criando variáveis para entrada de dados

var_nome_pet = tk.StringVar()
var_idade_anos = tk.StringVar()
var_idade_meses = tk.StringVar()
var_descricao = tk.StringVar()  # Para os Radiobuttons
var_tipopelo = tk.StringVar()
var_check_servico1 = tk.BooleanVar() # Para os Checkbutons
var_check_servico2 = tk.BooleanVar()


# **Função única para salvar todos os dados, incluindo as datas**
def salvar_todos_dados():
    # Capturar os valores inseridos
    nome_pet = var_nome_pet.get()
    idade_anos = var_idade_anos.get()
    idade_meses = var_idade_meses.get()
    descricao_pelagem = var_descricao.get()
    servico_banho = var_check_servico1.get()
    servico_tosa = var_check_servico2.get()
    data_selecionada = data_cadastro.get_date().strftime("%Y-%m-%d")  # Formato padrão para banco

    # Conectar ao banco de dados
    conn = sqlite3.connect("petshop.db")
    cursor = conn.cursor()

    # Criar tabela se não existir
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS cadastro_pet (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT,
            idade_anos TEXT,
            idade_meses TEXT,
            descricao_pelagem TEXT,
            servico_banho BOOLEAN,
            servico_tosa BOOLEAN,
            data_cadastro DATE
        )
    ''')

    # Inserir dados
    cursor.execute("INSERT INTO cadastro_pet (nome, idade_anos, idade_meses, descricao_pelagem, servico_banho, servico_tosa, data_cadastro) VALUES (?, ?, ?, ?, ?, ?, ?)",
                   (nome_pet, idade_anos, idade_meses, descricao_pelagem, servico_banho, servico_tosa, data_selecionada))

    conn.commit()
    conn.close()

    print(f"Todos os dados foram salvos com sucesso! Data: {data_selecionada}")

# Criando botão central para salvar todas as informações
btn_salvar_tudo = ttk.Button(janela, text="Salvar Tudo", command=salvar_todos_dados)
btn_salvar_tudo.grid(row=1, column=0, pady=20)


notebook.add(aba_cadastro, text="Cadastro")


# No início do seu código
var_desconto_fixo = tk.BooleanVar()
var_desconto_percentual = tk.BooleanVar()
var_status_pagamento = tk.StringVar(value="")
var_pagamento = tk.StringVar(value="")
var_condicao_pagamento = tk.StringVar(value="")
var_data_pagamento = tk.StringVar(value="")
var_calendario_cadastro = tk.StringVar(value="")
var_atualizar_pagamento = tk.StringVar(value="")
var_calendario_financeiro = tk.StringVar(value="")
# ... e outras variáveis que você deseja tornar globais.



# Função para ativar/desativar métodos de pagamento
def atualizar_pagamento():
    global var_pagamento  # Declare a variável como global
    if var_status_pagamento.get() == "pago":
        # Ativar botões de pagamento
        radiobutton_pix.config(state="normal")
        radiobutton_debito.config(state="normal")
        radiobutton_credito.config(state="normal")
        radiobutton_dinheiro.config(state="normal")
    else:
        # Resetar e desabilitar botões de pagamento
        var_pagamento.set("")
        radiobutton_pix.config(state="disabled")
        radiobutton_debito.config(state="disabled")
        radiobutton_credito.config(state="disabled")
        radiobutton_dinheiro.config(state="disabled")



# Frame para seleção de porte e raça
frame_cabecalho = ttk.LabelFrame(inner_frame, text="Seleção de Porte e Raça")
frame_cabecalho.grid(row=1, column=0, padx=10, pady=10, sticky="nw")

# 🚀🚀🚀🚀🚀 COMBOBOX_PORTE ANTERIOR A CRIAÇÃO DE ABAS



# Criando um Frame para serviços
frame_disponiveis = ttk.LabelFrame(frame_servicos, text="Serviços Disponíveis")
frame_disponiveis.grid(row=10, column=1, padx=10, pady=5, sticky="nw")

scrollable_frame.rowconfigure(1, weight=1)  # Para o row 1 (serviços)

# Frame para Data do Serviço
frame_calendario_servico = ttk.LabelFrame(frame_servicos, text="Data do Serviço")
frame_calendario_servico.grid(row=11, column=0, padx=10, pady=10, sticky="w")
calendario_servico = DateEntry(frame_servicos, year=2025, locale='pt_br')
calendario_servico.grid(row=12, column=0 , padx=10, pady=10, sticky='nsew')


# Criando Checkbuttons para serviços
variaveis_servicos = {}
servicos_disponiveis = ["Banho", "Hidratação", "Desembolo", "Remoção de Pelos", "Corte de Unhas",
                        "Escovação de Dentes", "Tosa Higiênica", "Tosa na Máquina", "Tosa na Tesoura", "Leva e Trás"]

for i, servico in enumerate(servicos_disponiveis):
    variaveis_servicos[servico] = tk.BooleanVar()
    check_servico = ttk.Checkbutton(frame_servicos, text=servico, variable=variaveis_servicos[servico])
    check_servico.grid(row=i, column=0, sticky="w")


scrollable_frame.rowconfigure(2, weight=1)  # Para o row 2 (abatimentos)

# Variáveis para abatimentos
# var_desconto_fixo = tk.BooleanVar()
# var_desconto_percentual = tk.BooleanVar()


# base_path = "C:/Users/VEIRANO/PycharmProjects/ModuloTkinter/Planilha Controle Ipojucão/imagensipojucao"



# frame_imagem = ttk.LabelFrame(inner_frame, text="imagem")
# frame_imagem.grid(row=2, column=3, padx=10, pady=10, sticky="w")
# Função para atualizar a imagem
# Função para atualizar a imagem do PET
# def update_pet_image(pet_name):
#     image_path = os.path.join(base_path, f"{pet_name.lower()}.jpg").replace("\\", "/")
#
#     try:
#         if os.path.exists(image_path):
#             img = Image.open(image_path).resize((200, 200))
#             img_tk = ImageTk.PhotoImage(img)
#
#             label_imagem.config(image=img_tk, text="")
#             label_imagem.image = img_tk
#         else:
#             label_imagem.config(text="Imagem não encontrada", image="")
#             label_imagem.image = None
#
#     except Exception as e:
#         label_imagem.config(text="Erro ao carregar imagem", image="")
#         label_imagem.image = None
#
#
# # Função para selecionar a imagem do PET
# def select_image():
#     file_path = filedialog.askopenfilename(
#         title="Selecione a imagem do PET",
#         filetypes=[("Imagens", "*.jpg;*.jpg;*.jpg;*.gif")]
#     )
#
#     if file_path:
#         # Atualiza a imagem do PET no diretório especificado
#         pet_name = combobox_pet.get().lower()
#         new_image_path = os.path.join(base_path, f"{pet_name}.jpg")
#
#         # Copia a imagem para o local desejado
#         with open(file_path, 'rb') as fsrc, open(new_image_path, 'wb') as fdst:
#             fdst.write(fsrc.read())
#
#         # Atualiza a exibição da imagem
#         update_pet_image(pet_name)
#
# # Definindo o caminho base onde as imagens dos PETs estão armazenadas
# base_path = "C:\Users\VEIRANO\PycharmProjects\ModuloTkinter\Planilha Controle Ipojucão\pet_cadastrado"  # Substitua pelo caminho correto
#
# # Criação do ComboBox para selecionar o PET
# combobox_pet = ttk.Combobox(janela, values=["pet1", "pet2", "pet3"])  # Substitua pelos nomes reais dos PETs
# combobox_pet.entry()
# combobox_pet.bind("<<ComboboxSelected>>", lambda event: update_pet_image(combobox_pet.get()))
#
# # Label para exibir a imagem
# label_imagem = tk.Label(janela)
# label_imagem.entry()
#
# # Botão para selecionar a imagem do PET
# button_select_image = tk.Button(janela, text="Selecionar Imagem do PET", command=select_image)
# button_select_image.entry()
#
# # Label para selecionar raça (opcional)
# combobox_raca = ttk.Combobox(janela, values=["raça1", "raça2"])  # Adicione as raças reais
# combobox_raca.entry()
# combobox_raca.bind("<<ComboboxSelected>>", update_raca_image)
#
#
#
# # Adiciona o botão para selecionar imagem
# button_select_image = tk.Button(janela, text="Selecionar Imagem do PET", command=select_image)
# button_select_image.entry()


# Função para atualizar a imagem da raça
# def update_raca_image(event=None):
#     raca = combobox_raca.get().strip()
#
#     if not raca:  # Se nenhuma raça foi selecionada, não exibe imagem
#         label_imagem.config(image="", text="Nenhuma imagem disponível")
#         label_imagem.image = None
#         return
#
#     # Caminho da imagem
#     image_path = os.path.join(base_path, imagens_racas.get(raca, '')).replace("\\", "/")
#
#     try:
#         if os.path.exists(image_path):
#             img = Image.open(image_path).resize((200, 200))
#             img_tk = ImageTk.PhotoImage(img)
#
#             # Atualizar a referência da imagem no widget
#             label_imagem.config(image=img_tk, text="")
#             label_imagem.image = img_tk
#         else:
#             label_imagem.config(text="Imagem não encontrada", image="")
#             label_imagem.image = None
#
#     except Exception as e:
#         label_imagem.config(text="Erro ao carregar imagem", image="")
#         label_imagem.image = None


#Calendário Cadastrar Item
def cadastrar_item():
    data = calendario_cadastro.get_date()
    print(f"Data cadastrada  {data}")  # Substitua por lógica de salvar o item
    label_resultado.config(text=f"Data cadastrada  {data}")

# Configuração para expandir corretamente
#aba_cadastro.columnconfigure(0, weight=1)

# Frame para Data do Cadastro
frame_calendario_cadastro = ttk.LabelFrame(aba_cadastro, text="Calendario Cadastro")
frame_calendario_cadastro.grid(row=0, column=0, padx=10, pady=10, sticky="w")
calendario_cadastro = DateEntry(frame_calendario_cadastro, year=2025, locale='pt_br')
calendario_cadastro.grid(row=0, column=0 , padx=10, pady=10, sticky='nsew')

# Criando um Frame para Dados Cadastrais
# frame_cadastramento = ttk.LabelFrame(aba_cadastro, text="Dados dos Cadastrais")
# frame_cadastramento.grid(row=2, column=0, columnspan=2, padx=5, pady=5, sticky="nsew")

def criar_frame_cadastro(parent, text="Dados Cadastrais"):
    frame_cadastro = ttk.LabelFrame(parent, )
    frame_cadastro.grid(row=1, column=0, padx=10, pady=10, sticky="nsew")

    frame_cadastro = ttk.Label(aba_cadastro, "Dados Cadastrais").grid(row=0, column=0, padx=5, pady=5, sticky="nsew")

    # nome Pet
    ttk.Label(aba_cadastro, text="Nome do Pet", anchor='w').grid(row=1, column=0, padx=10, pady=5, sticky='ew')
    entry_nome = tk.Entry(frame_cadastramento)
    entry_nome.grid(row=0, column=1, padx=10, pady=10, sticky='ew')

    # idade
    ttk.Label(aba_cadastro, text="Idade Anos").grid(row=2, column=0, padx=10, pady=10, sticky='w')
    entry_idadedopetanos = ttk.Entry(aba_cadastro)
    entry_idadedopetanos.grid(row=2, column=1, padx=10, pady=10, sticky='nsew')

    ttk.Label(aba_cadastro, text="Meses").grid(row=3, column=0, padx=10, pady=5, sticky='w')
    entry_idadedopetmeses = ttk.Entry(aba_cadastro)
    entry_idadedopetmeses.grid(row=2, column=1, padx=10, pady=5, sticky='ew')

    # Tutor 1
    ttk.LabelFrame(aba_cadastro, text="Tutor 1").grid(row=4, column=0, padx=10, pady=10, sticky='w')
    entry_tutor_1 = tk.Entry(aba_cadastro)
    entry_tutor_1.grid(row=0, column=1, padx=10, pady=5, sticky='ew')

    # telefone1
    ttk.Label(aba_cadastro, text="Telefone Tutor 1", anchor='e').grid(row=5, column=0, padx=10, pady=5, sticky='w')
    entry_telefone_1 = tk.Entry(aba_cadastro)
    entry_telefone_1.grid(row=1, column=1, padx=10, pady=5, sticky='ew')
    # email Tutor1
    ttk.Label(aba_cadastro, text="email Tutor 1", anchor='e').grid(row=2, column=0, padx=10, pady=10, sticky='w')
    entry_email_tutor_1 = tk.Entry(aba_cadastro)
    entry_email_tutor_1.grid(row=2, column=1, padx=10, pady=10, sticky='ew')

    #tutor 2
    # ttk.Label(aba_cadastro, text="Tutor 2", anchor='e').grid(row=3, column=0, padx=10, pady=5, sticky='ew')
    # # Campo de entrada (Entry)
    # entry_tutor_2 = tk.Entry(aba_cadastro)
    # entry_tutor_2.grid(row=7, column=1, padx=10, pady=10, sticky='ew')

    # Tutor 2
    frame_tutor2 = ttk.LabelFrame(aba_cadastro, text="Tutor 2")
    frame_tutor2.grid(row=3, column=0, padx=10, pady=10, sticky="ew")

    ttk.Label(frame_tutor2, text="Nome do Tutor").grid(row=0, column=0, padx=10, pady=5, sticky='w')
    entry_tutor_2 = tk.Entry(frame_tutor2)
    entry_tutor_2.grid(row=0, column=1, padx=10, pady=5, sticky='ew')

    #telefone 2
    ttk.Label(frame_tutor2, text="Telefone Tutor 2", anchor='e').grid(row=1, column=1, padx=10, pady=5, sticky='ew')
    # Campo de entrada (Entry)
    entry_telefone_2 = tk.Entry(aba_cadastro)
    entry_telefone_2.grid(row=1, column=0, padx=10, pady=5, sticky='ew')
    frame_telefone_2a = ttk.LabelFrame(aba_cadastro, text="Telefone_a", borderwidth=1, relief='solid')
    entry_telefone_2a = tk.Entry(aba_cadastro)
    entry_telefone_2a.grid(row=1, column=1, padx=10, pady=10, sticky='ew')

    #email Tutor2
    frame_email_tutor_2 = ttk.LabelFrame(aba_cadastro, text="email Tutor 2", anchor='w')
    frame_email_tutor_2.grid(row=2, column=0, padx=10, pady=5, sticky='ew')
    entry_email_tutor_2 = tk.Entry(aba_cadastro)
    entry_email_tutor_2.grid(row=10, column=0, padx=10, pady=10, sticky='nsew')

    # Criando um Frame para Endereço e Observações
    ttk.Label(aba_cadastro, text="Endereço e Observações").grid(row=0, column=1, columnspan=2, padx=10, pady=5, sticky="nsew")
    #logradouro.config(height=170)  # Define a altura manualmente

    #frame_logradouro.grid_propagate(False)  # Impede que os widgets internos alterem o tamanho do frame


    #Endereço Logradouro
    ttk.Label(aba_cadastro, text="Endereço").grid(row=1, column=1, padx=10, pady=10, sticky='nsew')
    # Campo de entrada (Entry)
    entry_enderecopet = tk.Entry(aba_cadastro)
    entry_enderecopet.grid(row=2, column=1, padx=10, pady=10, sticky='nsew', columnspan=2)
    #entry_nome.grid(row=1, column=0, columnspan=4, pady=1, sticky='nsew')

    #endereço Número
    frame_endereconumero = ttk.Label(aba_cadastro, text="Número", anchor='e')
    frame_endereconumero.grid(row=3, column=1, padx=10, pady=10, sticky='nsew')
    # Campo de entrada (Entry)
    entry_endereconumero = tk.Entry(aba_cadastro)
    entry_endereconumero.grid(row=3, column=2, padx=10, pady=10, sticky='nsew')

    #Endereço Complemento
    frame_enderecocomplemento = ttk.Label(aba_cadastro, text="Complemento", anchor='e')
    frame_enderecocomplemento.grid(row=4, column=1, padx=10, pady=10, sticky='nsew')
    # Campo de entrada (Entry)
    entry_enderecocomplemento = tk.Entry(aba_cadastro)
    entry_enderecocomplemento.grid(row=4, column=2, padx=10, pady=10, sticky='nsew')



    # frame_recomendacoes = ttk.Label(aba_cadastro, text="Recomendações", borderwidth=1, relief='solid')
    # frame_recomendacoes.grid(row=20, column=0, columnspan=2, padx=10, pady=5, sticky="w")
    #
    # # Observações sobre o PET
    # frame_recomendacoes = ttk.Label(aba_cadastro, text="Recomendações Sobre o pet", borderwidth=1, relief='solid' )
    # frame_recomendacoes.grid(row=21, column=0, columnspan=2, padx=10, pady=10, sticky='nsew')
    # Campo de entrada (Entry)
    campo_observacoes = tk.Text(aba_cadastro, width=80, height=12, borderwidth=2, relief='solid' )
    campo_observacoes.grid(row=30, column=0, columnspan=2, padx=10, pady=10)

    # Configuração para expandir corretamente
    janela.columnconfigure(0, weight=1)
    janela.rowconfigure(0, weight=1)
    aba_cadastro.columnconfigure(1, weight=1)
#=

# entry_recomendacoes = tk.Entry(frame_recomendacoes)
# entry_recomendacoes.grid(row=0, column=3, padx=10, pady=10, sticky='nsew', columnspan=3)

# #Criando um Frame para Endereço e Observações
# frame_recomendacoes = ttk.LabelFrame(inner_frame, text="Recomendações Sobre o PET")
# frame_cadastro.grid(row=2, column=5, columnspan=6, padx=10, pady=5, sticky="nsew")
# label_relatorio = tk.Label(frame_relatorio, text="Recomendações", borderwidth=1, relief='solid' )
# #Campo para exibir o relatório
# campo_observacoes = tk.Text(frame_cadastro, width=50, height=10, borderwidth=2, relief='solid' )
# campo_observacoes.grid(row=4, column=0, columnspan=4, padx=10, pady=10)

#RELATÓRIOS:

# Definindo variáveis globais
combobox_item = None
combobox_item1 = None
combobox_item2 = None
calendario_inicial = None
calendario_final = None


item= {
    "Relatórios": {
        "Serviços": ['Banho', 'Hidratação', 'Desembolo', 'Remoção Pelos', 'Corte Unhas', 'Escovação Dentes', 'Tosa Higiênica', 'Tosa Máquina', 'Tosa Tesoura', 'Leva Trás']}}
                  #

item1= {
    "Relatórios": {
        "Cadastro": ['Cadastrado Desde', 'Nome Pet', 'Idade', 'Tutor 1', 'Tutor 2', 'Telefone Tutor 1', 'email Tutor 1',
                  'Telefone Tutor 2', 'email Tutor 2', 'Endereço', 'Número', 'Complemento', 'Recomendações']}}

item2= {
    "Relatórios": {
        "Pagamentos": ['Condições Pagamento', 'Abatimentos', 'Status Pagamento', 'Data Pagamento', 'Forma Pagamento']}}






# Frame para combobox item
frame_data_pagamento = ttk.LabelFrame(inner_frame, text="Data do Pagamento")
frame_data_pagamento.grid(row=9, column=1, padx=10, pady=10, sticky="w")

#combobox_item = ttk.LabelFrame(inner_frame, text="Item para Relatório")
combobox_item = ttk.Combobox(frame_relatorios, values=item["Relatórios"]["Serviços"])
combobox_item.grid(row=10, column=1, padx=10, pady=10, sticky="nsew")
combobox_item.bind("<<ComboboxSelected>>", lambda event: [atualizar_item(event)])  # Atualiza raças e imagem ao selecionar porte])  # Atualiza raças e imagem ao selecionar porte


#combobox_item1 = ttk.LabelFrame(inner_frame, text="Item para Relatório")
combobox_item1 = ttk.Combobox(frame_relatorios, values=item1["Relatórios"]["Cadastro"])
combobox_item1.grid(row=11, column=2, padx=10, pady=10, sticky="nsew")
combobox_item1.bind("<<ComboboxSelected>>", lambda event: [atualizar_item1(event),])  # Atualiza raças e imagem ao selecionar porte])  # Atualiza raças e imagem ao selecionar porte


#combobox_item = ttk.LabelFrame(inner_frame, text="Item para Relatório")
combobox_item2 = ttk.Combobox(frame_relatorios, values=item2["Relatórios"]["Pagamentos"])
combobox_item2.grid(row=12, column=3, padx=10, pady=10, sticky="nsew")
combobox_item2.bind("<<ComboboxSelected>>", lambda event: [atualizar_item2(event)])  # Atualiza raças e imagem ao selecionar porte])  # Atualiza raças e imagem ao selecionar porte
# combobox_porte = ttk.Combobox(inner_frame, values=list(dados_pet.keys()))
# combobox_porte.grid(row=0, column=0, padx=10, pady=5)
#combobox_porte.bind("<<ComboboxSelected>>", atualizar_lista_racas)  # Atualiza raças ao selecionar porte


#scrollable_frame.rowconfigure(0, weight=1)  # Para o row 0 (combobox)


# combobox_item = ttk.LabelFrame(inner_frame, text="Calendario Cadastro")
# combobox_item = ttk.Combobox(inner_frame, values=list(dados_pet.keys()))
# combobox_item.grid(row=3, column=2, padx=10, pady=10, sticky="nsew")
# scrollable_frame.rowconfigure(0, weight=1)  # Para o row 0 (combobox)



# Função única para gerar relatórios
def gerar_relatorio(event=None):
    global calendario_inicial, calendario_final


    # Captura das datas e do item selecionado
    date_inicial = calendario_inicial.get_date()
    data_final = calendario_final.get_date()
    item_selecionado = None # Definido à seguir

    # Verifica qual combobox está sendo utilizado
    if combobox_item.get():
        item_selecionado = combobox_item.get()
        relatorio_texto = f"Relatório do item {item_selecionado}\nOcorrências simuladas: {item['Relatórios']['Serviços']}"
    elif combobox_item1.get():
        item_selecionado = combobox_item1.get()
        relatorio_texto = f"Relatório do item {item_selecionado}\nOcorrências simuladas: {item1['Relatórios']['Cadastro']}"
    elif combobox_item2.get():
        item_selecionado = combobox_item2.get()
        relatorio_texto = f"Relatório do item {item_selecionado}\nOcorrências simuladas:{item2['Relatórios']['Pagamentos']}"
    else:
        relatotio_texto = "Por favor, selecione um item para pesquisa!"

        # Exibir o relatório no campo de texto
    campo_relatorio.delete('1.0', 'end')
    campo_relatorio.insert('1.0', relatorio_texto)

# Configuraçao dos Calendário
#
#
#
#
#
#
#
#
#     combobox_item = ttk.Combobox(scrollable_frame, values=list(dados_pet.keys()))
#     combobox_item.grid(row=1, column=2, padx=10, pady=5)
#     #combobox_porte.bind("<<ComboboxSelected>>", atualizar_lista_racas)  # Atualiza raças ao selecionar porte
#     combobox_item.bind("<<ComboboxSelected>>", lambda event: [atualizar_lista_racas(event), update_porte_image(event)])  # Atualiza raças e imagem ao selecionar porte
#     scrollable_frame.rowconfigure(0, weight=1)  # Para o row 0 (combobox)
#
def gerar_relatorio():
    # Capturar as datas e o item selecionado
    global calendario_inicial, calendario_final, combobox_item

    data_inicial = calendario_inicial.get_date()
    data_final = calendario_final.get_date()
    item_selecionado = combobox_item.get()


    # Verificar se o item foi selecionado e as datas estão corretas
    if not item_selecionado:
        relatorio_texto = "Por favor, selecione um item para a pesquisa!\n"
    elif not data_inicial or not data_final:
        relatorio_texto = "Por favor, selecione a datas inicial e final!\n"
    else:
        # Criar o texto do relatório
        relatorio_texto = f"Relatório do item  {item_selecionado}\n"
        relatorio_texto += f"Data inicial  {data_inicial}\n"
        relatorio_texto += f"Data final  {data_final}\n"
        relatorio_texto += f"Ocorrências simuladas: ['Banho', 'Hidratação', 'Desembolo', 'Remoção Pelos', 'Corte Unhas', 'Escovação Dentes', 'Tosa Higiênica', 'Tosa Máquina', 'Tosa Tesoura', 'Leva Trás']"

def gerar_relatorio():
    # Capturar as datas e o item selecionado
    global calendario_inicial, calendario_final, combobox_item1

    data_inicial = calendario_inicial.get_date()
    data_final = calendario_final.get_date()
    item_selecionado = combobox_item1.get()


    # Verificar se o item foi selecionado e as datas estão corretas
    if not item_selecionado:
        relatorio_texto = "Por favor, selecione um item para a pesquisa!\n"
    elif not data_inicial or not data_final:
        relatorio_texto = "Por favor, selecione a datas inicial e final!\n"
    else:
        # Criar o texto do relatório
        relatorio_texto = f"Relatório do item  {item_selecionado}\n"
        relatorio_texto += f"Data inicial  {data_inicial}\n"
        relatorio_texto += f"Data final  {data_final}\n"
        relatorio_texto += f"Ocorrências simuladas: ['Cadastrado Desde', 'Nome Pet', 'Idade', 'Tutor 1', 'Tutor 2', 'Telefone Tutor 1', 'email Tutor 1',                 'Telefone Tutor 2', 'email Tutor 2', 'Endereço', 'Número', 'Complemento', 'Recomendações']"



def gerar_relatorio():
    # Capturar as datas e o item selecionado
    global calendario_inicial, calendario_final, combobox_item2

    data_inicial = calendario_inicial.get_date()
    data_final = calendario_final.get_date()
    item_selecionado = combobox_item2.get()


    # Verificar se o item foi selecionado e as datas estão corretas
    if not item_selecionado:
        relatorio_texto = "Por favor, selecione um item para a pesquisa!\n"
    elif not data_inicial or not data_final:
        relatorio_texto = "Por favor, selecione a datas inicial e final!\n"
    else:
        # Criar o texto do relatório
        relatorio_texto = f"Relatório do item  {item_selecionado}\n"
        relatorio_texto += f"Data inicial  {data_inicial}\n"
        relatorio_texto += f"Data final  {data_final}\n"
        relatorio_texto += f"Ocorrências simuladas: ['Condições Pagamento', 'Abatimentos', 'Status Pagamento', 'Data Pagamento', 'Forma Pagamento']"



def update_porte_item1(event=None):
    global combobox_item1
    porte = combobox_item1.get().strip()

def gerar_relatorio():
    # Capturar as datas e o item selecionado
    global calendario_inicial, calendario_final, combobox_item

    data_inicial = calendario_inicial.get_date()
    data_final = calendario_final.get_date()
    item_selecionado = combobox_item.get()


    # Verificar se o item foi selecionado e as datas estão corretas
    if not item_selecionado:
        relatorio_texto = "Por favor, selecione um item para a pesquisa!\n"
    elif not data_inicial or not data_final:
        relatorio_texto = "Por favor, selecione a datas inicial e final!\n"
    else:
        # Criar o texto do relatório
        relatorio_texto = f"Relatório do item  {item_selecionado}\n"
        relatorio_texto += f"Data inicial  {data_inicial}\n"
        relatorio_texto += f"Data final  {data_final}\n"
        relatorio_texto += f"Ocorrências simuladas: ['Porte', 'Raça', 'Serviço', 'Condições Pagamento', 'Abatimentos', 'Status Pagamento', 'Data Pagamento', 'Forma Pagamento', 'Cadastrado Desde', 'Nome Pet', 'Idade', 'Tutor 1', 'Tutor 2', 'Telefone 1', 'Telefone 2', 'Endereço', 'Poodle', 'Recomendações', 'Em Aberto-Total', 'Pago-Total', 'Em Aberto-Individual', 'Pago-Individual']"

        # Exibir o relatório no campo de texto
    campo_relatorio.delete('1.0', 'end')
    campo_relatorio.insert('1.0', relatorio_texto)

# Configuração de Calendários
frame_calendario_inicial = ttk.LabelFrame(frame_relatorios, text="Data Inicial-Relatório")
frame_calendario_inicial.grid(row=2, column=3, padx=10, pady=10, sticky="w")
date_inicial = DateEntry(frame_relatorios, year=2025, locale='pt_br')
date_inicial.grid(row=3, column=3 , padx=10, pady=10, sticky='nsew')

frame_calendario_final = ttk.LabelFrame(inner_frame, text="Data Final-Relatório")
frame_calendario_final.grid(row=2, column=4, padx=10, pady=10, sticky="w")
date_final = DateEntry(frame_relatorios, year=2025, locale='pt_br')
date_final.grid(row=3, column=5 , padx=10, pady=10, sticky='nsew')

def limpar_relatorio():
    campo_relatorio.delete('1.0', 'end')

#Botão para limpar o relatório exibido
botao_limpar = ttk.Button(inner_frame, text="Limpar Relatório", command=limpar_relatorio)
botao_limpar.grid(row=5, column=4, pady=6)


# Criando um Frame para Relatório
frame_relatorio = ttk.LabelFrame(inner_frame, text="Relatórios-(Cadastro, Serviços, Controle Pagamentos)")
frame_relatorio.grid(row=3, column=5, columnspan=2, padx=10, pady=5, sticky="w")
label_relatorio = tk.Label(frame_relatorio, text="Recomendações", borderwidth=1, relief='solid' )

# Campo para exibir o relatório
campo_relatorio = tk.Text(frame_relatorio, width=50, height=5, borderwidth=2, relief='solid')
campo_relatorio.grid(row=4, column=5, columnspan=2, padx=10, pady=10)



# Botão para gerar relatório
botao_gerar = ttk.Button(inner_frame, text="Gerar Relatório", command=gerar_relatorio)
botao_gerar.grid(row=3, column=4, pady=6)
#
# Botão para limpar o relatório exibido
botao_limpar = ttk.Button(inner_frame, text="Limpar Relatório", command=limpar_relatorio)
botao_limpar.grid(row=6, column=4, pady=6)

botao_fechar = tk.Button(text='Fechar', command=janela.quit, borderwidth=2, relief='solid')
botao_fechar.grid(row=3, column=6, padx=6, pady=10, sticky='nsew', columnspan=4)


# FINANCEIRO FINANCEIRO FINANCEIRO




# Variáveis globais
# variaveis_servicos = {}
# dados_pet = {}  # Preencha conforme necessário
# combobox_porte = None  # Certifique-se de que isso é inicializado em outro lugar

# # Variáveis de configuração para descontos
# var_desconto_fixo = tk.BooleanVar()
# var_desconto_percentual = tk.BooleanVar()
# entry_desconto_fixo = None
# entry_desconto_percentual = None
# label_resultado = None
#
#
# # Funções para calcular preços
# def atualizar_precos():
#     porte_selecionado = combobox_porte.get().strip()
#     total = 0
#     precos_selecionados = []
#
#     if porte_selecionado not in dados_pet:
#         label_resultado.config(text="Erro: Nenhum porte válido foi selecionado!")
#         return
#
#     for servico, var in variaveis_servicos.items():
#         if var.get():
#             preco = dados_pet[porte_selecionado]["preços"].get(servico, 0)
#             total += preco
#             precos_selecionados.append(f"{servico}: R$ {preco:.2f}")
#
#     label_resultado.config(text="\n".join(precos_selecionados) + f"\nTotal: R$ {total:.2f}")
#     return total
#
#
# def calcular_desconto(valor_total):
#     desconto_fixo = float(entry_desconto_fixo.get()) if var_desconto_fixo.get() else 0
#     desconto_percentual = float(entry_desconto_percentual.get()) if var_desconto_percentual.get() else 0
#     valor_com_desconto = valor_total - desconto_fixo
#     valor_com_desconto -= (valor_com_desconto * (desconto_percentual / 100))
#     return valor_com_desconto
#
#
# def calcular_total():
#     valor_total = atualizar_precos()  # Obter o valor total
#     if valor_total is None:
#         return
#     valor_final = calcular_desconto(valor_total)
#     label_resultado.config(text=f"Total com desconto: R$ {valor_final:.2f}")
#
#
# def limpar_selecoes():
#     for var in variaveis_servicos.values():
#         var.set(False)  # Desmarca todos os Checkbuttons
#     entry_desconto_fixo.delete(0, tk.END)  # Limpa o campo de desconto fixo
#     entry_desconto_percentual.delete(0, tk.END)  # Limpa o campo de desconto percentual
#     label_resultado.config(text="Total com desconto: R$ 0.00")  # Reseta o resultado
#
#
# def criar_frame_financeiro(parent):  # O parâmetro 'parent' deve ser o notebook
#     global entry_desconto_fixo, entry_desconto_percentual, label_resultado
#
#     frame_financeiro = ttk.LabelFrame(parent, text="Informações Financeiras")  # 'parent' deve ser o notebook
#     frame_financeiro.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
#
#     # Criando o frame que contém as condições de pagamento
#     frame_condicoes_pagamento = ttk.LabelFrame(frame_financeiro, text="Condições de Pagamento")
#     frame_condicoes_pagamento.pack(fill="both", padx=5, pady=5)
#
#     # Criando o Frame para abatimentos
#     frame_abatimentos = ttk.LabelFrame(frame_financeiro, text="Abatimentos")
#     frame_abatimentos.pack(fill="both", padx=10, pady=10)
#
#     var_desconto_fixo = tk.BooleanVar()
#     var_desconto_percentual = tk.BooleanVar()
#
#     check_fixo = ttk.Checkbutton(frame_abatimentos, text="Desconto Fixo (R$)", variable=var_desconto_fixo)
#     check_fixo.grid(row=0, column=0, sticky="w")
#
#     entry_desconto_fixo = ttk.Entry(frame_abatimentos)
#     entry_desconto_fixo.grid(row=0, column=1, padx=10, pady=5, sticky="w")
#
#     check_percentual = ttk.Checkbutton(frame_abatimentos, text="Desconto Percentual (%)", variable=var_desconto_percentual)
#     check_percentual.grid(row=1, column=0, sticky="w")
#
#     entry_desconto_percentual = ttk.Entry(frame_abatimentos)
#     entry_desconto_percentual.grid(row=1, column=1, padx=10, pady=5, sticky="w")
#
#     # Botões para calcular total e limpar seleções
#     botao_calcular = ttk.Button(frame_abatimentos, text="Calcular Total", command=calcular_total)
#     botao_calcular.grid(row=2, column=0, pady=10)
#
#     botao_limpar = ttk.Button(frame_abatimentos, text="Limpar Seleções", command=limpar_selecoes)
#     botao_limpar.grid(row=2, column=1, padx=10)
#
#     # Label para exibir o resultado do cálculo
#     label_resultado = ttk.Label(frame_abatimentos, text="Total com desconto: R$")
#     label_resultado.grid(row=3, column=0, columnspan=2, padx=10, pady=5)
#
#     return frame_financeiro
#
#
# # Inicialização da janela principal e do notebook
# if __name__ == "__main__":
#     root = tk.Tk()
#     root.title("Aplicativo Financeiro")
#
#     # Criação do Notebook para as abas
#     notebook = ttk.Notebook(root)
#     notebook.pack(padx=10, pady=10, expand=True, fill="both")
#
#     # Cria a aba financeira dentro do notebook
#     aba_financeiro = criar_frame_financeiro(notebook)
#     notebook.add(aba_financeiro, text="Financeiro")
#
#     # Exemplo de uma aba adicional
#     aba_outro = ttk.Frame(notebook)  # Exemplo de outra aba
#     notebook.add(aba_outro, text="Outro")
#
#







# Variáveis globais
# variaveis_servicos = {}
# dados_pet = {}  # Preencha conforme necessário
# combobox_porte = None  # Certifique-se de que isso é inicializado em outro lugar
#
# # Variáveis de configuração para descontos
# var_desconto_fixo = tk.BooleanVar()
# var_desconto_percentual = tk.BooleanVar()
# entry_desconto_fixo = None
# entry_desconto_percentual = None
# label_resultado = None
#
#
# # Função para calcular e atualizar os preços dos serviços
# def atualizar_precos(event=None):
#     porte_selecionado = combobox_porte.get().strip()
#     total = 0
#     precos_selecionados = []
#
#     if porte_selecionado not in dados_pet:
#         label_resultado.config(text="Erro: Nenhum porte válido foi selecionado!")
#         return
#
#     for servico, var in variaveis_servicos.items():
#         if var.get():
#             preco = dados_pet[porte_selecionado]["preços"].get(servico, 0)
#             total += preco
#             precos_selecionados.append(f"{servico}: R$ {preco:.2f}")
#
#     label_resultado.config(text="\n".join(precos_selecionados) + f"\nTotal: R$ {total:.2f}")
#     return total
#
#
# # Função para calcular abatimentos
# def calcular_desconto(valor_total):
#     desconto_fixo = float(entry_desconto_fixo.get()) if var_desconto_fixo.get() else 0
#     desconto_percentual = float(entry_desconto_percentual.get()) if var_desconto_percentual.get() else 0
#     valor_com_desconto = valor_total - desconto_fixo
#     valor_com_desconto -= (valor_com_desconto * (desconto_percentual / 100))
#     return valor_com_desconto
#
#
# # Função para calcular total
# def calcular_total():
#     valor_total = atualizar_precos()  # Obter o valor total dos serviços
#     if valor_total is None:  # Se ocorrer erro no cálculo
#         return
#     valor_final = calcular_desconto(valor_total)
#     label_resultado.config(text=f"Total com desconto: R$ {valor_final:.2f}")
#
#
# # Função para limpar seleções
# def limpar_selecoes():
#     for var in variaveis_servicos.values():
#         var.set(False)  # Desmarca todos os Checkbuttons
#     entry_desconto_fixo.delete(0, tk.END)  # Limpa o campo de desconto fixo
#     entry_desconto_percentual.delete(0, tk.END)  # Limpa o campo de desconto percentual
#     label_resultado.config(text="Total com desconto: R$ 0.00")  # Reseta o resultado
#
#
# # Função para criar a aba financeira
# def criar_frame_financeiro(parent, text="Financeiro"):
#     global entry_desconto_fixo, entry_desconto_percentual, label_resultado
#
#     frame_financeiro = ttk.LabelFrame(parent, text="Informações Financeiras")
#     frame_financeiro.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
#
#     frame_condicoes_pagamento = ttk.LabelFrame(frame_financeiro, text="Condições de Pagamento")
#     frame_condicoes_pagamento.grid(row=0, column=0, padx=5, pady=5, sticky="nsew")
#
#     # Criando o Frame para abatimentos
#     frame_abatimentos = ttk.LabelFrame(frame_financeiro, text="Abatimentos")
#     frame_abatimentos.grid(row=2, column=0, padx=10, pady=10, sticky="nw")
#
#     # Checkbuttons para aplicar abatimentos
#     check_fixo = ttk.Checkbutton(frame_abatimentos, text="Desconto Fixo (R$)", variable=var_desconto_fixo)
#     check_fixo.grid(row=0, column=0, sticky="w")
#
#     entry_desconto_fixo = ttk.Entry(frame_abatimentos)  # Inicializa a entrada para desconto fixo
#     entry_desconto_fixo.grid(row=0, column=1, padx=10, pady=5, sticky="w")
#
#     check_percentual = ttk.Checkbutton(frame_abatimentos, text="Desconto Percentual (%)",
#                                        variable=var_desconto_percentual)
#     check_percentual.grid(row=1, column=0, sticky="w")
#
#     entry_desconto_percentual = ttk.Entry(frame_abatimentos)  # Inicializa a entrada para desconto percentual
#     entry_desconto_percentual.grid(row=1, column=1, padx=10, pady=5, sticky="w")
#
#     # Botão para calcular total
#     botao_calcular = ttk.Button(frame_abatimentos, text="Calcular Total", command=calcular_total)
#     botao_calcular.grid(row=2, column=0, pady=10)
#
#     # Botão para limpar seleções
#     botao_limpar = ttk.Button(frame_abatimentos, text="Limpar Seleções", command=limpar_selecoes)
#     botao_limpar.grid(row=2, column=1, padx=10)
#
#     # Label para exibir o resultado do cálculo
#     label_resultado = ttk.Label(frame_abatimentos, text="Total com desconto: R$")
#     label_resultado.grid(row=3, column=0, columnspan=2, padx=10, pady=5)

#return frame_financeiro


# Inicialização da janela
# if __name__ == "__main__":
#     root = tk.Tk()  # Inicializa a janela principal
#     aba_financeiro = criar_frame_financeiro(root)  # Cria a aba financeira no tkinter


# Inicialização das variáveis globais
# variaveis_servicos = {}
# dados_pet = {}  # Preencha conforme necessário
# combobox_porte = None  # Certifique-se de que isso é inicializado em outro lugar
#
#     # Função para calcular e atualizar os preços dos serviços
# def atualizar_precos(event=None):
#     porte_selecionado = combobox_porte.get().strip()
#     total = 0
#     precos_selecionados = []
#
#     if porte_selecionado not in dados_pet:
#         label_resultado.config(text="Erro: Nenhum porte válido foi selecionado!")
#         return
#
#     for servico, var in variaveis_servicos.items():
#         if var.get():
#             preco = dados_pet[porte_selecionado]["preços"].get(servico, 0)
#             total += preco
#             precos_selecionados.append(f"{servico}: R$ {preco:.2f}")
#
#         label_resultado.config(text="\n".join(precos_selecionados) + f"\nTotal: R$ {total:.2f}")
#         return total
#
#     # Função para calcular abatimentos
# def calcular_desconto(valor_total):
#     desconto_fixo = float(entry_desconto_fixo.get()) if var_desconto_fixo.get() else 0
#     desconto_percentual = float(entry_desconto_percentual.get()) if var_desconto_percentual.get() else 0
#     valor_com_desconto = valor_total - desconto_fixo
#     valor_com_desconto -= (valor_com_desconto * (desconto_percentual / 100))
#     return valor_com_desconto
#
#     # Função para calcular total
# def calcular_total():
#     valor_total = atualizar_precos()  # Obter o valor total dos serviços
#     if valor_total is None:  # Se ocorrer erro no cálculo
#         return
#     valor_final = calcular_desconto(valor_total)
#     label_resultado.config(text=f"Total com desconto: R$ {valor_final:.2f}")
#
# # Função para limpar seleções
# def limpar_selecoes():
#     for var in variaveis_servicos.values():
#         var.set(False)  # Desmarca todos os Checkbuttons
#         entry_desconto_fixo.delete(0, tk.END)  # Limpa o campo de desconto fixo
#         entry_desconto_percentual.delete(0, tk.END)  # Limpa o campo de desconto percentual
#         label_resultado.config(text="Total com desconto: R$ 0.00")  # Reseta o resultado
#
#
#
#
#
#
#
#
#
#
#
# def criar_frame_financeiro(parent):
#     frame_financeiro = ttk.LabelFrame(aba_financeiro, text="Informações Financeiras")
#     frame_financeiro.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
#
#     frame_condicoes_pagamento = ttk.LabelFrame(frame_financeiro, text="Condições de Pagamento")
#     frame_condicoes_pagamento.grid(row=0, column=0, padx=5, pady=5, sticky="nsew")
#
#
#     # Criando o Frame para abatimentos
# frame_abatimentos = ttk.LabelFrame(frame_financeiro, text="Abatimentos")
# frame_abatimentos.grid(row=2, column=0, padx=10, pady=10, sticky="nw")
#
#
#     # Checkbuttons para aplicar abatimentos
# global var_desconto_fixo, var_desconto_percentual, entry_desconto_fixo, entry_desconto_percentual, label_resultado
#
# var_desconto_fixo = tk.BooleanVar()
# var_desconto_percentual = tk.BooleanVar()
#
# check_fixo = ttk.Checkbutton(frame_abatimentos, text="Desconto Fixo (R$)", variable=var_desconto_fixo)
# check_fixo.grid(row=0, column=0, sticky="w")
#
# entry_desconto_fixo = ttk.Entry(frame_abatimentos)
# entry_desconto_fixo.grid(row=0, column=1, padx=10, pady=5, sticky="w")
#
# check_percentual = ttk.Checkbutton(frame_abatimentos, text="Desconto Percentual (%)",
#                                        variable=var_desconto_percentual)
# check_percentual.grid(row=1, column=0, sticky="w")
#
# entry_desconto_percentual = ttk.Entry(frame_abatimentos)
# entry_desconto_percentual.grid(row=1, column=1, padx=10, pady=5, sticky="w")
#
# #Botão para calcular total
# botao_calcular = ttk.Button(frame_abatimentos, text="Calcular Total", command=calcular_total)
# botao_calcular.grid(row=2, column=0, pady=10)
#
#     # Botão para limpar seleções
# botao_limpar = ttk.Button(frame_abatimentos, text="Limpar Seleções", command=limpar_selecoes)
# botao_limpar.grid(row=2, column=1, padx=10)
#
#     # Label para exibir o resultado do cálculo
# label_resultado = ttk.Label(frame_abatimentos, text="Total com desconto: R$")
# label_resultado.grid(row=3, column=0, columnspan=2, padx=10, pady=5)
#
#
#
#
#
#
#
#     # Criando o Frame Principal
# scrollable_frame = ttk.Frame(inner_frame, padding=10)
# scrollable_frame.grid(row=1, column=0, padx=10, pady=10, sticky="nsew")
#
#
#
# #🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀
#
# # VERIFICAR VERIFICAR VERIFICAR VERIFICAR
# #  NÃO DEFINIDO, NÃO DEFINIDO, NÃO DEFINITO
#
# #🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀
#
#
#
# #🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀
#
# # VERIFICAR VERIFICAR VERIFICAR VERIFICAR
# #  NÃO DEFINIDO, NÃO DEFINIDO, NÃO DEFINITO
#
# #🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀
#
#
#     # Variável para definir se o pagamento foi feito ou está em aberto
# var_status_pagamento = tk.StringVar(value="Nenhuma Opção Marcada")
# # = tk.StringVar(value="")  # COMANDO ADICIONADO PARA REPOSICIONAR CAMPOS RADIOBUTTON E IMAGEM COMBOBOX_PORTE
# var_pagamento = tk.StringVar(value="")  # Correção aqui
#
#     #Frame para os métodos de pagamento
# frame_pagamento = ttk.LabelFrame(inner_frame, text="Forma de Pagamento")
# frame_pagamento.grid(row=5, column=0, columnspan=2, padx=10, pady=10, sticky="nw")
#
# scrollable_frame.rowconfigure(3, weight=1)  # Para o row 3 (pagamento)
#
#     # Botões para definir o status do pagamento
# ttk.Label(inner_frame, text="Status Pagamento:").grid(row=4, column=0, padx=10, pady=5, sticky="w")
# botao_pago = tk.Radiobutton(inner_frame, text="Pago", variable=var_status_pagamento, value="pago")
# botao_pago.grid(row=5, column=1, sticky="w")
#
#     # Variável para definir o status de pagamento
# var_status_pagamento = tk.StringVar(value="")  # Inicia vazio
#
# frame_status_pagamento = ttk.LabelFrame(frame_financeiro, text="Status Pagamento")
# frame_status_pagamento.config(height=10)  # Define a altura manualmente
# frame_status_pagamento.grid(row=1, column=1, padx=10, pady=10, sticky="w")
# frame_status_pagamento.grid_propagate(False)  # Impede que os widgets internos alterem o tamanho do frame
# #
# # criação frame aberto_pago
# frame_aberto_pago = ttk.LabelFrame(frame_financeiro, text="Status Pagamento")
# frame_aberto_pago.grid(row=3, column=0, padx=10, pady=5, sticky="w")
# #
# #     # Botões para definir o status do pagamento
# ttk.Label(frame_aberto_pago, text="Status Pagamento:").grid(row=3, column=0, padx=10, pady=5, sticky="w")
# botao_em_aberto = tk.Radiobutton(frame_aberto_pago, text="Em Aberto", variable=var_status_pagamento,
#                                      value="em_aberto", command=atualizar_pagamento)
# botao_em_aberto.grid(row=3, column=1, sticky="w")
# botao_pago = tk.Radiobutton(frame_aberto_pago, text="Pago", variable=var_status_pagamento, value="pago",
#                                 command=atualizar_pagamento)
# botao_pago.grid(row=4, column=1, sticky="w")
#
#     # Variável para armazenar a forma de pagamento
#     # var_pagamento = tk.StringVar(value="")  # Inicia vazio
#
#     # Frame para Data do Pagamento
# frame_data_pagamento = ttk.LabelFrame(frame_financeiro, text="Data do Pagamento")
# frame_data_pagamento.grid(row=3, column=1, padx=10, pady=10, sticky="w")
# calendario_data_pagamento = DateEntry(frame_data_pagamento, year=2025, locale='pt_br')
# calendario_data_pagamento.grid(row=2, column=1, padx=10, pady=10, sticky='nsew')
#
# #     # Frame para os métodos de pagamento
# frame_pagamento = ttk.LabelFrame(frame_financeiro, text="Forma de Pagamento")
# frame_pagamento.grid(row=4, column=0, padx=10, pady=10, sticky="nsew")
#
#
#
# #🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀
#
# # VERIFICAR VERIFICAR VERIFICAR VERIFICAR
# #  NÃO DEFINIDO, NÃO DEFINIDO, NÃO DEFINITO
#
# #🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀
#
#
# label_data_do_pagamento = tk.Label(frame_pagamento, text="Data do Pagamento")
# label_data_do_pagamento.grid(row=14, column=0 , padx=10,pady=10, sticky='nsew')
# #Instanciação correta do DateEntry
#
#     # Botões de forma de pagamento (inicialmente desabilitados)
# radiobutton_pix = tk.Radiobutton(frame_pagamento, text="PIX", variable=var_pagamento, value="PIX", state="disabled")
# radiobutton_pix.grid(row=0, column=0, sticky="w")
#
# radiobutton_debito = tk.Radiobutton(frame_pagamento, text="Cartão de Débito", variable=var_pagamento,
#                                         value="Débito", state="disabled")
# radiobutton_debito.grid(row=1, column=0, sticky="w")
# radiobutton_credito = tk.Radiobutton(frame_pagamento, text="Cartão de Crédito", variable=var_pagamento,
#                                          value="Crédito", state="disabled")
# radiobutton_credito.grid(row=2, column=0, sticky="w")
#
# radiobutton_dinheiro = tk.Radiobutton(frame_pagamento, text="Em Espécie (Dinheiro)", variable=var_pagamento,
#                                           value="Dinheiro", state="disabled")
# radiobutton_dinheiro.grid(row=3, column=0, sticky="w")
#
# scrollable_frame.rowconfigure(4, weight=1)  # Para o row 4 (status de pagamento)
#
# #Frame para condições de pagamento
# frame_classificacao_cliente = ttk.LabelFrame(frame_financeiro, text="Condições de Pagamento")
# frame_classificacao_cliente.grid(row=1, column=0, padx=10, pady=10, sticky="w")
#     #                                (row=1, column=0, columnspan=2, padx=10, pady=5, sticky="nw")
#     # Variável para armazenar a condição de pagamento
# var_condicao_pagamento = tk.StringVar(value="")
#
#     # Labels e Radiobuttons para condições de pagamento
# ttk.Label(frame_classificacao_cliente, text="Tipo:").grid(row=1, column=1, padx=10, pady=5, sticky="w")
#
# radiobutton_pago_individual = tk.Radiobutton(frame_classificacao_cliente, text="Individual(Na Data)",
#                                                  variable=var_condicao_pagamento, value="pago_individual")
# radiobutton_pago_individual.grid(row=0, column=0, sticky="w")
#
# radiobutton_pacote_quinzenal = tk.Radiobutton(frame_classificacao_cliente, text="Pacote Quinzenal",
#                                                   variable=var_condicao_pagamento, value="pacote_quinzenal")
# radiobutton_pacote_quinzenal.grid(row=1, column=0, sticky="w")
#
# radiobutton_pacote_mensal = tk.Radiobutton(frame_classificacao_cliente, text="Pacote Mensal",
#                                                variable=var_condicao_pagamento, value="pacote_mensal")
# radiobutton_pacote_mensal.grid(row=2, column=0, sticky="w")
#
# #🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀
#
# # VERIFICAR VERIFICAR VERIFICAR VERIFICAR
# #  NÃO DEFINIDO, NÃO DEFINIDO, NÃO DEFINITO
#
# #🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀🚀
#
#
# #    Variável para armazenar a forma de pagamento
# var_pagamento = tk.StringVar(value="")  # Inicia vazio
#
# #    Frame para os métodos de pagamento
# frame_pagamento = ttk.LabelFrame(inner_frame, text="Forma de Pagamento")
# frame_pagamento.grid(row=5, column=0, columnspan=3, padx=10, pady=10, sticky="nsew")
# scrollable_frame.rowconfigure(4, weight=1)  # Para o row 4 (status de pagamento)
#

# FINANCEIRO FINANCEIRO FINANCEIRO

# Declarações globais
# frame_financeiro = None
#
#
#
# def criar_frame_financeiro(parent):
#     global frame_financeiro
#     frame_financeiro = ttk.LabelFrame(parent, text="Informações Financeiras")
#     frame_financeiro.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
#
#     # Chame a função que cria o frame de abatimentos
# criar_abatimentos(frame_financeiro)
#
# frame_condicoes_pagamento = ttk.LabelFrame(frame_financeiro, text="Condições de Pagamento")
# frame_condicoes_pagamento.grid(row=0, column=0, padx=5, pady=5, sticky="nsew")
#
#
# def atualizar_precos(event=None):
#     porte_selecionado = combobox_porte.get().strip()
#     total = 0
#     precos_selecionados = []
#
#     if porte_selecionado not in dados_pet:
#         label_resultado.config(text="Erro: Nenhum porte válido foi selecionado!")
#         return
#
#     for servico, var in variaveis_servicos.items():
#         if var.get():
#             preco = dados_pet[porte_selecionado]["preços"].get(servico, 0)
#             total += preco
#             precos_selecionados.append(f"{servico}: R$ {preco:.2f}")
#
#             label_resultado.config(text="\n".join(precos_selecionados) + f"\nTotal: R$ {total:.2f}")
#             return total
#
#
#
#     # Função para calcular e atualizar os preços dos serviços
#
#     # Função para calcular abatimentos
# def calcular_desconto(valor_total):
#     desconto_fixo = float(entry_desconto_fixo.get()) if var_desconto_fixo.get() else 0
#     desconto_percentual = float(entry_desconto_percentual.get()) if var_desconto_percentual.get() else 0
#     valor_com_desconto = valor_total - desconto_fixo
#     valor_com_desconto -= (valor_com_desconto * (desconto_percentual / 100))
#     return valor_com_desconto
#
# # Função para calcular total
# def calcular_total():
#     valor_total = atualizar_precos()  # Obter o valor total dos serviços
#     if valor_total is None:  # Se ocorrer erro no cálculo
#         return
#         valor_final = calcular_desconto(valor_total)
#         label_resultado.config(text=f"Total com desconto: R$ {valor_final:.2f}")
#
# # Função para limpar seleções
# def limpar_selecoes():
#     for var in variaveis_servicos.values():
#         var.set(False)  # Desmarca todos os Checkbuttons
#         entry_desconto_fixo.delete(0, tk.END)  # Limpa o campo de desconto fixo
#         entry_desconto_percentual.delete(0, tk.END)  # Limpa o campo de desconto percentual
#         label_resultado.config(text="Total com desconto: R$ 0.00")  # Reseta o resultado
#
#
# # Variável para definir se o pagamento foi feito ou está em aberto
# var_status_pagamento = tk.StringVar(value="Nenhuma Opção Marcada")
# var_pagamento = tk.StringVar(value="")  # Correção aqui
#
# # Frame para os métodos de pagamento
# frame_pagamento = ttk.LabelFrame(inner_frame, text="Forma de Pagamento")
# frame_pagamento.grid(row=5, column=0, columnspan=2, padx=10, pady=10, sticky="nw")
#
#     # Botões para definir o status do pagamento
# ttk.Label(inner_frame, text="Status Pagamento:").grid(row=4, column=0, padx=10, pady=5, sticky="w")
# botao_pago = tk.Radiobutton(inner_frame, text="Pago", variable=var_status_pagamento, value="pago")
# botao_pago.grid(row=5, column=1, sticky="w")
#
# frame_status_pagamento = ttk.LabelFrame(frame_financeiro, text="Status Pagamento")
# frame_status_pagamento.config(height=10)  # Define a altura manualmente
# frame_status_pagamento.grid(row=1, column=1, padx=10, pady=10, sticky="w")
# frame_status_pagamento.grid_propagate(False)  # Impede que os widgets internos alterem o tamanho do frame
#
# # criação frame aberto_pago
# frame_aberto_pago = ttk.LabelFrame(frame_financeiro, text="Status Pagamento")
# frame_aberto_pago.grid(row=3, column=0, padx=10, pady=5, sticky="w")
#
# # Botões para definir o status do pagamento
# ttk.Label(frame_aberto_pago, text="Status Pagamento:").grid(row=3, column=0, padx=10, pady=5, sticky="w")
# botao_em_aberto = tk.Radiobutton(frame_aberto_pago, text="Em Aberto", variable=var_status_pagamento, value="em_aberto")
# botao_em_aberto.grid(row=3, column=1, sticky="w")
# botao_pago = tk.Radiobutton(frame_aberto_pago, text="Pago", variable=var_status_pagamento, value="pago")
# botao_pago.grid(row=4, column=1, sticky="w")
#
# # Frame para Data do Pagamento
# frame_data_pagamento = ttk.LabelFrame(frame_financeiro, text="Data do Pagamento")
# frame_data_pagamento.grid(row=3, column=1, padx=10, pady=10, sticky="w")
# calendario_data_pagamento = DateEntry(frame_data_pagamento, year=2025, locale='pt_br')
# calendario_data_pagamento.grid(row=2, column=1, padx=10, pady=10, sticky='nsew')
#
# # Frame para condições de pagamento
# frame_classificacao_cliente = ttk.LabelFrame(frame_financeiro, text="Condições de Pagamento")
# frame_classificacao_cliente.grid(row=1, column=0, padx=10, pady=10, sticky="w")
#
# # Variável para armazenar a condição de pagamento
# var_condicao_pagamento = tk.StringVar(value="")
#
# # Labels e Radiobuttons para condições de pagamento
# ttk.Label(frame_classificacao_cliente, text="Tipo:").grid(row=1, column=1, padx=10, pady=5, sticky="w")
#
# radiobutton_pago_individual = tk.Radiobutton(frame_classificacao_cliente, text="Individual(Na Data)",
#                                                    variable=var_condicao_pagamento, value="pago_individual")
# radiobutton_pago_individual.grid(row=0, column=0, sticky="w")
#
# radiobutton_pacote_quinzenal = tk.Radiobutton(frame_classificacao_cliente, text="Pacote Quinzenal",
#                                                     variable=var_condicao_pagamento, value="pacote_quinzenal")
# radiobutton_pacote_quinzenal.grid(row=1, column=0, sticky="w")
#
# radiobutton_pacote_mensal = tk.Radiobutton(frame_classificacao_cliente, text="Pacote Mensal",
#                                                  variable=var_condicao_pagamento, value="pacote_mensal")
# radiobutton_pacote_mensal.grid(row=2, column=0, sticky="w")
#
#
# import tkinter as tk
# from tkinter import ttk
# from tkcalendar import DateEntry

# Declarações globais
# frame_financeiro = None
#
#
# def criar_frame_financeiro(parent):
#     global frame_financeiro
#     frame_financeiro = ttk.LabelFrame(parent, text="Informações Financeiras")
#     frame_financeiro.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
#
#     # Chame a função que cria o frame de abatimentos
#     criar_abatimentos(frame_financeiro)
#
#
# def criar_abatimentos(parent):
#     frame_abatimentos = ttk.LabelFrame(parent, text="Abatimentos")
#     frame_abatimentos.grid(row=2, column=0, padx=10, pady=10, sticky="nw")
#
#     # Checkbuttons para aplicar abatimentos
#     global var_desconto_fixo  # Certifique-se de que a variável está definida
#     var_desconto_fixo = tk.BooleanVar()
#
#     check_fixo = ttk.Checkbutton(frame_abatimentos, text="Desconto Fixo (R$)", variable=var_desconto_fixo)
#     check_fixo.grid(row=0, column=0, sticky="w")
#
#     global entry_desconto_fixo  # Certifique-se de que a variável está definida
#     entry_desconto_fixo = ttk.Entry(frame_abatimentos)
#     entry_desconto_fixo.grid(row=0, column=1, padx=10, pady=5, sticky="w")
#
#     global var_desconto_percentual  # Certifique-se de que a variável está definida
#     var_desconto_percentual = tk.BooleanVar()
#
#     check_percentual = ttk.Checkbutton(frame_abatimentos, text="Desconto Percentual (%)",
#                                        variable=var_desconto_percentual)
#     check_percentual.grid(row=1, column=0, sticky="w")
#
#     global entry_desconto_percentual  # Certifique-se de que a variável está definida
#     entry_desconto_percentual = ttk.Entry(frame_abatimentos)
#     entry_desconto_percentual.grid(row=1, column=1, padx=10, pady=5, sticky="w")
#
#     # Botão para calcular total
#     botao_calcular = ttk.Button(frame_abatimentos, text="Calcular Total", command=calcular_total)
#     botao_calcular.grid(row=2, column=0, pady=10)
#
#     # Botão para limpar seleções
#     botao_limpar = ttk.Button(frame_abatimentos, text="Limpar Seleções", command=limpar_selecoes)
#     botao_limpar.grid(row=2, column=1, padx=10)
#
#     # Label para exibir o resultado do cálculo
#     global label_resultado  # Certifique-se de que a variável está definida
#     label_resultado = ttk.Label(frame_abatimentos, text="Total com desconto: R$")
#     label_resultado.grid(row=3, column=0, columnspan=2, padx=10, pady=5)
#
#
# def atualizar_precos(event=None):
#     porte_selecionado = combobox_porte.get().strip()
#     total = 0
#     precos_selecionados = []
#
#     if porte_selecionado not in dados_pet:
#         label_resultado.config(text="Erro: Nenhum porte válido foi selecionado!")
#         return
#
#     for servico, var in variaveis_servicos.items():
#         if var.get():
#             preco = dados_pet[porte_selecionado]["preços"].get(servico, 0)
#             total += preco
#             precos_selecionados.append(f"{servico}: R$ {preco:.2f}")
#
#     label_resultado.config(text="\n".join(precos_selecionados) + f"\nTotal: R$ {total:.2f}")
#     return total
#
#
# def calcular_desconto(valor_total):
#     desconto_fixo = float(entry_desconto_fixo.get()) if var_desconto_fixo.get() else 0
#     desconto_percentual = float(entry_desconto_percentual.get()) if var_desconto_percentual.get() else 0
#     valor_com_desconto = valor_total - desconto_fixo
#     valor_com_desconto -= (valor_com_desconto * (desconto_percentual / 100))
#     return valor_com_desconto
#
#
# def calcular_total():
#     valor_total = atualizar_precos()  # Obter o valor total dos serviços
#     if valor_total is None:  # Se ocorrer erro no cálculo
#         return
#     valor_final = calcular_desconto(valor_total)
#     label_resultado.config(text=f"Total com desconto: R$ {valor_final:.2f}")
#
#
# def limpar_selecoes():
#     for var in variaveis_servicos.values():
#         var.set(False)  # Desmarca todos os Checkbuttons
#     entry_desconto_fixo.delete(0, tk.END)  # Limpa o campo de desconto fixo
#     entry_desconto_percentual.delete(0, tk.END)  # Limpa o campo de desconto percentual
#     label_resultado.config(text="Total com desconto: R$ 0.00")  # Reseta o resultado
#


#Inicialização da janela principal
# root = tk.Tk()
# criar_frame_financeiro(janela   )  # Cria o frame financeiro

# Continue com a configuração de outros frames ou widgets, se necessário


# Para adaptar o código que você forneceu para funcionar em uma aba dentro de uma interface Tkinter com múltiplas abas, precisaremos fazer algumas modificações para organizar os widgets da aba financeira corretamente.
#
# Vamos criar um exemplo que encapsula toda a lógica que você forneceu e a adapta para funcionar dentro de uma aba financeira. Vou usar ttk.Notebook para gerenciar as abas e manter todo o seu código funcional.
#
# Código Adaptado
# import tkinter as tk
# from tkinter import ttk

# aba_financeiro = ttk.Frame(notebook)
# notebook.add(aba_financeiro, text="Financeiro")
#
# # Função para criar a aba financeiro
# def criar_aba_financeiro(parent):
#     frame_financeiro = ttk.Frame(parent)
#     frame_financeiro.grid(row=0, column=0, sticky="nsew")  # Use .grid() para posicionar o frame
#
#     # Configuração para que o frame ocupe o espaço disponível
#     parent.grid_rowconfigure(0, weight=1)  # Permite que o frame se expanda verticalmente
#     parent.grid_columnconfigure(0, weight=1)  # Permite que o frame se expanda horizontalmente
#
#
# # Funções para calcular total, limpar seleções e atualizar pagamento
# def calcular_total():
#     # Você deve implementar esta lógica conforme seus requisitos
#     total = 100  # Exemplo de total, substitua pela lógica real
#     label_resultado.config(text=f"Total com desconto: R$ {total:.2f}")
#
# def limpar_selecoes():
#     for var in variaveis_servicos.values():
#         var.set(False)  # Desmarca todos os Checkbuttons
#     entry_desconto_fixo.delete(0, tk.END)  # Limpa o campo de desconto fixo
#     entry_desconto_percentual.delete(0, tk.END)  # Limpa o campo de desconto percentual
#     label_resultado.config(text="Total com desconto: R$ 0.00")  # Reseta o resultado
#
# def atualizar_pagamento():
#     # Atualize a lógica para refletir o status do pagamento
#     pass  # Implementar conforme necessário
#
# # Inicializa o frame da aba financeira
# def criar_aba_financeiro(parent):
#     frame_financeiro = ttk.Frame(parent)
#
#     # Criando um Frame para serviços
#     frame_servicos = ttk.LabelFrame(frame_financeiro, text="Serviços Disponíveis")
#     frame_servicos.grid(row=0, column=0, padx=10, pady=5, sticky="nsew")
#
#     # Criando Checkbuttons para serviços
#     global variaveis_servicos
#     variaveis_servicos = {}
#     servicos_disponiveis = ["Banho", "Hidratação", "Desembolo", "Remoção de Pelos",
#                             "Corte de Unhas", "Escovação de Dentes", "Tosa Higiênica",
#                             "Tosa na Máquina", "Tosa na Tesoura", "Leva e Trás"]
#
#     for i, servico in enumerate(servicos_disponiveis):
#         variaveis_servicos[servico] = tk.BooleanVar()
#         check_servico = ttk.Checkbutton(frame_servicos, text=servico, variable=variaveis_servicos[servico])
#         check_servico.grid(row=i, column=0, sticky="w")
#
#     # Criando o Frame para abatimentos
#     frame_abatimentos = ttk.LabelFrame(frame_financeiro, text="Abatimentos")
#     frame_abatimentos.grid(row=1, column=0, padx=10, pady=10, sticky="nsew")
#
#     # Variáveis para abatimentos
#     global var_desconto_fixo, var_desconto_percentual, entry_desconto_fixo, entry_desconto_percentual
#     var_desconto_fixo = tk.BooleanVar()
#     var_desconto_percentual = tk.BooleanVar()
#
#     # Checkbuttons para aplicar abatimentos
#     check_fixo = ttk.Checkbutton(frame_abatimentos, text="Desconto Fixo (R$)", variable=var_desconto_fixo)
#     check_fixo.grid(row=0, column=0, sticky="w")
#
#     entry_desconto_fixo = ttk.Entry(frame_abatimentos)
#     entry_desconto_fixo.grid(row=0, column=1, padx=10, pady=5, sticky="w")
#
#     check_percentual = ttk.Checkbutton(frame_abatimentos, text="Desconto Percentual (%)", variable=var_desconto_percentual)
#     check_percentual.grid(row=1, column=0, sticky="w")
#
#     entry_desconto_percentual = ttk.Entry(frame_abatimentos)
#     entry_desconto_percentual.grid(row=1, column=1, padx=10, pady=5, sticky="w")
#
#     # Botão para calcular total
#     botao_calcular = ttk.Button(frame_abatimentos, text="Calcular Total", command=calcular_total)
#     botao_calcular.grid(row=2, column=0, columnspan=2, pady=10)
#
#     # Botão para limpar seleções
#     botao_limpar = ttk.Button(frame_abatimentos, text="Limpar Seleções", command=limpar_selecoes)
#     botao_limpar.grid(row=2, column=2, padx=10)
#
#     # Label para exibir o resultado do cálculo
#     global label_resultado
#     label_resultado = ttk.Label(frame_abatimentos, text="Total com desconto: R$")
#     label_resultado.grid(row=3, column=0, columnspan=2, padx=10, pady=5)
#
#     # Frame para os métodos de pagamento
#     frame_pagamento = ttk.LabelFrame(frame_financeiro, text="Forma de Pagamento")
#     frame_pagamento.grid(row=2, column=0, padx=10, pady=10, sticky="nsew")
#
#     # Variável para definir se o pagamento foi feito ou está em aberto
#     global var_status_pagamento
#     var_status_pagamento = tk.StringVar(value="Nenhuma Opção Marcada")
#
#     # Botões para definir o status do pagamento
#     ttk.Label(frame_financeiro, text="Status do Pagamento:").grid(row=3, column=0, padx=10, pady=5, sticky="w")
#     botao_pago = tk.Radiobutton(frame_financeiro, text="Pago", variable=var_status_pagamento, value="pago", command=atualizar_pagamento)
#     botao_pago.grid(row=3, column=1, sticky="w")
#
#     botao_em_aberto = tk.Radiobutton(frame_financeiro, text="Em Aberto", variable=var_status_pagamento, value="Em Aberto", command=atualizar_pagamento)
#     botao_em_aberto.grid(row=3, column=2, sticky="w")
#
#     # Variável para armazenar a forma de pagamento
#     global var_pagamento
#     var_pagamento = tk.StringVar(value="")  # Inicia vazio
#
#     # Botões de forma de pagamento (inicialmente desabilitados)
#     radiobutton_pix = tk.Radiobutton(frame_pagamento, text="PIX", variable=var_pagamento, value="PIX", state="disabled")
#     radiobutton_pix.grid(row=0, column=0, sticky="w")
#
#     radiobutton_debito = tk.Radiobutton(frame_pagamento, text="Cartão de Débito", variable=var_pagamento, value="Débito", state="disabled")
#     radiobutton_debito.grid(row=0, column=1, sticky="w")
#
#     radiobutton_credito = tk.Radiobutton(frame_pagamento, text="Cartão de Crédito", variable=var_pagamento, value="Crédito", state="disabled")
#     radiobutton_credito.grid(row=1, column=0, sticky="w")
#
#     radiobutton_dinheiro = tk.Radiobutton(frame_pagamento, text="Em Espécie (Dinheiro)", variable=var_pagamento, value="Dinheiro", state="disabled")
#     radiobutton_dinheiro.grid(row=1, column=1, sticky="w")
#
#     return frame_financeiro
# #
# # # Função principal para inicializar a janela
# def main():
#     # Inicialização da janela principal
#     root = tk.Tk()
#     root.title("Aplicativo Financeiro")
#
#     # Criação do Notebook para as abas
#     notebook = ttk.Notebook(root)
#     notebook.grid(padx=10, pady=10)
#
#     # Criar abas
#     aba_financeiro = criar_aba_financeiro(notebook)
#     notebook.add(aba_financeiro, text="Financeiro")

    # Aqui você pode adicionar mais abas, como `aba_servicos`, etc.
#
#     root.mainloop()

# Adiciona a aba "Financeiro" ao notebook
# aba_financeiro = ttk.Frame(notebook)
# notebook.add(aba_financeiro, text="Financeiro")
#
# # Função para criar a aba financeiro
# def criar_aba_financeiro(parent):
#     frame_financeiro = ttk.Frame(parent)
#     frame_financeiro.grid(row=0, column=0, sticky="nsew")  # Use .grid() para posicionar o frame
#
#     # Configuração para que o frame ocupe o espaço disponível
#     parent.grid_rowconfigure(0, weight=1)  # Permite que o frame se expanda verticalmente
#     parent.grid_columnconfigure(0, weight=1)  # Permite que o frame se expanda horizontalmente
#
#     # Criando um Frame para serviços
#     frame_servicos = ttk.LabelFrame(frame_financeiro, text="Serviços Disponíveis")
#     frame_servicos.grid(row=0, column=0, padx=10, pady=5, sticky="nsew")
#
#     # Criando Checkbuttons para serviços
#     global variaveis_servicos
#     variaveis_servicos = {}
#     servicos_disponiveis = ["Banho", "Hidratação", "Desembolo", "Remoção de Pelos",
#                             "Corte de Unhas", "Escovação de Dentes", "Tosa Higiênica",
#                             "Tosa na Máquina", "Tosa na Tesoura", "Leva e Trás"]
#
#     for i, servico in enumerate(servicos_disponiveis):
#         variaveis_servicos[servico] = tk.BooleanVar()
#         check_servico = ttk.Checkbutton(frame_servicos, text=servico, variable=variaveis_servicos[servico])
#         check_servico.grid(row=i, column=0, sticky="w")
#
#     # Criando o Frame para abatimentos
#     frame_abatimentos = ttk.LabelFrame(frame_financeiro, text="Abatimentos")
#     frame_abatimentos.grid(row=1, column=0, padx=10, pady=10, sticky="nsew")
#
#     # Variáveis para abatimentos
#     global var_desconto_fixo, var_desconto_percentual, entry_desconto_fixo, entry_desconto_percentual
#     var_desconto_fixo = tk.BooleanVar()
#     var_desconto_percentual = tk.BooleanVar()
#
#     # Checkbuttons para aplicar abatimentos
#     check_fixo = ttk.Checkbutton(frame_abatimentos, text="Desconto Fixo (R$)", variable=var_desconto_fixo)
#     check_fixo.grid(row=0, column=0, sticky="w")
#
#     entry_desconto_fixo = ttk.Entry(frame_abatimentos)
#     entry_desconto_fixo.grid(row=0, column=1, padx=10, pady=5, sticky="w")
#
#     check_percentual = ttk.Checkbutton(frame_abatimentos, text="Desconto Percentual (%)", variable=var_desconto_percentual)
#     check_percentual.grid(row=1, column=0, sticky="w")
#
#     entry_desconto_percentual = ttk.Entry(frame_abatimentos)
#     entry_desconto_percentual.grid(row=1, column=1, padx=10, pady=5, sticky="w")
#
#     # Botão para calcular total
#     botao_calcular = ttk.Button(frame_abatimentos, text="Calcular Total", command=calcular_total)
#     botao_calcular.grid(row=2, column=0, columnspan=2, pady=10)
#
#     # Botão para limpar seleções
#     botao_limpar = ttk.Button(frame_abatimentos, text="Limpar Seleções", command=limpar_selecoes)
#     botao_limpar.grid(row=2, column=2, padx=10)
#
#     # Label para exibir o resultado do cálculo
#     global label_resultado
#     label_resultado = ttk.Label(frame_abatimentos, text="Total com desconto: R$")
#     label_resultado.grid(row=3, column=0, columnspan=2, padx=10, pady=5)
#
#     # Frame para os métodos de pagamento
#     frame_pagamento = ttk.LabelFrame(frame_financeiro, text="Forma de Pagamento")
#     frame_pagamento.grid(row=2, column=0, padx=10, pady=10, sticky="nsew")
#
#     # Variável para definir se o pagamento foi feito ou está em aberto
#     global var_status_pagamento
#     var_status_pagamento = tk.StringVar(value="Nenhuma Opção Marcada")
#
#     # Botões para definir o status do pagamento
#     ttk.Label(frame_financeiro, text="Status do Pagamento:").grid(row=3, column=0, padx=10, pady=5, sticky="w")
#     botao_pago = tk.Radiobutton(frame_financeiro, text="Pago", variable=var_status_pagamento, value="pago", command=atualizar_pagamento)
#     botao_pago.grid(row=3, column=1, sticky="w")
#
#     botao_em_aberto = tk.Radiobutton(frame_financeiro, text="Em Aberto", variable=var_status_pagamento, value="Em Aberto", command=atualizar_pagamento)
#     botao_em_aberto.grid(row=3, column=2, sticky="w")
#
#     # Variável para armazenar a forma de pagamento
#     global var_pagamento
#     var_pagamento = tk.StringVar(value="")  # Inicia vazio
#
#     # Botões de forma de pagamento (inicialmente desabilitados)
#     radiobutton_pix = tk.Radiobutton(frame_pagamento, text="PIX", variable=var_pagamento, value="PIX", state="disabled")
#     radiobutton_pix.grid(row=0, column=0, sticky="w")
#
#     radiobutton_debito = tk.Radiobutton(frame_pagamento, text="Cartão de Débito", variable=var_pagamento, value="Débito", state="disabled")
#     radiobutton_debito.grid(row=0, column=1, sticky="w")
#
#     radiobutton_credito = tk.Radiobutton(frame_pagamento, text="Cartão de Crédito", variable=var_pagamento, value="Crédito", state="disabled")
#     radiobutton_credito.grid(row=1, column=0, sticky="w")
#
#     radiobutton_dinheiro = tk.Radiobutton(frame_pagamento, text="Em Espécie (Dinheiro)", variable=var_pagamento, value="Dinheiro", state="disabled")
#     radiobutton_dinheiro.grid(row=1, column=1, sticky="w")
#
#     return frame_financeiro  # Retorne o frame_financeiro
#
# # Crie a aba e adicione ao notebook
# criar_aba_financeiro(aba_financeiro)

#
# if __name__ == "__main__":
#     main()
# Copy
# Explicação das Alterações:
# Aba Financeiro: As funções foram adaptadas para criar um frame financeiro dentro de uma aba em um ttk.Notebook.
#
# Widgets Agrupados: Os widgets estão organizados dentro da função criar_aba_financeiro, que é chamada ao adicionar a aba ao notebook.
#
# Funções de Callback: As funções para calcular total, limpar seleções, e atualizar pagamento foram mantidas, mas você pode personalizá-las de acordo com suas necessidades.
#
# Estrutura: O layout foi ajustado para usar grid, mantendo as propriedades do seu código original. Você pode reorganizar conforme necessário.
#
# Agora, o seu código está estruturado para funcionar em uma aba financeira dentro de um aplicativo Tkinter. Certifique-se de adaptar a lógica de cálculo e manipulação de dados conforme o seu contexto aplicativo!

# # Defina suas funções antes de chamá-las
# def calcular_total():
#     # Implemente a lógica de cálculo do total
#     total = 0  # Exemplo fixo, substitua pela lógica real
#     label_resultado.config(text=f"Total com desconto: R$ {total:.2f}")

# Variável global para armazenar o porte selecionado

# Frame para Data do Cadastro



var_porte = tk.StringVar(value="Pequeno")  # Valor padrão

# Função para atualizar os valores exibidos
def atualizar_valores():
    porte_selecionado = var_porte.get().strip().capitalize()
    for servico in servicos_disponiveis:
        if variaveis_servicos[servico].get():
            valor = dados_pet[porte_selecionado]["preços"].get(servico, 0)
            labels_valores[servico].config(text=f"R$ {valor:2f}")
        else:
            labels_valores[servico].config(text="")


def calcular_total():
    total = 0  # Inicializa o total

    # Obtém o porte selecionado
    porte_selecionado = var_porte.get().strip().capitalize()

    # Verifica se o porte está no dicionário de preços
    if porte_selecionado in dados_pet:
        precos = dados_pet[porte_selecionado]["preços"]

        # Soma os preços dos serviços selecionados
        for servico, variavel in variaveis_servicos.items():
            if variavel.get():  # Verifica se o serviço está selecionado
                total += precos.get(servico, 0)  # Adiciona o preço do serviço

    # Calcula descontos se aplicáveis
    if var_desconto_fixo.get():
        desconto_fixo = entry_desconto_fixo.get()
        if desconto_fixo.isdigit():
            total -= float(desconto_fixo)

    if var_desconto_percentual.get():
        desconto_percentual = entry_desconto_percentual.get()
        if desconto_percentual.isdigit():
            total -= total * (float(desconto_percentual) / 100)

    # Atualiza o resultado
    label_resultado.config(text=f"Total com desconto: R$ {total:.2f}")




def limpar_selecoes():
    # Implemente a lógica para limpar as seleções
    for var in variaveis_servicos.values():
        var.set(False)  # Desmarca todos os Checkbuttons
    entry_desconto_fixo.delete(0, tk.END)
    entry_desconto_percentual.delete(0, tk.END)
    label_resultado.config(text="Total com desconto: R$ 0.00")

def atualizar_pagamento():
    # Exibir uma mensagem de status de pagamento
    status = var_status_pagamento.get()
    print(f"Status de pagamento atualizado: {status}")

    # Lógica para atualizar o status do pagamento
    #pass  # Implementar conforme necessário

# Função para criar a aba de configuração
def criar_aba_config(parent):
    frame_config = ttk.Frame(parent)
    frame_config.grid(row=0, column=0, sticky="nsew")

    # Seleção do porte
    label_porte = ttk.Label(frame_config, text="Selecione o Porte:")
    label_porte.grid(row=0, column=0, padx=10, pady=5)

    porte_combo = ttk.Combobox(frame_config, textvariable=var_porte, values=list(dados_pet.keys()))
    porte_combo.grid(row=0, column=1, padx=10, pady=5)
    porte_combo.bind("<<ComboboxSelected>>", lambda event: atualizar_valores())  # Atualiza valores ao mudar o porte

    return frame_config


# Adiciona a aba "Financeiro" ao notebook
aba_financeiro = ttk.Frame(notebook)
notebook.add(aba_financeiro, text="Financeiro")

# Função para criar a aba financeiro
def criar_aba_financeiro(parent):
    frame_financeiro = ttk.Frame(parent)
    frame_financeiro.grid(row=0, column=0, sticky="nsew")

    # # Configuração para que o frame ocupe o espaço disponível
    # parent.grid_rowconfigure(0, weight=1)
    # parent.grid_columnconfigure(0, weight=1)
    #
    # # Seleção do porte
    # # global var_porte
    # # var_porte = tk.StringVar(value="Pequeno")  # Valor padrão
    #
    # label_porte = ttk.Label(frame_financeiro, text="Selecione o Porte:")
    # label_porte.grid(row=0, column=0, padx=10, pady=5)
    #
    # porte_combo = ttk.Combobox(frame_financeiro, textvariable=var_porte, values=list(dados_pet.keys()))
    # porte_combo.grid(row=0, column=1, padx=10, pady=5)
    # porte_combo.bind("<<ComboboxSelected>>", lambda event: atualizar_valores())  # Atualiza valores ao mudar o porte

    # Criando um Frame para serviços
    frame_servicos = ttk.LabelFrame(frame_financeiro, text="Serviços Disponíveis")
    frame_servicos.grid(row=0, column=0, padx=10, pady=5, sticky="nsew")

    # Criando Checkbuttons para serviços
    global variaveis_servicos
    variaveis_servicos = {}
    servicos_disponiveis = ["Banho", "Hidratação", "Desembolo", "Remoção de Pelos",
                            "Corte de Unhas", "Escovação de Dentes", "Tosa Higiênica",
                            "Tosa na Máquina", "Tosa na Tesoura", "Leva e Trás"]

    global labels_valores  # Dicionário para armazenar os labels de valores
    labels_valores = {}

    for i, servico in enumerate(servicos_disponiveis):
        variaveis_servicos[servico] = tk.BooleanVar()
        check_servico = ttk.Checkbutton(frame_servicos, text=servico, variable=variaveis_servicos[servico])
        check_servico.grid(row=i, column=0, sticky="w")

        # Criando label para exibir o valor do serviço
        labels_valores[servico] = ttk.Label(frame_servicos, text="")
        labels_valores[servico].grid(row=i, column=1, sticky="w")

    # Criando o Frame para abatimentos
    frame_abatimentos = ttk.LabelFrame(frame_financeiro, text="Abatimentos")
    frame_abatimentos.grid(row=1, column=0, padx=10, pady=10, sticky="nsew")

    # Variáveis para abatimentos
    global var_desconto_fixo, var_desconto_percentual, entry_desconto_fixo, entry_desconto_percentual
    var_desconto_fixo = tk.BooleanVar()
    var_desconto_percentual = tk.BooleanVar()

    # Checkbuttons para aplicar abatimentos
    check_fixo = ttk.Checkbutton(frame_abatimentos, text="Desconto Fixo (R$)", variable=var_desconto_fixo)
    check_fixo.grid(row=0, column=0, sticky="w")

    entry_desconto_fixo = ttk.Entry(frame_abatimentos)
    entry_desconto_fixo.grid(row=0, column=1, padx=10, pady=5, sticky="w")

    check_percentual = ttk.Checkbutton(frame_abatimentos, text="Desconto Percentual (%)", variable=var_desconto_percentual)
    check_percentual.grid(row=1, column=0, sticky="w")

    entry_desconto_percentual = ttk.Entry(frame_abatimentos)
    entry_desconto_percentual.grid(row=1, column=1, padx=10, pady=5, sticky="w")

    # Botão para calcular total
    botao_calcular = ttk.Button(frame_abatimentos, text="Calcular Total", command=calcular_total)
    botao_calcular.grid(row=2, column=0, columnspan=2, pady=10)

    # Botão para limpar seleções
    botao_limpar = ttk.Button(frame_abatimentos, text="Limpar Seleções", command=limpar_selecoes)
    botao_limpar.grid(row=2, column=2, padx=10)

    # Label para exibir o resultado do cálculo
    global label_resultado
    label_resultado = ttk.Label(frame_abatimentos, text="Total com desconto: R$")
    label_resultado.grid(row=3, column=0, columnspan=2, padx=10, pady=5)

    # Frame para os métodos de pagamento
    frame_pagamento = ttk.LabelFrame(frame_financeiro, text="Forma de Pagamento")
    frame_pagamento.grid(row=2, column=0, padx=10, pady=10, sticky="nsew")

    # Variável para definir se o pagamento foi feito ou está em aberto
    global var_status_pagamento
    var_status_pagamento = tk.StringVar(value="Nenhuma Opção Marcada")

    # Botões para definir o status do pagamento
    ttk.Label(frame_financeiro, text="Status do Pagamento:").grid(row=3, column=0, padx=10, pady=5, sticky="w")
    botao_pago = tk.Radiobutton(frame_financeiro, text="Pago", variable=var_status_pagamento, value="pago", command=atualizar_pagamento)
    botao_pago.grid(row=3, column=1, sticky="w")

    botao_em_aberto = tk.Radiobutton(frame_financeiro, text="Em Aberto", variable=var_status_pagamento, value="Em Aberto", command=atualizar_pagamento)
    botao_em_aberto.grid(row=3, column=2, sticky="w")

    # Variável para armazenar a forma de pagamento
    global var_pagamento
    var_pagamento = tk.StringVar(value="")  # Inicia vazio

    # Botões de forma de pagamento (inicialmente desabilitados)
    radiobutton_pix = tk.Radiobutton(frame_pagamento, text="PIX", variable=var_pagamento, value="PIX")
    radiobutton_pix.grid(row=0, column=0, sticky="w")

    radiobutton_debito = tk.Radiobutton(frame_pagamento, text="Cartão de Débito", variable=var_pagamento, value="Débito")
    radiobutton_debito.grid(row=0, column=1, sticky="w")

    radiobutton_credito = tk.Radiobutton(frame_pagamento, text="Cartão de Crédito", variable=var_pagamento, value="Crédito")
    radiobutton_credito.grid(row=1, column=0, sticky="w")

    radiobutton_dinheiro = tk.Radiobutton(frame_pagamento, text="Em Espécie (Dinheiro)", variable=var_pagamento, value="Dinheiro")
    radiobutton_dinheiro.grid(row=1, column=1, sticky="w")

    return frame_financeiro  # Retorne o frame_financeiro

# Crie a aba e adicione ao notebook
criar_aba_financeiro(aba_financeiro)

# Calendário Data do Serviço
frame_calendario_financeiro = ttk.LabelFrame(aba_financeiro, text="Data do Serviço")
frame_calendario_financeiro.grid(row=0, column=4, padx=10, pady=10, sticky="w")
calendario_financeiro = DateEntry(frame_calendario_financeiro, year=2025, locale='pt_br')
calendario_financeiro.grid(row=0, column=4 , padx=10, pady=10, sticky='nsew')

# Calendário Data Efetivação do Pagamento
frame_calendario_financeiro = ttk.LabelFrame(aba_financeiro, text="Data do Pagamento")
frame_calendario_financeiro.grid(row=0, column=5, padx=10, pady=10, sticky="w")
calendario_financeiro = DateEntry(frame_calendario_financeiro, year=2025, locale='pt_br')
calendario_financeiro.grid(row=0, column=5 , padx=10, pady=10, sticky='nsew')


# Inicie a aplicação Tkinter
# root = tk.Tk()
# root.mainloop()
# Copy




# CONSULTA CONSULTA CONSULTA

def criar_frame_consulta(parent):
    frame_consulta = ttk.LabelFrame(parent, text="Informações Sobre o PET")
    frame_consulta.grid(row=0, column=0, padx=5, pady=5, sticky="nsew")

    frame_consulta = ttk.LabelFrame(frame_consulta, text="Consultando PET")
    frame_consulta.grid(row=0, column=0, padx=5, pady=5, sticky="nsew")

    # nome Pet
#     frame_nome_pet = ttk.LabelFrame(frame_cadastro, text="Nome do Pet", anchor='w')
#     frame_nome_pet.grid(row=1, column=0, padx=10, pady=10, sticky='w')
#     entry_nome = tk.Entry(frame_cadastro)
#     entry_nome.grid(row=1, column=1, columnspan=4, pady=1, sticky='nsew')
#
#     # idade
#     frame_idadedopetanos = ttk.LabelFrame(frame_cadastro, text="Idade Anos")
#     frame_idadedopetanos.grid(row=2, column=0, padx=10, pady=10, sticky='nsew')
#     entry_idadedopetanos = tk.Entry(frame_cadastro)
#     entry_idadedopetanos.grid(row=2, column=1, padx=10, pady=10, sticky='nsew')
#
#     frame_idadedopetmeses = ttk.LabelFrame(frame_cadastro, text="Meses")
#     frame_idadedopetmeses.grid(row=3, column=0, padx=10, pady=10, sticky='nsew')
#     entry_idadedopetmeses = tk.Entry(frame_cadastro)
#     entry_idadedopetmeses.grid(row=3, column=1, padx=10, pady=10, sticky='nsew')
#
#     # Tutor 1
#     frame_tutor1 = ttk.LabelFrame(frame_cadastro, text="Tutor 1", anchor='e')
#     frame_tutor1.grid(row=4, column=0, padx=10, pady=10, sticky='nsew')
#     entry_tutor_1 = tk.Entry(frame_cadastro)
#     entry_tutor_1.grid(row=4, column=1, padx=10, pady=10, sticky='nsew')
#
#     # telefone1
#     frame_telefone_1 = ttk.LabelFrame(frame_cadastro, text="Telefone Tutor 1", anchor='e')
#     frame_telefone_1.grid(row=5, column=0, padx=10, pady=10, sticky='e')
#     entry_telefone_1 = tk.Entry(frame_cadastro)
#     entry_telefone_1.grid(row=5, column=1, padx=10, pady=10, sticky='nsew')
#     # email Tutor1
#     frame_email_tutor_1 = ttk.LabelFrame(frame_cadastro, text="email Tutor 1", anchor='e')
#     frame_email_tutor_1.grid(row=6, column=0, padx=10, pady=10, sticky='e')
#     entry_email_tutor_1 = tk.Entry(frame_cadastro)
#     entry_email_tutor_1.grid(row=6, column=1, padx=10, pady=10, sticky='nsew')
#
#     # tutor 2
#     frame_tutor2 = ttk.LabelFrame(frame_cadastro, text="Tutor 2", anchor='e')
#     frame_tutor2.grid(row=7, column=0, padx=10, pady=10, sticky='nsew')
#     # Campo de entrada (Entry)
#     entry_tutor_2 = tk.Entry(frame_cadastro)
#     entry_tutor_2.grid(row=7, column=1, padx=10, pady=10, sticky='nsew')
#
#     # telefone 2
#     frame_telefone_2 = ttk.LabelFrame(frame_cadastro, text="Telefone Tutor 2", anchor='e')
#     frame_telefone_2.grid(row=8, column=0, padx=10, pady=10, sticky='nsew')
#     # Campo de entrada (Entry)
#     entry_telefone_2 = tk.Entry(frame_cadastro)
#     entry_telefone_2.grid(row=8, column=1, padx=10, pady=10, sticky='nsew')
#     frame_telefone_2a = ttk.LabelFrame(frame_cadastro, text="Telefone_a", borderwidth=1, relief='solid')
#     entry_telefone_2a = tk.Entry(inner_frame)
#     entry_telefone_2a.grid(row=9, column=0, padx=10, pady=10, sticky='nsew')
#
#     # email Tutor2
#     frame_email_tutor_2 = ttk.LabelFrame(frame_cadastro, text="email Tutor 2", anchor='e')
#     frame_email_tutor_2.grid(row=9, column=1, padx=10, pady=10, sticky='e')
#     entry_email_tutor_2 = tk.Entry(frame_cadastro)
#     entry_email_tutor_2.grid(row=10, column=0, padx=10, pady=10, sticky='nsew')
#
#     # Criando um Frame para Endereço e Observações
#     logradouro = tttk.LabelFrame(frame_cadastro, text="Endereço e Observações")
#     # logradouro.config(height=170)  # Define a altura manualmente
#     logradouro.grid(row=13, column=0, columnspan=5, padx=10, pady=5, sticky="nsew")
#     # frame_logradouro.grid_propagate(False)  # Impede que os widgets internos alterem o tamanho do frame
#
#     # Endereço Logradouro
#     frame_enderecopet = ttk.LabelFrame(frame_cadastro, text="Endereço", anchor='e')
#     frame_enderecopet.grid(row=14, column=0, padx=10, pady=10, sticky='nsew')
#     # Campo de entrada (Entry)
#     entry_enderecopet = tk.Entry(frame_cadastro)
#     entry_enderecopet.grid(row=14, column=1, padx=10, pady=10, sticky='nsew', columnspan=6)
#     # entry_nome.grid(row=1, column=0, columnspan=4, pady=1, sticky='nsew')
#
#     # endereço Número
#     frame_endereconumero = ttk.LabelFrame(frame_cadastro, text="Número", anchor='e')
#     frame_endereconumero.grid(row=15, column=0, padx=10, pady=10, sticky='nsew')
#     # Campo de entrada (Entry)
#     entry_endereconumero = tk.Entry(frame_cadastro)
#     entry_endereconumero.grid(row=15, column=1, padx=10, pady=10, sticky='nsew')
# qua
#     # Endereço Complemento
#     ttk.Label(frame_endereco, text="Complemento").grid(row=15, column=2, padx=10, pady=10, sticky='nsew')
#     # Campo de entrada (Entry)
#     entry_enderecocomplemento = ttk.Entry(frame_endereco)
#     entry_enderecocomplemento.grid(row=2, column=1, padx=10, pady=10, sticky='nsew')
#
#     frame_recomendacoes = tttk.LabelFrameFrame(frame_cadastro, text="Recomendações", borderwidth=1, relief='solid')
#     frame_recomendacoes.grid(row=20, column=0, columnspan=4, padx=10, pady=5, sticky="w")
#
#     # Observações sobre o PET
#     frame_recomendacoes = ttk.LabelFrame(frame_cadastro, text="Recomendações Sobre o pet", borderwidth=1,
#                                          relief='solid')
#     frame_recomendacoes.grid(row=21, column=0, columnspan=5, padx=10, pady=10, sticky='nsew')
#     # Campo de entrada (Entry)
#     campo_observacoes = tk.Text(frame_cadastro, width=80, height=12, borderwidth=2, relief='solid')
#     campo_observacoes.grid(row=30, column=0, columnspan=6, padx=10, pady=10)

# import tkinter as tk
# from tkinter import ttk
#
# # Criando a janela principal
# janela = tk.Tk()
# janela.title("Cadastro Pet Shop")

# Criando o Notebook
# notebook = ttk.Notebook(janela)
# notebook.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")
#


# Criando um Frame para Dados Cadastrais
frame_cadastramento = tk.LabelFrame(aba_cadastro, text="Dados Cadastrais", borderwidth=3, relief='groove')
frame_cadastramento.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")

# Nome do Pet
ttk.Label(frame_cadastramento, text="Nome do Pet:").grid(row=0, column=0, padx=10, pady=5, sticky="w")
entry_nome_pet = ttk.Entry(frame_cadastramento)
entry_nome_pet.grid(row=0, column=1, padx=10, pady=5, sticky="ew")

# Idade
ttk.Label(frame_cadastramento, text="Idade (Anos):").grid(row=1, column=0, padx=10, pady=5, sticky="w")
entry_idade_anos = ttk.Entry(frame_cadastramento)
entry_idade_anos.grid(row=1, column=1, padx=10, pady=5, sticky="ew")

ttk.Label(frame_cadastramento, text="Idade (Meses):").grid(row=2, column=0, padx=10, pady=5, sticky="w")
entry_idade_meses = ttk.Entry(frame_cadastramento)
entry_idade_meses.grid(row=2, column=1, padx=10, pady=5, sticky="ew")

# Criando um Frame para Endereço e Observações
frame_endereco = tk.LabelFrame(aba_cadastro, text="Endereço e Observações", borderwidth=3, relief='groove')
frame_endereco.grid(row=0, column=2, columnspan=2, padx=10, pady=10, sticky="nsew")

ttk.Label(frame_endereco, text="Endereço:").grid(row=0, column=0, padx=10, pady=5, sticky="w")
entry_expande = ttk.Entry(frame_endereco)
entry_expande.grid(row=0, column=1, columnspan=2, padx=10, pady=5, sticky="ew")

# aumentando o tamanho do entry configurando columnconfigure(1, weight=1)
frame_endereco.columnconfigure(1, weight=2)

# Configura as colunas do frame_endereco para expansão
# for col in range(2):
#     frame_endereco.columnconfigure(col, weight=1)



ttk.Label(frame_endereco, text="Número:").grid(row=1, column=0, padx=10, pady=5, sticky="w")
entry_fixo = ttk.Entry(frame_endereco)
entry_fixo.grid(row=1, column=1, padx=10, pady=5, sticky="w")

# Endereço Complemento
ttk.Label(frame_endereco, text="Complemento").grid(row=2, column=0, padx=10, pady=10, sticky='nsew')     # Campo de entrada (Entry)
entry_enderecocomplemento = ttk.Entry(frame_endereco)
entry_enderecocomplemento.grid(row=2, column=1, columnspan=2, padx=10, pady=10, sticky='ew')

# EXEMPLO EXPANSÃO OU NÃO DE LINHAS

# Configuração das linhas (impedindo que algumas expandam)
# frame_exemplo.rowconfigure(0, weight=0)  # Linha fixa
# frame_exemplo.rowconfigure(1, weight=1)  # Linha que pode expandir


# Configuração das linhas (impedindo que algumas expandam)
# frame_exemplo.rowconfigure(0, weight=0)  # Linha fixa
# frame_exemplo.rowconfigure(1, weight=1)  # Linha que pode expandir
#
# # Adicionando widgets
# ttk.Label(frame_exemplo, text="Linha fixa:").grid(row=0, column=0, padx=10, pady=5, sticky="w")
# entry_fixo = ttk.Entry(frame_exemplo)
# entry_fixo.grid(row=0, column=1, padx=10, pady=5, sticky="w")  # Não vai expandir
#
# ttk.Label(frame_exemplo, text="Linha expansível:").grid(row=1, column=0, padx=10, pady=5, sticky="w")
# entry_expande = ttk.Entry(frame_exemplo)
# entry_expande.grid(row=1, column=1, padx=10, pady=5, sticky="ew")  # Vai expandir
#


# Configuração das linhas (impedindo que algumas expandam)
#frame_endereco.rowconfigure(0, weight=0)  # Linha fixa
#frame_endereco.rowconfigure(1, weight=1)  # Linha que pode expandir

# Adicionando widgets
# ttk.Label(frame_endereco, text="Linha fixa:").grid(row=0, column=0, padx=10, pady=5, sticky="w")
# entry_fixo = ttk.Entry(frame_endereco)
# entry_fixo.grid(row=0, column=1, padx=10, pady=5, sticky="w")  # Não vai expandir
#
# ttk.Label(frame_endereco, text="Linha expansível:").grid(row=1, column=0, padx=10, pady=5, sticky="w")
# entry_expande = ttk.Entry(frame_endereco)
# entry_expande.grid(row=1, column=1, padx=10, pady=5, sticky="ew")  # Vai expandir


# EXEMPLO EXPANSÃO OU NÃO DE LINHAS


# Criando um Frame para Dados Cadastrais
frame_tutor = tk.LabelFrame(aba_cadastro, text="Dados dos Tutores", borderwidth=3, relief='groove')
frame_tutor.grid(row=1, column=0, padx=10, pady=5, sticky="ew")

# Tutor 1
ttk.Label(frame_tutor, text="NOME Tutor 1:").grid(row=2, column=0, padx=10, pady=10, sticky='nsew')
entry_tutor_1 = tk.Entry(frame_tutor)
entry_tutor_1.grid(row=2, column=1, padx=10, pady=10, sticky='nsew')

# telefone1
ttk.Label(frame_tutor, text="Telefone Tutor 1").grid(row=4, column=0, padx=10, pady=10, sticky='e')
entry_telefone_1 = tk.Entry(frame_tutor)
entry_telefone_1.grid(row=4, column=1, padx=10, pady=10, sticky='nsew')

# email Tutor1
ttk.Label(frame_tutor, text="email Tutor 1").grid(row=5, column=0, padx=10, pady=10, sticky='e')
entry_email_tutor_1 = tk.Entry(frame_tutor)
entry_email_tutor_1.grid(row=5, column=1, padx=10, pady=10, sticky='nsew')

# tutor 2
ttk.Label(frame_tutor, text="NOME Tutor 2:").grid(row=6, column=0, padx=10, pady=10, sticky='nsew')

# Campo de entrada (Entry)
entry_tutor_2 = tk.Entry(frame_tutor)
entry_tutor_2.grid(row=6, column=1, padx=10, pady=10, sticky='nsew')

# telefone 2
ttk.Label(frame_tutor, text="Telefone Tutor 2").grid(row=7, column=0, padx=10, pady=10, sticky='nsew')
# Campo de entrada (Entry)
entry_telefone_2 = tk.Entry(frame_tutor)
entry_telefone_2.grid(row=7, column=1, padx=10, pady=10, sticky='nsew')
ttk.LabelFrame(frame_tutor, text="Telefone_a")
entry_telefone_2a = tk.Entry(inner_frame)
entry_telefone_2a.grid(row=8, column=0, padx=10, pady=10, sticky='nsew')

# email Tutor2
ttk.Label(frame_tutor, text="email Tutor 2").grid(row=9, column=0, padx=10, pady=10, sticky='e')
entry_email_tutor_2 = tk.Entry(frame_tutor)
entry_email_tutor_2.grid(row=9, column=1, padx=10, pady=10, sticky='nsew')



# Configuração para expandir corretamente
# janela.columnconfigure(0, weight=1)
# janela.rowconfigure(0, weight=1)
# aba_cadastro.columnconfigure(1, weight=1)

# Criando um frame para tipopelo e Características do PET
# frame_descricao = tk.LabelFrame(aba_cadastro, text="tipopelo e Características - Pelagem", borderwidth=3, relief='groove')
# frame_descricao.grid(row=4, column=0, padx=10, pady=10, sticky="nsew")

# ALTERAÇÃO COPILOT

# Criando um Frame para tipopelo e Características
aba_cadastro = ttk.Frame(aba_cadastro)
aba_cadastro.grid(row=2, column=0, padx=10, pady=5, sticky="ew")

frame_descricao = tk.LabelFrame(aba_cadastro, text=" Tamanho e Características - Pelagem ", borderwidth=3, relief="groove")
frame_descricao.grid(row=3, column=0, padx=10, pady=10, sticky="ew")

# Criando variável para os Radiobuttons
var_descricao = tk.StringVar(value="") # Inicializa sem nenhuma seleção

# ALTERAÇÃO COPITOL


# Botões de Características - Pelagem (inicialmente desabilitados)
radiobutton_curta = tk.Radiobutton(frame_descricao, text="Curta", variable=var_descricao, value="Curta")
radiobutton_curta.grid(row=2, column=0, sticky="w")

radiobutton_mediana = tk.Radiobutton(frame_descricao, text="Mediana", variable=var_descricao, value="Mediana")
radiobutton_mediana.grid(row=3, column=0, sticky="w")

radiobutton_longa = tk.Radiobutton(frame_descricao, text="Longa", variable=var_descricao, value="Longa")
radiobutton_longa.grid(row=4, column=0, sticky="w")

# Função para ativar/desativar Radiobuttons
def atualizar_descricao():
    global var_descricao  # Declare a variável como global
    if var_descricao.get() in ["Curta", "Mediana", "Longa"]:
        # Ativar botões de pagamento
        radiobutton_curta.config(state="normal")
        radiobutton_mediana.config(state="normal")
        radiobutton_longa.config(state="normal")
    else:
        # Resetar e desabilitar botões de pagamento
        var_descricao.set("") # Ressetar seleção
        radiobutton_curta.config(state="disabled")
        radiobutton_mediana.config(state="disabled")
        radiobutton_longa.config(state="disabled")

# Botão para testar ativação dos Radiobuttons
# btn_ativar = ttk.Button(frame_descricao, text="Ativar Seleção", command=atualizar_descricao)
# btn_ativar.grid(row=5, column=0, pady=10, sticky="w")


# Função para salvar no banco de dados
def salvar_descricao():
    descricao_selecionada = var_descricao.get()

    if descricao_selecionada:
        conn = sqlite3.connect("petshop.db")  # Conectar ao banco de dados
        cursor = conn.cursor()

        # Criar tabela se não existir
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS caracteristicas_pet (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                descricao TEXT
            )
        ''')

        # Inserir dados
        cursor.execute("INSERT INTO caracteristicas_pet (descricao) VALUES (?)", (descricao_selecionada,))
        conn.commit()
        conn.close()

        print(f"tipopelo '{descricao_selecionada}' salva no banco de dados!")


# Botão para salvar no banco de dados
# btn_salvar = ttk.Button(frame_descricao, text="Salvar Seleção", command=salvar_descricao)
# btn_salvar.grid(row=6, column=0, pady=10, sticky="w")














# Criando um Frame para Tipos de Pelos
aba_cadastro = ttk.Frame(aba_cadastro)
aba_cadastro.grid(row=4, column=0, padx=10, pady=5, sticky="w")

frame_tipopelo = tk.LabelFrame(aba_cadastro, text="Tipo de Pelo", borderwidth=3, relief="groove")
frame_tipopelo.grid(row=1, column=0, padx=10, pady=5, sticky="ew")

# Criando variável para os Radiobuttons
var_tipopelo = tk.StringVar(value="") # Inicializa sem nenhuma seleção
#
# # ALTERAÇÃO COPITOL
#
#
# # Botões de forma de pagamento (inicialmente desabilitados)
radiobutton_grosso = tk.Radiobutton(frame_tipopelo, text="Grosso Espesso", variable=var_tipopelo, value="Grosso Espesso")
radiobutton_grosso.grid(row=0, column=0, sticky="w")

radiobutton_fino = tk.Radiobutton(frame_tipopelo, text="Fino Suave", variable=var_tipopelo, value="Fino Suave")
radiobutton_fino.grid(row=1, column=0, sticky="w")


# Função para ativar/desativar Radiobuttons
def atualizar_tipopelo():
    global var_tipopelo  # Declare a variável como global
    if var_tipopelo.get() in ["Grosso", "Fino"]:
        # Ativar botões de pagamento
        radiobutton_grosso.config(state="normal")
        radiobutton_fino.config(state="normal")

    else:
        # Resetar e desabilitar botões de pagamento
        var_tipopelo.set("") # Ressetar seleção
        radiobutton_grosso.config(state="disabled")
        radiobutton_fino.config(state="disabled")

# Botão para testar ativação dos Radiobuttons
# btn_ativar = ttk.Button(frame_tipopelo, text="Ativar Seleção", command=atualizar_tipopelo)
# btn_ativar.grid(row=4, column=3, pady=10, sticky="w")


# Função para salvar no banco de dados
def salvar_tipopelo():
    tipopelo_selecionada = var_tipopelo.get()

    if tipopelo_selecionada:
        conn = sqlite3.connect("petshop.db")  # Conectar ao banco de dados
        cursor = conn.cursor()

        # Criar tabela se não existir
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS caracteristicas_pet (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                descricao TEXT
            )
        ''')

        # Inserir dados
        cursor.execute("INSERT INTO caracteristicas_pet (descricao) VALUES (?)", (tipopelo_selecionada,))
        conn.commit()
        conn.close()

        print(f"tipopelo '{tipopelo_selecionada}' salva no banco de dados!")


# tempo previsto para para execução
# Criando um Frame para Tempo de Execução
frame_tempo = tk.LabelFrame(aba_cadastro, text="Tempo de Execução", borderwidth=3, relief='groove')
frame_tempo.grid(row=0, column=1, rowspan=3, padx=10, pady=10, sticky="nsew")


# Ajustando colunas para melhor organização
frame_tempo.grid_columnconfigure(0, weight=1)
frame_tempo.grid_columnconfigure(1, weight=1)


# Frame de Tempo de Execução
ttk.Label(frame_tempo, text="Duração do Serviço:").grid(row=0, column=0, padx=5, pady=2, sticky='w')
entry_duracao = tk.Entry(frame_tempo)
entry_duracao.grid(row=0, column=1, sticky="ew", padx=5, pady=2)

# Tempo Banho
ttk.Label(frame_tempo, text="Tempo Banho:").grid(row=1, column=0, sticky="w", padx=5, pady=2)
entry_banho = tk.Entry(frame_tempo)
entry_banho.grid(row=1, column=1, sticky="ew", padx=5, pady=2)


# Tempo Secagem
ttk.Label(frame_tempo, text="Tempo Secagem:").grid(row=2, column=0, sticky="w", padx=5, pady=2)
entry_secagem = tk.Entry(frame_tempo)
entry_secagem.grid(row=2, column=1, sticky="ew", padx=5, pady=2)


# Hidratação
ttk.Label(frame_tempo, text="Tempo T. Hidratação:").grid(row=3, column=0, sticky="w", padx=5, pady=2)
entry_hidratacao = tk.Entry(frame_tempo)
entry_hidratacao.grid(row=3, column=1, sticky="ew", padx=5, pady=2)


# Tempo Desembolo
ttk.Label(frame_tempo, text="Tempo T. Desembolo:").grid(row=4, column=0, sticky="w", padx=5, pady=2)
entry_desembolo = tk.Entry(frame_tempo)
entry_desembolo.grid(row=4, column=1, sticky="ew", padx=5, pady=2)


# Tempo Tosa Higiênica
ttk.Label(frame_tempo, text="Tempo T. Higiênica:").grid(row=5, column=0, sticky="w", padx=5, pady=2)
entry_higienica = tk.Entry(frame_tempo)
entry_higienica.grid(row=5, column=1, sticky="ew", padx=5, pady=2)

# Tempo Tosa Máquina
ttk.Label(frame_tempo, text="Tempo T. Máquina:").grid(row=6, column=0, sticky="w", padx=5, pady=2)
entry_maquina = tk.Entry(frame_tempo)
entry_maquina.grid(row=6, column=1, sticky="ew", padx=5, pady=2)



# Tempo Tosa Tesoura
ttk.Label(frame_tempo, text="Tempo T. Tesoura:").grid(row=7, column=0, sticky="w", padx=5, pady=2)
entry_tesoura = tk.Entry(frame_tempo)
entry_tesoura.grid(row=7, column=1, sticky="ew", padx=5, pady=2)



# TEMPO TOTAL ATENDIMENTO
ttk.Label(frame_tempo, text="Tempo Total Atendimento:").grid(row=8, column=0, sticky="w", padx=5, pady=2)
entry_total = tk.Entry(frame_tempo)
entry_total.grid(row=8, column=1, sticky="ew", padx=5, pady=2)




#
# # Botão para salvar no banco de dados
# btn_salvar = ttk.Button(frame_tipopelo, text="Salvar Seleção", command=salvar_tipopelo)
# btn_salvar.grid(row=5, column=3, pady=10, sticky="w")






















# Criando um Frame para Cuidados Necessários
aba_cadastro = ttk.Frame(aba_cadastro)
aba_cadastro.grid(row=3, column=0, padx=10, pady=10, sticky="nsew")

frame_cuidados = tk.LabelFrame(aba_cadastro, text="Tipo de Pelo", borderwidth=3, relief="groove")
frame_cuidados.grid(row=3, column=1, padx=10, pady=10, sticky="nsew")

# Criando variável para os Radiobuttons
var_cuidados = tk.StringVar(value="") # Inicializa sem nenhuma seleção
#
# # ALTERAÇÃO COPITOL
#
#
# # Botões de forma de pagamento (inicialmente desabilitados)
# radiobutton_grosso = tk.Radiobutton(frame_tipopelo, text="Grosso Espesso", variable=var_tipopelo, value="Grosso Espesso")
# radiobutton_grosso.grid(row=1, column=1, sticky="w")
#
# radiobutton_fino = tk.Radiobutton(frame_tipopelo, text="Fino Suave", variable=var_tipopelo, value="Fino Suave")
# radiobutton_fino.grid(row=2, column=1, sticky="w")
#
#
# # Função para ativar/desativar Radiobuttons
# def atualizar_tipopelo():
#     global var_tipopelo  # Declare a variável como global
#     if var_tipopelo.get() in ["Grosso", "Fino"]:
#         # Ativar botões de pagamento
#         radiobutton_grosso.config(state="normal")
#         radiobutton_fino.config(state="normal")
#
#     else:
#         # Resetar e desabilitar botões de pagamento
#         var_tipopelo.set("") # Ressetar seleção
#         radiobutton_grosso.config(state="disabled")
#         radiobutton_fino.config(state="disabled")
#
# # Botão para testar ativação dos Radiobuttons
# # btn_ativar = ttk.Button(frame_tipopelo, text="Ativar Seleção", command=atualizar_tipopelo)
# # btn_ativar.grid(row=4, column=3, pady=10, sticky="w")
#
#
# # Função para salvar no banco de dados
# def salvar_tipopelo():
#     tipopelo_selecionada = var_tipopelo.get()
#
#     if tipopelo_selecionada:
#         conn = sqlite3.connect("petshop.db")  # Conectar ao banco de dados
#         cursor = conn.cursor()
#
#         # Criar tabela se não existir
#         cursor.execute('''
#             CREATE TABLE IF NOT EXISTS caracteristicas_pet (
#                 id INTEGER PRIMARY KEY AUTOINCREMENT,
#                 descricao TEXT
#             )
#         ''')
#
#         # Inserir dados
#         cursor.execute("INSERT INTO caracteristicas_pet (descricao) VALUES (?)", (tipopelo_selecionada,))
#         conn.commit()
#         conn.close()
#
#         print(f"tipopelo '{tipopelo_selecionada}' salva no banco de dados!")

# Executar a interface gráfica


# CONSULTA CONSULTA CONSULTA
# Usando a instância existente de root
root = tk.Tk()  # Esta linha deve ser removida se a janela principal já existir
app = App(root)
root.mainloop()  # Esta linha deve estar ao final, chamando o loop principal da janela
janela.mainloop()
















TODOS OS CÓDIGOS LIMPO EXTRAINDO COMENTADOS.


APÓS ALTERAR PARA INCLUIR LABELS COM VALORES DOS CHECKBUTTONS



import tkinter as tk
from tkinter import ttk, Entry, BooleanVar
from PIL import Image, ImageTk
import os
from tkcalendar import DateEntry
import sqlite3
import time


# Iniciando a janela
janela = tk.Tk()
janela.title("Cadastro Pet Shop")

# Criando as abas
aba_principal = ttk.Notebook(janela)


#aba_config = ttk.Frame(janela)
aba_config = ttk.Frame(aba_principal)
aba_principal.add(aba_config, text="Configuração")


aba_config.grid(padx=10, pady=10)  # Adicionando padding para melhor visualização
janela.geometry("1400x600")  # Ajuste o tamanho da janela conforme necessário
janela.state('zoomed')  # Abre em tela cheia

# Criando um Frame para a barra de rolagem
scrollable_frame = ttk.Frame(janela)
scrollable_frame.grid(row=0, column=0, sticky="nsew")

# Configuração da janela
janela.grid_rowconfigure(0, weight=1)
janela.grid_columnconfigure(0, weight=1)

scrollable_frame.grid_rowconfigure(0, weight=1)
scrollable_frame.grid_columnconfigure(0, weight=1)

# Criando o Canvas e as Scrollbars
canvas = tk.Canvas(scrollable_frame)
vertical_scrollbar = ttk.Scrollbar(scrollable_frame, orient="vertical", command=canvas.yview)
horizontal_scrollbar = ttk.Scrollbar(scrollable_frame, orient="horizontal", command=canvas.xview)

# Criando o Frame dentro do Canvas
inner_frame = ttk.Frame(canvas)

# Ajustando a rolagem
inner_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))

# Criando a janela dentro do Canvas
canvas.create_window((0, 0), window=inner_frame, anchor="nw")

# Posicionando o Canvas e as Scrollbars
canvas.grid(row=0, column=0, sticky="nsew")
vertical_scrollbar.grid(row=0, column=1, sticky="ns")
horizontal_scrollbar.grid(row=1, column=0, sticky="ew")

# Configurando as barras de rolagem
canvas.configure(yscrollcommand=vertical_scrollbar.set)
canvas.configure(xscrollcommand=horizontal_scrollbar.set)

# Garantindo que a rolagem funcione corretamente
def ajustar_tamanho_canvas(event):
    canvas.configure(scrollregion=canvas.bbox("all"))

inner_frame.bind("<Configure>", ajustar_tamanho_canvas)

# Adicione alguns widgets ao inner_frame como exemplo
for i in range(50):
    ttk.Label(inner_frame, text=f"Item {i}").grid(row=i, column=0, sticky="w")
# Configurar a largura da coluna do inner_frame para permitir a rolagem horizontal
inner_frame.grid_columnconfigure(0, minsize=300)  # Ajuste o tamanho conforme necessário

# Definindo o tamanho do Canvas
canvas.config(height=700)  # Aumente a altura do Canvas se necessário
canvas.config(width=800) # Aumente a largura do Canvas se necessário

# Criando as abas (Notebook)
notebook = ttk.Notebook(janela)
notebook.grid(row=0, column=0, sticky='nsew')  # Use grid corretamente

# Criando aba de configuração
aba_config = ttk.Frame(notebook)
notebook.add(aba_config, text="Configuração")

# Criando aba financeira

# Função para criar uma aba com barra de rolagem
# def criar_aba_com_rolagem(parent, aba_nome):
#     # Criando um Frame para a barra de rolagem
#     scrollable_frame = ttk.Frame(parent)
#     scrollable_frame.grid(row=0, column=0, sticky="nsew")

#(aba_config, "Financeiro")


# Criando aba de serviços
aba_servicos = ttk.Frame(notebook)
notebook.add(aba_servicos, text="Serviços")

# Criando aba de relatórios
aba_relatórios = ttk.Frame(notebook)
notebook.add(aba_relatórios, text="Relatórios")


# Criando aba Cadastro
# Função para criar uma aba com barra de rolagem
# # Função para criar uma aba com barra de rolagem
# def criar_aba_com_rolagem(parent, aba_nome):
#     # Criando o Canvas e as Scrollbars
#     canvas = tk.Canvas(parent)
#     vertical_scrollbar = ttk.Scrollbar(parent, orient="vertical", command=canvas.yview)
#     horizontal_scrollbar = ttk.Scrollbar(parent, orient="horizontal", command=canvas.xview)
#
#     # Criando o Frame dentro do Canvas
#     inner_frame = ttk.Frame(canvas)
#
#     # Ajustando a rolagem
#     inner_frame.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))
#
#     # Criando a janela dentro do Canvas
#     canvas.create_window((0, 0), window=inner_frame, anchor="nw")
#
#     # Posicionando o Canvas e as Scrollbars
#     canvas.grid(row=0, column=0, sticky="nsew")
#     vertical_scrollbar.grid(row=0, column=1, sticky="ns")
#     horizontal_scrollbar.grid(row=1, column=0, sticky="ew")
#
#     # Configurando as barras de rolagem
#     canvas.configure(yscrollcommand=vertical_scrollbar.set)
#     canvas.configure(xscrollcommand=horizontal_scrollbar.set)
#
#     # Adicione alguns widgets ao inner_frame como exemplo
#     for i in range(50):
#         ttk.Label(inner_frame, text=f"{aba_nome} Item {i}").grid(row=i, column=0, sticky="w")
#
#     # Configurar a largura da coluna do inner_frame para permitir a rolagem horizontal
#     inner_frame.grid_columnconfigure(0, minsize=300)  # Ajuste o tamanho conforme necessário
#
#     # Definindo o tamanho do Canvas
#     canvas.config(height=700)  # Aumente a altura do Canvas se necessário
#     canvas.config(width=800)   # Aumente a largura do Canvas se necessário
#
# # Criando as abas (Notebook)
# notebook = ttk.Notebook(janela)
# notebook.grid(row=0, column=0, sticky='nsew')  # Use grid corretamente
#
# # Criando as abas com rolagem
# aba_config = ttk.Frame(notebook)
# notebook.add(aba_config, text="Configuração")
# criar_aba_com_rolagem(aba_config, "Configuração")
#
# aba_financeiro = ttk.Frame(notebook)
# notebook.add(aba_financeiro, text="Financeiro")
# criar_aba_com_rolagem(aba_financeiro, "Financeiro")
#
# aba_servicos = ttk.Frame(notebook)
# notebook.add(aba_servicos, text="Serviços")
# criar_aba_com_rolagem(aba_servicos, "Serviços")
#
# aba_relatórios = ttk.Frame(notebook)
# notebook.add(aba_relatórios, text="Relatórios")
# criar_aba_com_rolagem(aba_relatórios, "Relatórios")


# def criar_aba_com_rolagem(aba):
#     aba.grid_rowconfigure(0, weight=1)
#     aba.grid_columnconfigure(0, weight=1)
#
#     # Criar canvas e barras de rolagem
#     canvas = tk.Canvas(aba)
#     scrollbar_y = ttk.Scrollbar(aba, orient="vertical", command=canvas.yview)
#     scrollbar_x = ttk.Scrollbar(aba, orient="horizontal", command=canvas.xview)
#
#     canvas.configure(yscrollcommand=scrollbar_y.set, xscrollcommand=scrollbar_x.set)
#
#     canvas.grid(row=0, column=0, sticky="nsew")
#     scrollbar_y.grid(row=0, column=1, sticky="ns")
#     scrollbar_x.grid(row=1, column=0, sticky="ew")
#
#     # Frame interno onde você coloca o conteúdo
#     frame_conteudo = ttk.Frame(canvas)
#     canvas.create_window((0, 0), window=frame_conteudo, anchor="nw")
#
#     # Atualizar a área rolável sempre que o conteúdo for alterado
#     def on_configure(event):
#         canvas.configure(scrollregion=canvas.bbox("all"))
#
#     frame_conteudo.bind("<Configure>", on_configure)
#
#     return frame_conteudo
#
# #
# aba_cadastro = ttk.Frame(notebook)
# notebook.add(aba_cadastro, text="Configuração")
# frame_cadastro = criar_aba_com_rolagem(aba_cadastro)
#
# # Agora você pode adicionar widgets no frame_config!
# ttk.Label(frame_cadastro, text="Olá, com rolagem!").grid(row=0, column=0)

aba_cadastro = ttk.Frame(notebook)
notebook.add(aba_cadastro, text="Cadastro")
#criar_aba_com_rolagem(aba_cadastro)


# Frame de configuração
# Variável global para armazenar o porte selecionado
var_porte = tk.StringVar(value="Pequeno")  # Valor padrão
frame_config = ttk.Frame(aba_config)
frame_config.grid(pady=10)


base_path = "C:/Users/VEIRANO/PycharmProjects/ModuloTkinter/Planilha Controle Ipojucão/imagensipojucao"

# Dicionário para armazenar imagens dos portes
imagens_portes = {
    "pequeno": "pequeno.jpg",
    "médio": "medio.jpg",
    "grande": "grande.jpg",
    "maior": "maior.jpg"
}

# Dicionário para armazenar imagens das raças
imagens_racas = {
    'Schitzu':'schitzu.jpg','Lhasa Apso':'lhasa_apso.jpg','Maltês':'maltes.jpg','Yorkshire':'yorkshire.jpg','Dachshund':'dachshund.jpg',
    'Cavalier King Charles Spaniel':'cavalier_king_charles_spaniel.jpg','Biewer Terrier':'biewer_terrier.jpg','Bulldog Francês':'bulldog_frances.jpg',
    'Pug':'pug.jpg','Chihuahua':'chihuahua.jpg','Cocker Spaniel':'cocker_spaniel.jpg','Papillon':'papillon.jpg','Spitz Alemao':'spitz_alemao.jpg',
    'Pinscher':'pinscher.jpg','Poodle':'poodle.jpg','Jack Russell Terrier':'jack_russell_terrier.jpg','Galgo Italiano':'galgo_italiano.jpg',
    'Pequinês':'pequines.jpg','Bichon Frise':'bichon_frise.jpg','Boston Terrier':'boston_terrier.jpg','Fox Paulistinha':'fox_paulistinha.jpg',
    'American Pit Bull Terrier':'american_pit_bull_terrier.jpg','Australian Cattle Dog':'australian_cattle.jpg','Australian Shepherd':'australian_shepherd.jpg',
    'Petit Basset Griffon Vendéen':'petit_basset_griffon_vendéen.jpg','Basset Hound':'basset_hound.jpg','Bulldog Campeiro':'bulldog_campeiro.jpg','Bulldog':'bulldog.jpg',
    'Bulldog Inglês':'bulldog_ingles.jpg','Bull Terrier':'bull_terrier.jpg','Basset Fulvo':'basset_fulvo.jpg','Boxer':'boxer.jpg',
    'Clumber Spaniel':'clumber_spaniel.jpg','Cocker Americano':'cocker_americano.jpg','Cocker Inglês':'cocker_ingles.jpg',
    'Flat Coated Retriever':'flat_coated_retriever.jpg','Pastor de Shetland':'pastor_de_shetland.jpg','Pumi':'pumi.jpg',
    'Schnauzer Standard':'schnauzer_standard.jpg','Shar Pei':'shar_pei.jpg','Spaniel Bretão':'spaniel_bretao.jpg','Spaniel Francês':'spaniel_frances.jpg',
    'Spitz Japonês':'spitz_japones.jpg','Springer Spaniel':'springer_spaniel.jpg','Springer Spaniel Inglês':'springer_spaniel_ingles.jpg',
    'Terrier Tibetano':'terrier_tibetano.jpg','American Bully':'american_bully.jpg','SRD Médio':'s_r_d_medio.jpg','Dogo Argentino':'dogo_argentino.jpg',
    'Dálmata':'dalmatian.jpg','Weimaraner':'weimaraner.jpg','Mastim Tibetano':'mastim_tibetano.jpg','Leonberger':'leonberger.jpg',
    'Pastor Australiano':'pastor_australiano.jpg','Setter Irlandês':'setter_irlandes.jpg','Bulmastife':'bulmastife.jpg','Mastim Napolitano':'mastim_napolitano.jpg',
    'Dogue de Bordeaux':'dogue_de_bordeaux.jpg','Cão de Santo Humberto':'cao_de_santo_humberto.jpg','Rhodesian Ridgeback':'rhodesian_ridgeback.jpg',
    'Boiadeiro da Flandres':'boiadeiro_da_flandres.jpg','Bearded Collie':'bearded_collie.jpg','Bichon Bolonhês':'bichon_bolonhes.jpg','Basenji':'basenji.jpg',
    'Boerboel':'boerboel.jpg','Pastor do Cáucaso':'pastor_do_caucaso.jpg','Veadeiro Pampeano':'veadeiro_pampeano.jpg','Buhund Norueguês':'buhund_noruegues.jpg',
    'Basset Artesiano Normando':'basset_artesiano_normando.jpg','Braco de Auvernia':'braco_de_auvernia.jpg','Galgo Inglês':'galgo_ingles.jpg',
    'Pastor Belga':'pastor_belga.jpg','Mastiff':'mastiff.jpg','Bernese':'bernese.jpg','Akita':'akita.jpg','Bloodhound':'bloodhound.jpg','Pit Bull':'pit_bull.jpg',
    'Fila Brasileiro':'fila_brasileiro.jpg','Chow Chow':'chow_chow.jpg','Doberman':'doberman.jpg','Chip Dog':'chip_dog.jpg',
}


# ADICIONANDO CARACTERÍSTICAS DO PET
# Dicionário de características das raças
caracteristicas_racas = {
    "Chihuahua": {
        "peso": "1 a 3 kg",
        "tamanho": "15 a 23 cm",
        "pelos": "Curto",
        "temperamento": "Dócil",
        "imagem": "chihuahua.png"  # Adicione o caminho para a imagem
    },
    "Labrador": {
        "peso": "25 a 36 kg",
        "tamanho": "55 a 62 cm",
        "pelos": "Curto e grosso",
        "temperamento": "Dócil",
        "imagem": "labrador.png"
    },
    "Bulldog": {
        "peso": "18 a 25 kg",
        "tamanho": "30 a 40 cm",
        "pelos": "Curto",
        "temperamento": "Agressivo",
        "imagem": "bulldog.png"
    }
    # Adicione mais raças conforme necessário
}

class App:
    def __init__(self, root):
        self.root = root
        self.root.title("Cadastro PET SHOP")

        # Criação do Notebook para as abas
        self.notebook = ttk.Notebook(self.root)
        self.notebook.grid(row=0, column=0, sticky='nsew')  # Usando grid para o Notebook

        # Criação da aba_config
        self.aba_config = ttk.Frame(self.notebook)
        self.notebook.add(self.aba_config, text='Configuração')

        # Combobox de Raça
        self.combobox_raca = ttk.Combobox(self.aba_config, values=list(caracteristicas_racas.keys()))
        self.combobox_raca.grid(row=0, column=0, padx=10, pady=10)
        self.combobox_raca.bind("<<ComboboxSelected>>", self.atualizar_caracteristicas)

        # Campo de texto para características
        self.texto_caracteristicas = tk.Text(self.aba_config, height=10, width=50)
        self.texto_caracteristicas.grid(row=1, column=0, padx=10, pady=10)  # Mudado para row=1, column=0

        # Configuração de expansão
        self.root.grid_rowconfigure(0, weight=1)
        self.root.grid_columnconfigure(0, weight=1)

    def atualizar_caracteristicas(self, event):
        raca_selecionada = self.combobox_raca.get()
        if raca_selecionada in caracteristicas_racas:
            info = caracteristicas_racas[raca_selecionada]
            self.texto_caracteristicas.delete(1.0, tk.END)  # Limpa o campo de texto
            self.texto_caracteristicas.insert(tk.END, f"Peso: {info['peso']}\n")
            self.texto_caracteristicas.insert(tk.END, f"Tamanho: {info['tamanho']}\n")
            self.texto_caracteristicas.insert(tk.END, f"Pelos: {info['pelos']}\n")
            self.texto_caracteristicas.insert(tk.END, f"Temperamento: {info['temperamento']}")



# ADICIONANDO CARACTERÍSTICAS DO PET




var_porte = tk.StringVar()
var_raca = tk.StringVar()


# Funções para atualizar imagens
def update_porte_image(event=None):
    porte = var_porte.get().strip().lower()
    image_path = os.path.join(base_path, imagens_portes.get(porte, ''))
    if os.path.exists(image_path):
        img = Image.open(image_path).resize((200, 200))
        img_tk = ImageTk.PhotoImage(img)
        label_imagem.config(image=img_tk)
        label_imagem.image = img_tk
    else:
        label_imagem.config(text="Imagem do porte não encontrada", image="")
        label_imagem.image = None


# Função para atualizar a lista de raças
def atualizar_lista_racas(event=None):
    porte = var_porte.get().strip().lower()
    # Modificado em 24/06/2025 para compartilhar com a aba_financeiro
    racas = list(dados_pet.get(porte.capitalize(), {}).get("raças", []))
    combobox_raca["values"] = racas
    combobox_raca.set("Selecione uma raça")
    # Modificado em 24/06/2025 para compartilhar com a aba_financeiro
    print(f"Selecionado Porte: {porte}")  # Debug
    time.sleep(0.5)  # Pausa para garantir atualização

    # Modificado em 24/06/2025 para compartilhar com a aba_financeiro
    # Atualiza os valores na aba financeira
    atualizar_valores()
    # Modificado em 24/06/2025 para compartilhar com a aba_financeiro


    #racas = dados_pet.get(porte, {}).get("raças", [])
    racas = list(dados_pet.get(porte.capitalize(), {}).get("raças", [])) # Capitalize para correspondência
    combobox_raca["values"] = racas
    combobox_raca.set("Selecione uma raça")
    update_porte_image(event)

    if racas:
        combobox_raca.set(racas[0])  # Define a primeira raça como padrão
        update_raca_image()  # Atualiza a imagem da raça assim que uma raça é definida
    else:
        combobox_raca.set("Nenhuma raça disponível")

# Função para atualizar a imagem da raça
def update_raca_image(event=None):
    #raca = combobox_raca.get().strip()
    raca = var_raca.get().strip()
    # Modificado em 24/06/2025 para compartilhar com a aba_financeiro
    # Atualiza os valores na aba financeira
    atualizar_valores()
    # Modificado em 24/06/2025 para compartilhar com a aba_financeiro

    image_path = os.path.join(base_path, imagens_racas.get(raca, ''))
    print(f"Selecionado Raça: {raca}")  # Debug
    print(f"Imagem do porte em: {image_path}")  # Debug
    time.sleep(0.9)  # Pausa para garantir que a variável foi atualizada

    # Verifique se o nome do arquivo não está vazio
    if not imagens_racas.get(raca):
        print(f"Nome do arquivo não encontrado para a raça: {raca}")  # Debug
        time.sleep(0.9)  # Pausa para garantir que a variável foi atualizada
        label_imagem.config(text="Imagem da raça não encontrada", image="")
        time.sleep(0.5)  # Pausa para garantir que a variável foi atualizada
        label_imagem.image = None
        return

    print(f"Imagem do porte em: {image_path}")  # Debug

    if os.path.exists(image_path):
        img = Image.open(image_path).resize((200, 200))
        img_tk = ImageTk.PhotoImage(img)
        label_imagem.config(image=img_tk)
        label_imagem.image = img_tk
    else:
        label_imagem.config(text="Imagem da raça não encontrada", image="")
        label_imagem.image = None
        #     except Exception as e:
        #     print(f"Erro ao carregar imagem da raça: {e}")
        # else:
        label_imagem.config(text="Imagem não encontrada", image="")
        label_imagem.image = None

# Dados centralizados (raças e preços)
dados_pet = {
    "Pequeno": {
        "raças": ['Schitzu', 'Lhasa Apso', 'Maltes', 'Yorkshire', 'Dachshund', 'Cavalier King Charles Spaniel',
                  'Biewer Terrier', 'Bulldog Francês', 'Pug', 'Chihuahua', 'Cocker Spaniel', 'Papillon',
                  'Spitz Alemao', 'Pinscher', 'Poodle', 'Jack Russell Terrier', 'Galgo Italiano', 'Pequinês',
                  'Bichon Frise', 'Boston Terrier', 'Fox Paulistinha', 'Petit Basset Griffon Vendéen'],
        "preços": {"Banho": 55, "Hidratação": 20, "Desembolo": 20, "Remoção de Pelos": 20, "Corte de Unhas": 15,
                   "Escovação de Dentes": 15, "Tosa Higiênica": 20, "Tosa na Máquina": 115,
                   "Tosa na Tesoura": 125, "Leva e Trás": 10},
    },
    "Médio": {
        "raças": ['American Bully', 'Australian Cattle Dog', 'Basset Hound',
                  'Bulldog Campeiro', 'Bulldog', 'Bulldog Ingles', 'Bull Terrier', 'Basset Fulvo',
                  'Boxer', 'Clumber Spaniel', 'Cocker Americano', 'Cocker Ingles', 'Flat Coated Retriever',
                  'Pastor de Shetland', 'Pumi', 'Schnauzer Standard', 'Shar Pei', 'Spaniel Bretao', 'Spaniel Frances',
                  'Spitz Japones', 'Spriger Spaniel Ingles', 'Terrier Tibetano', 'S.R.D. Médio'],
        "preços": {"Banho": 65, "Hidratação": 20, "Desembolo": 20, "Remoção de Pelos": 20, "Corte de Unhas": 15,
                   "Escovação de Dentes": 15, "Tosa Higiênica": 20, "Tosa na Máquina": 115,
              "Tosa na Tesoura": 125, "Leva e Trás": 10},
    },
    "Grande": {
        "raças": ['Pastor Alemao', 'Dogue Alemao', 'Terra Nova', 'Rottweiler', 'Sao-Bernardo', 'Labrador Retriever',
                  'Golden Retriever', 'Fila brasileiro', 'Cane corso', 'Border collie', 'Boiadeiro de Berna',
                  'Akita Inu', 'Mastim Ingles', 'Husky Siberiano', 'Dogo argentino', 'Dalmata', 'Weimaraner',
                  'Bull terrier', 'Mastim tibetano', 'Leonberger', 'Pastor australiano', 'Setter irlandes',
                  'Bulmastife', 'Mastim napolitano', 'Dogue de bordeus', 'Bulmastife', 'cao de Santo Humberto',
                  'Rhodesian ridgeback', 'Boiadeiro da Flandres', 'Bearded collie', 'Bichon bolonhes', 'Basenji',
                  'Boerboel', 'Pastor do caucaso', 'Veadeiro Pampeano', 'Buhund noruegues',
                  'Basset artesiano normando', 'Braco de Auvernia', 'Galgo Ingles', 'Pastor Belga', 'Mastiff',
                  'Bernese', 'Akita', 'Bloodhound', 'Australian Shepherd'],
        "preços": {"Banho": 70, "Hidratação": 20, "Desembolo": 20, "Remoção de Pelos": 20, "Corte de Unhas": 15,
                   "Escovação de Dentes": 15, "Tosa Higiênica": 20, "Tosa na Máquina": 115,
                "Tosa na Tesoura": 125, "Leva e Trás": 10},
    },
    "Maior": {
        "raças": ['American Pit Bull Terrier', 'Fila Brasileiro', 'Chow Chow', 'Doberman', 'Chip-dog', 'American Pit Bul terrier',
                  'Chow-chow'],
        "preços": {"Banho": 120, "Hidratação": 20, "Desembolo": 20, "Remoção de Pelos": 80, "Corte de Unhas": 50,
               "Escovação de Dentes": 55, "Tosa Higiênica": 75, "Tosa na Máquina": 85,
               "Tosa na Tesoura": 100, "Leva e Trás": 10},
    },
}

# Criando Combobox para seleção de porte
ttk.Label(aba_config, text="Selecione o Porte:").grid(row=0, column=0, padx=10, pady=5)
combobox_porte = ttk.Combobox(aba_config, textvariable=var_porte, values=list(dados_pet.keys()), state="readonly")
combobox_porte.grid(row=1, column=0, padx=10, pady=5)
combobox_porte.bind("<<ComboboxSelected>>", lambda event: [atualizar_lista_racas(event), update_porte_image(event)])



# Criando Combobox para seleção de raça
ttk.Label(aba_config, text="Selecione a Raça:").grid(row=0, column=1, padx=10, pady=5, sticky="w")
combobox_raca = ttk.Combobox(aba_config, textvariable=var_raca, state="readonly")
combobox_raca.grid(row=1, column=1, padx=10, pady=5, sticky="ew")
combobox_raca.bind("<<ComboboxSelected>>", update_raca_image)


# Configurando a coluna para expandir
aba_config.grid_columnconfigure(0, weight=1)

combobox_raca.bind("<<ComboboxSelected>>", update_raca_image)



# Criando Label para exibir imagens
label_imagem = tk.Label(aba_config, text="Nenhuma imagem disponível", width=180, height=180)
label_imagem.grid(row=2, column=0, columnspan=4, padx=10, pady=10)


# Adicionando `trace_add` para ativar automaticamente a atualização da imagem e das raças
var_porte.trace_add("write", lambda *args: atualizar_lista_racas(event=None))
var_porte.trace_add("write", lambda *args: update_porte_image(event=None))


# Criando o frame principal para dados cadastrais
frame_cadastro = ttk.LabelFrame(inner_frame, text="Dados Cadastrais")
frame_cadastro.grid(row=7, column=0, padx=10, pady=10, sticky="nsew")


# Criando o frame principal para Serviços
frame_servicos = ttk.LabelFrame(inner_frame, text="Serviços")
frame_servicos.grid(row=5, column=0, padx=10, pady=10, sticky="nsew")


# Criando o frame principal para informações financeiras

# Criando o frame principal para Relatórios
frame_relatorios = ttk.LabelFrame(inner_frame, text="Informações Financeiras")
frame_relatorios.grid(row=8, column=4, padx=10, pady=10, sticky="nsew")


# ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO ATENÇÃO
#     AQUI ESTÃO AS VARIÁVES QUE IRÃO SALVAR TODAS AS INFORMAÇÕES INSERIDAS EM TODAS AS GUIAS,
#     PARA CADA INFORMAÇÃO INSERIDA NAS DIVERSAS GUIAS, PRECISA INCLUIR UMA tk.StringVar() PARA SALVAR NO BANCO DE DADOS
#     StringVar PARA SALVAR RADIOBUTTONS, tk.BooleanVar() PARA SALVAR CHECKBUTTONS E DateEntry PARA SALVAR DATAS.
#     ATENÇÃO, NÃO ESQUECER DE INSERIR ESSES COMANDOS PARA CADA NOVA INFORMAÇÃO INCREMENTADA NO CÓDIGO.

# Criando variáveis para entrada de dados

var_nome_pet = tk.StringVar()
var_idade_anos = tk.StringVar()
var_idade_meses = tk.StringVar()
var_descricao = tk.StringVar()  # Para os Radiobuttons
var_tipopelo = tk.StringVar()
var_check_servico1 = tk.BooleanVar() # Para os Checkbutons
var_check_servico2 = tk.BooleanVar()


# **Função única para salvar todos os dados, incluindo as datas**
def salvar_todos_dados():
    # Capturar os valores inseridos
    nome_pet = var_nome_pet.get()
    idade_anos = var_idade_anos.get()
    idade_meses = var_idade_meses.get()
    descricao_pelagem = var_descricao.get()
    servico_banho = var_check_servico1.get()
    servico_tosa = var_check_servico2.get()
    data_selecionada = data_cadastro.get_date().strftime("%Y-%m-%d")  # Formato padrão para banco

    # Conectar ao banco de dados
    conn = sqlite3.connect("petshop.db")
    cursor = conn.cursor()

    # Criar tabela se não existir
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS cadastro_pet (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nome TEXT,
            idade_anos TEXT,
            idade_meses TEXT,
            descricao_pelagem TEXT,
            servico_banho BOOLEAN,
            servico_tosa BOOLEAN,
            data_cadastro DATE
        )
    ''')

    # Inserir dados
    cursor.execute("INSERT INTO cadastro_pet (nome, idade_anos, idade_meses, descricao_pelagem, servico_banho, servico_tosa, data_cadastro) VALUES (?, ?, ?, ?, ?, ?, ?)",
                   (nome_pet, idade_anos, idade_meses, descricao_pelagem, servico_banho, servico_tosa, data_selecionada))

    conn.commit()
    conn.close()

    print(f"Todos os dados foram salvos com sucesso! Data: {data_selecionada}")

# Criando botão central para salvar todas as informações
btn_salvar_tudo = ttk.Button(janela, text="Salvar Tudo", command=salvar_todos_dados)
btn_salvar_tudo.grid(row=1, column=0, pady=20)


notebook.add(aba_cadastro, text="Cadastro")


# No início do seu código
var_desconto_fixo = tk.BooleanVar()
var_desconto_percentual = tk.BooleanVar()
var_status_pagamento = tk.StringVar(value="")
var_pagamento = tk.StringVar(value="")
var_condicao_pagamento = tk.StringVar(value="")
var_data_pagamento = tk.StringVar(value="")
var_calendario_cadastro = tk.StringVar(value="")
var_atualizar_pagamento = tk.StringVar(value="")
var_calendario_financeiro = tk.StringVar(value="")
# ... e outras variáveis que você deseja tornar globais.



# Função para ativar/desativar métodos de pagamento
def atualizar_pagamento():
    global var_pagamento  # Declare a variável como global
    if var_status_pagamento.get() == "pago":
        # Ativar botões de pagamento
        radiobutton_pix.config(state="normal")
        radiobutton_debito.config(state="normal")
        radiobutton_credito.config(state="normal")
        radiobutton_dinheiro.config(state="normal")
    else:
        # Resetar e desabilitar botões de pagamento
        var_pagamento.set("")
        radiobutton_pix.config(state="disabled")
        radiobutton_debito.config(state="disabled")
        radiobutton_credito.config(state="disabled")
        radiobutton_dinheiro.config(state="disabled")



# Frame para seleção de porte e raça
frame_cabecalho = ttk.LabelFrame(inner_frame, text="Seleção de Porte e Raça")
frame_cabecalho.grid(row=1, column=0, padx=10, pady=10, sticky="nw")

# 🚀🚀🚀🚀🚀 COMBOBOX_PORTE ANTERIOR A CRIAÇÃO DE ABAS



# Criando um Frame para serviços
frame_disponiveis = ttk.LabelFrame(frame_servicos, text="Serviços Disponíveis")
frame_disponiveis.grid(row=10, column=1, padx=10, pady=5, sticky="nw")

scrollable_frame.rowconfigure(1, weight=1)  # Para o row 1 (serviços)

# Frame para Data do Serviço
frame_calendario_servico = ttk.LabelFrame(frame_servicos, text="Data do Serviço")
frame_calendario_servico.grid(row=11, column=0, padx=10, pady=10, sticky="w")
calendario_servico = DateEntry(frame_servicos, year=2025, locale='pt_br')
calendario_servico.grid(row=12, column=0 , padx=10, pady=10, sticky='nsew')


# Criando Checkbuttons para serviços
variaveis_servicos = {}
servicos_disponiveis = ["Banho", "Hidratação", "Desembolo", "Remoção de Pelos", "Corte de Unhas",
                        "Escovação de Dentes", "Tosa Higiênica", "Tosa na Máquina", "Tosa na Tesoura", "Leva e Trás"]

for i, servico in enumerate(servicos_disponiveis):
    variaveis_servicos[servico] = tk.BooleanVar()
    check_servico = ttk.Checkbutton(frame_servicos, text=servico, variable=variaveis_servicos[servico],)
    check_servico.grid(row=i, column=0, sticky="w")


scrollable_frame.rowconfigure(2, weight=1)  # Para o row 2 (abatimentos)



#Calendário Cadastrar Item
def cadastrar_item():
    data = calendario_cadastro.get_date()
    print(f"Data cadastrada  {data}")  # Substitua por lógica de salvar o item
    label_resultado.config(text=f"Data cadastrada  {data}")

# Configuração para expandir corretamente
#aba_cadastro.columnconfigure(0, weight=1)

# Frame para Data do Cadastro
frame_calendario_cadastro = ttk.LabelFrame(aba_cadastro, text="Calendario Cadastro")
frame_calendario_cadastro.grid(row=0, column=0, padx=10, pady=10, sticky="w")
calendario_cadastro = DateEntry(frame_calendario_cadastro, year=2025, locale='pt_br')
calendario_cadastro.grid(row=0, column=0 , padx=10, pady=10, sticky='nsew')

# Criando um Frame para Dados Cadastrais
# frame_cadastramento = ttk.LabelFrame(aba_cadastro, text="Dados dos Cadastrais")
# frame_cadastramento.grid(row=2, column=0, columnspan=2, padx=5, pady=5, sticky="nsew")

def criar_frame_cadastro(parent, text="Dados Cadastrais"):
    frame_cadastro = ttk.LabelFrame(parent, )
    frame_cadastro.grid(row=1, column=0, padx=10, pady=10, sticky="nsew")

    frame_cadastro = ttk.Label(aba_cadastro, "Dados Cadastrais").grid(row=0, column=0, padx=5, pady=5, sticky="nsew")

    # nome Pet
    ttk.Label(aba_cadastro, text="Nome do Pet", anchor='w').grid(row=1, column=0, padx=10, pady=5, sticky='ew')
    entry_nome = tk.Entry(frame_cadastramento)
    entry_nome.grid(row=0, column=1, padx=10, pady=10, sticky='ew')

    # idade
    ttk.Label(aba_cadastro, text="Idade Anos").grid(row=2, column=0, padx=10, pady=10, sticky='w')
    entry_idadedopetanos = ttk.Entry(aba_cadastro)
    entry_idadedopetanos.grid(row=2, column=1, padx=10, pady=10, sticky='nsew')

    ttk.Label(aba_cadastro, text="Meses").grid(row=3, column=0, padx=10, pady=5, sticky='w')
    entry_idadedopetmeses = ttk.Entry(aba_cadastro)
    entry_idadedopetmeses.grid(row=2, column=1, padx=10, pady=5, sticky='ew')

    # Tutor 1
    ttk.LabelFrame(aba_cadastro, text="Tutor 1").grid(row=4, column=0, padx=10, pady=10, sticky='w')
    entry_tutor_1 = tk.Entry(aba_cadastro)
    entry_tutor_1.grid(row=0, column=1, padx=10, pady=5, sticky='ew')

    # telefone1
    ttk.Label(aba_cadastro, text="Telefone Tutor 1", anchor='e').grid(row=5, column=0, padx=10, pady=5, sticky='w')
    entry_telefone_1 = tk.Entry(aba_cadastro)
    entry_telefone_1.grid(row=1, column=1, padx=10, pady=5, sticky='ew')
    # email Tutor1
    ttk.Label(aba_cadastro, text="email Tutor 1", anchor='e').grid(row=2, column=0, padx=10, pady=10, sticky='w')
    entry_email_tutor_1 = tk.Entry(aba_cadastro)
    entry_email_tutor_1.grid(row=2, column=1, padx=10, pady=10, sticky='ew')

    #tutor 2
    # ttk.Label(aba_cadastro, text="Tutor 2", anchor='e').grid(row=3, column=0, padx=10, pady=5, sticky='ew')
    # # Campo de entrada (Entry)
    # entry_tutor_2 = tk.Entry(aba_cadastro)
    # entry_tutor_2.grid(row=7, column=1, padx=10, pady=10, sticky='ew')

    # Tutor 2
    frame_tutor2 = ttk.LabelFrame(aba_cadastro, text="Tutor 2")
    frame_tutor2.grid(row=3, column=0, padx=10, pady=10, sticky="ew")

    ttk.Label(frame_tutor2, text="Nome do Tutor").grid(row=0, column=0, padx=10, pady=5, sticky='w')
    entry_tutor_2 = tk.Entry(frame_tutor2)
    entry_tutor_2.grid(row=0, column=1, padx=10, pady=5, sticky='ew')

    #telefone 2
    ttk.Label(frame_tutor2, text="Telefone Tutor 2", anchor='e').grid(row=1, column=1, padx=10, pady=5, sticky='ew')
    # Campo de entrada (Entry)
    entry_telefone_2 = tk.Entry(aba_cadastro)
    entry_telefone_2.grid(row=1, column=0, padx=10, pady=5, sticky='ew')
    frame_telefone_2a = ttk.LabelFrame(aba_cadastro, text="Telefone_a", borderwidth=1, relief='solid')
    entry_telefone_2a = tk.Entry(aba_cadastro)
    entry_telefone_2a.grid(row=1, column=1, padx=10, pady=10, sticky='ew')

    #email Tutor2
    frame_email_tutor_2 = ttk.LabelFrame(aba_cadastro, text="email Tutor 2", anchor='w')
    frame_email_tutor_2.grid(row=2, column=0, padx=10, pady=5, sticky='ew')
    entry_email_tutor_2 = tk.Entry(aba_cadastro)
    entry_email_tutor_2.grid(row=10, column=0, padx=10, pady=10, sticky='nsew')

    # Criando um Frame para Endereço e Observações
    ttk.Label(aba_cadastro, text="Endereço e Observações").grid(row=0, column=1, columnspan=2, padx=10, pady=5, sticky="nsew")
    #logradouro.config(height=170)  # Define a altura manualmente

    #frame_logradouro.grid_propagate(False)  # Impede que os widgets internos alterem o tamanho do frame


    #Endereço Logradouro
    ttk.Label(aba_cadastro, text="Endereço").grid(row=1, column=1, padx=10, pady=10, sticky='nsew')
    # Campo de entrada (Entry)
    entry_enderecopet = tk.Entry(aba_cadastro)
    entry_enderecopet.grid(row=2, column=1, padx=10, pady=10, sticky='nsew', columnspan=2)
    #entry_nome.grid(row=1, column=0, columnspan=4, pady=1, sticky='nsew')

    #endereço Número
    frame_endereconumero = ttk.Label(aba_cadastro, text="Número", anchor='e')
    frame_endereconumero.grid(row=3, column=1, padx=10, pady=10, sticky='nsew')
    # Campo de entrada (Entry)
    entry_endereconumero = tk.Entry(aba_cadastro)
    entry_endereconumero.grid(row=3, column=2, padx=10, pady=10, sticky='nsew')

    #Endereço Complemento
    frame_enderecocomplemento = ttk.Label(aba_cadastro, text="Complemento", anchor='e')
    frame_enderecocomplemento.grid(row=4, column=1, padx=10, pady=10, sticky='nsew')
    # Campo de entrada (Entry)
    entry_enderecocomplemento = tk.Entry(aba_cadastro)
    entry_enderecocomplemento.grid(row=4, column=2, padx=10, pady=10, sticky='nsew')



    # frame_recomendacoes = ttk.Label(aba_cadastro, text="Recomendações", borderwidth=1, relief='solid')
    # frame_recomendacoes.grid(row=20, column=0, columnspan=2, padx=10, pady=5, sticky="w")
    #
    # # Observações sobre o PET
    # frame_recomendacoes = ttk.Label(aba_cadastro, text="Recomendações Sobre o pet", borderwidth=1, relief='solid' )
    # frame_recomendacoes.grid(row=21, column=0, columnspan=2, padx=10, pady=10, sticky='nsew')
    # Campo de entrada (Entry)
    campo_observacoes = tk.Text(aba_cadastro, width=80, height=12, borderwidth=2, relief='solid' )
    campo_observacoes.grid(row=30, column=0, columnspan=2, padx=10, pady=10)

    # Configuração para expandir corretamente
    janela.columnconfigure(0, weight=1)
    janela.rowconfigure(0, weight=1)
    aba_cadastro.columnconfigure(1, weight=1)
#=

# entry_recomendacoes = tk.Entry(frame_recomendacoes)
# entry_recomendacoes.grid(row=0, column=3, padx=10, pady=10, sticky='nsew', columnspan=3)

# #Criando um Frame para Endereço e Observações
# frame_recomendacoes = ttk.LabelFrame(inner_frame, text="Recomendações Sobre o PET")
# frame_cadastro.grid(row=2, column=5, columnspan=6, padx=10, pady=5, sticky="nsew")
# label_relatorio = tk.Label(frame_relatorio, text="Recomendações", borderwidth=1, relief='solid' )
# #Campo para exibir o relatório
# campo_observacoes = tk.Text(frame_cadastro, width=50, height=10, borderwidth=2, relief='solid' )
# campo_observacoes.grid(row=4, column=0, columnspan=4, padx=10, pady=10)

#RELATÓRIOS:

# Definindo variáveis globais
combobox_item = None
combobox_item1 = None
combobox_item2 = None
calendario_inicial = None
calendario_final = None


item= {
    "Relatórios": {
        "Serviços": ['Banho', 'Hidratação', 'Desembolo', 'Remoção Pelos', 'Corte Unhas', 'Escovação Dentes', 'Tosa Higiênica', 'Tosa Máquina', 'Tosa Tesoura', 'Leva Trás']}}
                  #

item1= {
    "Relatórios": {
        "Cadastro": ['Cadastrado Desde', 'Nome Pet', 'Idade', 'Tutor 1', 'Tutor 2', 'Telefone Tutor 1', 'email Tutor 1',
                  'Telefone Tutor 2', 'email Tutor 2', 'Endereço', 'Número', 'Complemento', 'Recomendações']}}

item2= {
    "Relatórios": {
        "Pagamentos": ['Condições Pagamento', 'Abatimentos', 'Status Pagamento', 'Data Pagamento', 'Forma Pagamento']}}






# Frame para combobox item
frame_data_pagamento = ttk.LabelFrame(inner_frame, text="Data do Pagamento")
frame_data_pagamento.grid(row=9, column=1, padx=10, pady=10, sticky="w")

#combobox_item = ttk.LabelFrame(inner_frame, text="Item para Relatório")
combobox_item = ttk.Combobox(frame_relatorios, values=item["Relatórios"]["Serviços"])
combobox_item.grid(row=10, column=1, padx=10, pady=10, sticky="nsew")
combobox_item.bind("<<ComboboxSelected>>", lambda event: [atualizar_item(event)])  # Atualiza raças e imagem ao selecionar porte])  # Atualiza raças e imagem ao selecionar porte


#combobox_item1 = ttk.LabelFrame(inner_frame, text="Item para Relatório")
combobox_item1 = ttk.Combobox(frame_relatorios, values=item1["Relatórios"]["Cadastro"])
combobox_item1.grid(row=11, column=2, padx=10, pady=10, sticky="nsew")
combobox_item1.bind("<<ComboboxSelected>>", lambda event: [atualizar_item1(event),])  # Atualiza raças e imagem ao selecionar porte])  # Atualiza raças e imagem ao selecionar porte


#combobox_item = ttk.LabelFrame(inner_frame, text="Item para Relatório")
combobox_item2 = ttk.Combobox(frame_relatorios, values=item2["Relatórios"]["Pagamentos"])
combobox_item2.grid(row=12, column=3, padx=10, pady=10, sticky="nsew")
combobox_item2.bind("<<ComboboxSelected>>", lambda event: [atualizar_item2(event)])  # Atualiza raças e imagem ao selecionar porte])  # Atualiza raças e imagem ao selecionar porte
# combobox_porte = ttk.Combobox(inner_frame, values=list(dados_pet.keys()))
# combobox_porte.grid(row=0, column=0, padx=10, pady=5)
#combobox_porte.bind("<<ComboboxSelected>>", atualizar_lista_racas)  # Atualiza raças ao selecionar porte


#scrollable_frame.rowconfigure(0, weight=1)  # Para o row 0 (combobox)


# combobox_item = ttk.LabelFrame(inner_frame, text="Calendario Cadastro")
# combobox_item = ttk.Combobox(inner_frame, values=list(dados_pet.keys()))
# combobox_item.grid(row=3, column=2, padx=10, pady=10, sticky="nsew")
# scrollable_frame.rowconfigure(0, weight=1)  # Para o row 0 (combobox)



# Função única para gerar relatórios
def gerar_relatorio(event=None):
    global calendario_inicial, calendario_final


    # Captura das datas e do item selecionado
    date_inicial = calendario_inicial.get_date()
    data_final = calendario_final.get_date()
    item_selecionado = None # Definido à seguir

    # Verifica qual combobox está sendo utilizado
    if combobox_item.get():
        item_selecionado = combobox_item.get()
        relatorio_texto = f"Relatório do item {item_selecionado}\nOcorrências simuladas: {item['Relatórios']['Serviços']}"
    elif combobox_item1.get():
        item_selecionado = combobox_item1.get()
        relatorio_texto = f"Relatório do item {item_selecionado}\nOcorrências simuladas: {item1['Relatórios']['Cadastro']}"
    elif combobox_item2.get():
        item_selecionado = combobox_item2.get()
        relatorio_texto = f"Relatório do item {item_selecionado}\nOcorrências simuladas:{item2['Relatórios']['Pagamentos']}"
    else:
        relatotio_texto = "Por favor, selecione um item para pesquisa!"

        # Exibir o relatório no campo de texto
    campo_relatorio.delete('1.0', 'end')
    campo_relatorio.insert('1.0', relatorio_texto)



def gerar_relatorio():
    # Capturar as datas e o item selecionado
    global calendario_inicial, calendario_final, combobox_item

    data_inicial = calendario_inicial.get_date()
    data_final = calendario_final.get_date()
    item_selecionado = combobox_item.get()


    # Verificar se o item foi selecionado e as datas estão corretas
    if not item_selecionado:
        relatorio_texto = "Por favor, selecione um item para a pesquisa!\n"
    elif not data_inicial or not data_final:
        relatorio_texto = "Por favor, selecione a datas inicial e final!\n"
    else:
        # Criar o texto do relatório
        relatorio_texto = f"Relatório do item  {item_selecionado}\n"
        relatorio_texto += f"Data inicial  {data_inicial}\n"
        relatorio_texto += f"Data final  {data_final}\n"
        relatorio_texto += f"Ocorrências simuladas: ['Banho', 'Hidratação', 'Desembolo', 'Remoção Pelos', 'Corte Unhas', 'Escovação Dentes', 'Tosa Higiênica', 'Tosa Máquina', 'Tosa Tesoura', 'Leva Trás']"

def gerar_relatorio():
    # Capturar as datas e o item selecionado
    global calendario_inicial, calendario_final, combobox_item1

    data_inicial = calendario_inicial.get_date()
    data_final = calendario_final.get_date()
    item_selecionado = combobox_item1.get()


    # Verificar se o item foi selecionado e as datas estão corretas
    if not item_selecionado:
        relatorio_texto = "Por favor, selecione um item para a pesquisa!\n"
    elif not data_inicial or not data_final:
        relatorio_texto = "Por favor, selecione a datas inicial e final!\n"
    else:
        # Criar o texto do relatório
        relatorio_texto = f"Relatório do item  {item_selecionado}\n"
        relatorio_texto += f"Data inicial  {data_inicial}\n"
        relatorio_texto += f"Data final  {data_final}\n"
        relatorio_texto += f"Ocorrências simuladas: ['Cadastrado Desde', 'Nome Pet', 'Idade', 'Tutor 1', 'Tutor 2', 'Telefone Tutor 1', 'email Tutor 1',                 'Telefone Tutor 2', 'email Tutor 2', 'Endereço', 'Número', 'Complemento', 'Recomendações']"



def gerar_relatorio():
    # Capturar as datas e o item selecionado
    global calendario_inicial, calendario_final, combobox_item2

    data_inicial = calendario_inicial.get_date()
    data_final = calendario_final.get_date()
    item_selecionado = combobox_item2.get()


    # Verificar se o item foi selecionado e as datas estão corretas
    if not item_selecionado:
        relatorio_texto = "Por favor, selecione um item para a pesquisa!\n"
    elif not data_inicial or not data_final:
        relatorio_texto = "Por favor, selecione a datas inicial e final!\n"
    else:
        # Criar o texto do relatório
        relatorio_texto = f"Relatório do item  {item_selecionado}\n"
        relatorio_texto += f"Data inicial  {data_inicial}\n"
        relatorio_texto += f"Data final  {data_final}\n"
        relatorio_texto += f"Ocorrências simuladas: ['Condições Pagamento', 'Abatimentos', 'Status Pagamento', 'Data Pagamento', 'Forma Pagamento']"



def update_porte_item1(event=None):
    global combobox_item1
    porte = combobox_item1.get().strip()

def gerar_relatorio():
    # Capturar as datas e o item selecionado
    global calendario_inicial, calendario_final, combobox_item

    data_inicial = calendario_inicial.get_date()
    data_final = calendario_final.get_date()
    item_selecionado = combobox_item.get()


    # Verificar se o item foi selecionado e as datas estão corretas
    if not item_selecionado:
        relatorio_texto = "Por favor, selecione um item para a pesquisa!\n"
    elif not data_inicial or not data_final:
        relatorio_texto = "Por favor, selecione a datas inicial e final!\n"
    else:
        # Criar o texto do relatório
        relatorio_texto = f"Relatório do item  {item_selecionado}\n"
        relatorio_texto += f"Data inicial  {data_inicial}\n"
        relatorio_texto += f"Data final  {data_final}\n"
        relatorio_texto += f"Ocorrências simuladas: ['Porte', 'Raça', 'Serviço', 'Condições Pagamento', 'Abatimentos', 'Status Pagamento', 'Data Pagamento', 'Forma Pagamento', 'Cadastrado Desde', 'Nome Pet', 'Idade', 'Tutor 1', 'Tutor 2', 'Telefone 1', 'Telefone 2', 'Endereço', 'Poodle', 'Recomendações', 'Em Aberto-Total', 'Pago-Total', 'Em Aberto-Individual', 'Pago-Individual']"

        # Exibir o relatório no campo de texto
    campo_relatorio.delete('1.0', 'end')
    campo_relatorio.insert('1.0', relatorio_texto)

# Configuração de Calendários
frame_calendario_inicial = ttk.LabelFrame(frame_relatorios, text="Data Inicial-Relatório")
frame_calendario_inicial.grid(row=2, column=3, padx=10, pady=10, sticky="w")
date_inicial = DateEntry(frame_relatorios, year=2025, locale='pt_br')
date_inicial.grid(row=3, column=3 , padx=10, pady=10, sticky='nsew')

frame_calendario_final = ttk.LabelFrame(inner_frame, text="Data Final-Relatório")
frame_calendario_final.grid(row=2, column=4, padx=10, pady=10, sticky="w")
date_final = DateEntry(frame_relatorios, year=2025, locale='pt_br')
date_final.grid(row=3, column=5 , padx=10, pady=10, sticky='nsew')

def limpar_relatorio():
    campo_relatorio.delete('1.0', 'end')

#Botão para limpar o relatório exibido
botao_limpar = ttk.Button(inner_frame, text="Limpar Relatório", command=limpar_relatorio)
botao_limpar.grid(row=5, column=4, pady=6)


# Criando um Frame para Relatório
frame_relatorio = ttk.LabelFrame(inner_frame, text="Relatórios-(Cadastro, Serviços, Controle Pagamentos)")
frame_relatorio.grid(row=3, column=5, columnspan=2, padx=10, pady=5, sticky="w")
label_relatorio = tk.Label(frame_relatorio, text="Recomendações", borderwidth=1, relief='solid' )

# Campo para exibir o relatório
campo_relatorio = tk.Text(frame_relatorio, width=50, height=5, borderwidth=2, relief='solid')
campo_relatorio.grid(row=4, column=5, columnspan=2, padx=10, pady=10)



# Botão para gerar relatório
botao_gerar = ttk.Button(inner_frame, text="Gerar Relatório", command=gerar_relatorio)
botao_gerar.grid(row=3, column=4, pady=6)
#
# Botão para limpar o relatório exibido
botao_limpar = ttk.Button(inner_frame, text="Limpar Relatório", command=limpar_relatorio)
botao_limpar.grid(row=6, column=4, pady=6)

botao_fechar = tk.Button(text='Fechar', command=janela.quit, borderwidth=2, relief='solid')
botao_fechar.grid(row=3, column=6, padx=6, pady=10, sticky='nsew', columnspan=4)


# FINANCEIRO FINANCEIRO FINANCEIRO






var_porte = tk.StringVar(value="Pequeno")  # Valor padrão

# Função para atualizar os valores exibidos
def atualizar_valores():
    porte_selecionado = var_porte.get().strip().capitalize()
    for servico in servicos_disponiveis:
        if variaveis_servicos[servico].get():
            valor = dados_pet[porte_selecionado]["preços"].get(servico, 0)
            labels_valores[servico].config(text=f"R$ {valor:2f}")
        else:
            labels_valores[servico].config(text="")


def calcular_total():
    total = 0  # Inicializa o total

    # Obtém o porte selecionado
    porte_selecionado = var_porte.get().strip().capitalize()

    # Verifica se o porte está no dicionário de preços
    if porte_selecionado in dados_pet:
        precos = dados_pet[porte_selecionado]["preços"]

        # Soma os preços dos serviços selecionados
        for servico, variavel in variaveis_servicos.items():
            if variavel.get():  # Verifica se o serviço está selecionado
                total += precos.get(servico, 0)  # Adiciona o preço do serviço

    # Calcula descontos se aplicáveis
    if var_desconto_fixo.get():
        desconto_fixo = entry_desconto_fixo.get()
        if desconto_fixo.isdigit():
            total -= float(desconto_fixo)

    if var_desconto_percentual.get():
        desconto_percentual = entry_desconto_percentual.get()
        if desconto_percentual.isdigit():
            total -= total * (float(desconto_percentual) / 100)

    # Atualiza o resultado
    label_resultado.config(text=f"Total com desconto: R$ {total:.2f}")




def limpar_selecoes():
    # Implemente a lógica para limpar as seleções
    for var in variaveis_servicos.values():
        var.set(False)  # Desmarca todos os Checkbuttons
    entry_desconto_fixo.delete(0, tk.END)
    entry_desconto_percentual.delete(0, tk.END)
    label_resultado.config(text="Total com desconto: R$ 0.00")

def atualizar_pagamento():
    # Exibir uma mensagem de status de pagamento
    status = var_status_pagamento.get()
    print(f"Status de pagamento atualizado: {status}")

    # Lógica para atualizar o status do pagamento
    #pass  # Implementar conforme necessário

# Função para criar a aba de configuração
def criar_aba_config(parent):
    frame_config = ttk.Frame(parent)
    frame_config.grid(row=0, column=0, sticky="nsew")

    # Seleção do porte
    label_porte = ttk.Label(frame_config, text="Selecione o Porte:")
    label_porte.grid(row=0, column=0, padx=10, pady=5)

    porte_combo = ttk.Combobox(frame_config, textvariable=var_porte, values=list(dados_pet.keys()))
    porte_combo.grid(row=0, column=1, padx=10, pady=5)
    porte_combo.bind("<<ComboboxSelected>>", lambda event: atualizar_valores())  # Atualiza valores ao mudar o porte

    return frame_config


# Adiciona a aba "Financeiro" ao notebook
aba_financeiro = ttk.Frame(notebook)
notebook.add(aba_financeiro, text="Financeiro")

# Função para criar a aba financeiro
def criar_aba_financeiro(parent):
    frame_financeiro = ttk.Frame(parent)
    frame_financeiro.grid(row=0, column=0, sticky="nsew")

    # # Configuração para que o frame ocupe o espaço disponível
    # parent.grid_rowconfigure(0, weight=1)
    # parent.grid_columnconfigure(0, weight=1)
    #
    # # Seleção do porte
    # # global var_porte
    # # var_porte = tk.StringVar(value="Pequeno")  # Valor padrão
    #
    # label_porte = ttk.Label(frame_financeiro, text="Selecione o Porte:")
    # label_porte.grid(row=0, column=0, padx=10, pady=5)
    #
    # porte_combo = ttk.Combobox(frame_financeiro, textvariable=var_porte, values=list(dados_pet.keys()))
    # porte_combo.grid(row=0, column=1, padx=10, pady=5)
    # porte_combo.bind("<<ComboboxSelected>>", lambda event: atualizar_valores())  # Atualiza valores ao mudar o porte

    # Criando um Frame para serviços
    frame_servicos = ttk.LabelFrame(frame_financeiro, text="Serviços Disponíveis")
    frame_servicos.grid(row=0, column=0, padx=10, pady=5, sticky="nsew")

    # Criando Checkbuttons para serviços
    global variaveis_servicos
    variaveis_servicos = {}
    servicos_disponiveis = ["Banho", "Hidratação", "Desembolo", "Remoção de Pelos",
                            "Corte de Unhas", "Escovação de Dentes", "Tosa Higiênica",
                            "Tosa na Máquina", "Tosa na Tesoura", "Leva e Trás"]

    global labels_valores  # Dicionário para armazenar os labels de valores
    labels_valores = {}

    for i, servico in enumerate(servicos_disponiveis):
        variaveis_servicos[servico] = tk.BooleanVar()
        check_servico = ttk.Checkbutton(frame_servicos, text=servico, variable=variaveis_servicos[servico], command=atualizar_valores)  # Comando correto aqui )
        check_servico.grid(row=i, column=0, sticky="w")

        # Criando label para exibir o valor do serviço
        labels_valores[servico] = ttk.Label(frame_servicos, text="")
        labels_valores[servico].grid(row=i, column=1, sticky="w")

    # Criando o Frame para abatimentos
    frame_abatimentos = ttk.LabelFrame(frame_financeiro, text="Abatimentos")
    frame_abatimentos.grid(row=1, column=0, padx=10, pady=10, sticky="nsew")

    # Variáveis para abatimentos
    global var_desconto_fixo, var_desconto_percentual, entry_desconto_fixo, entry_desconto_percentual
    var_desconto_fixo = tk.BooleanVar()
    var_desconto_percentual = tk.BooleanVar()

    # Checkbuttons para aplicar abatimentos
    check_fixo = ttk.Checkbutton(frame_abatimentos, text="Desconto Fixo (R$)", variable=var_desconto_fixo)
    check_fixo.grid(row=0, column=0, sticky="w")

    entry_desconto_fixo = ttk.Entry(frame_abatimentos)
    entry_desconto_fixo.grid(row=0, column=1, padx=10, pady=5, sticky="w")

    check_percentual = ttk.Checkbutton(frame_abatimentos, text="Desconto Percentual (%)", variable=var_desconto_percentual)
    check_percentual.grid(row=1, column=0, sticky="w")

    entry_desconto_percentual = ttk.Entry(frame_abatimentos)
    entry_desconto_percentual.grid(row=1, column=1, padx=10, pady=5, sticky="w")

    # Botão para calcular total
    botao_calcular = ttk.Button(frame_abatimentos, text="Calcular Total", command=calcular_total)
    botao_calcular.grid(row=2, column=0, columnspan=1, pady=10)

    # Botão para limpar seleções
    botao_limpar = ttk.Button(frame_abatimentos, text="Limpar Seleções", command=limpar_selecoes)
    botao_limpar.grid(row=2, column=2, padx=10)

    # Label para exibir o resultado do cálculo
    global label_resultado
    label_resultado = ttk.Label(frame_abatimentos, text="Total com desconto: R$")
    label_resultado.grid(row=3, column=0, columnspan=1, padx=10, pady=5)

    # Frame para os métodos de pagamento
    frame_pagamento = ttk.LabelFrame(frame_financeiro, text="Forma de Pagamento")
    frame_pagamento.grid(row=2, column=0, padx=10, pady=10, sticky="nsew")

    # Variável para definir se o pagamento foi feito ou está em aberto
    global var_status_pagamento
    var_status_pagamento = tk.StringVar(value="Nenhuma Opção Marcada")

    # Botões para definir o status do pagamento
    ttk.Label(frame_financeiro, text="Status do Pagamento:").grid(row=3, column=0, padx=10, pady=5, sticky="w")
    botao_pago = tk.Radiobutton(frame_financeiro, text="Pago", variable=var_status_pagamento, value="pago", command=atualizar_pagamento)
    botao_pago.grid(row=3, column=1, sticky="w")

    botao_em_aberto = tk.Radiobutton(frame_financeiro, text="Em Aberto", variable=var_status_pagamento, value="Em Aberto", command=atualizar_pagamento)
    botao_em_aberto.grid(row=3, column=2, sticky="w")

    # Variável para armazenar a forma de pagamento
    global var_pagamento
    var_pagamento = tk.StringVar(value="")  # Inicia vazio

    # Botões de forma de pagamento (inicialmente desabilitados)
    radiobutton_pix = tk.Radiobutton(frame_pagamento, text="PIX", variable=var_pagamento, value="PIX")
    radiobutton_pix.grid(row=0, column=0, sticky="w")

    radiobutton_debito = tk.Radiobutton(frame_pagamento, text="Cartão de Débito", variable=var_pagamento, value="Débito")
    radiobutton_debito.grid(row=0, column=1, sticky="w")

    radiobutton_credito = tk.Radiobutton(frame_pagamento, text="Cartão de Crédito", variable=var_pagamento, value="Crédito")
    radiobutton_credito.grid(row=1, column=0, sticky="w")

    radiobutton_dinheiro = tk.Radiobutton(frame_pagamento, text="Em Espécie (Dinheiro)", variable=var_pagamento, value="Dinheiro")
    radiobutton_dinheiro.grid(row=1, column=1, sticky="w")

    return frame_financeiro  # Retorne o frame_financeiro

# Crie a aba e adicione ao notebook
criar_aba_financeiro(aba_financeiro)

# Calendário Data do Serviço
frame_calendario_financeiro = ttk.LabelFrame(aba_financeiro, text="Data do Serviço")
frame_calendario_financeiro.grid(row=0, column=4, padx=10, pady=10, sticky="w")
calendario_financeiro = DateEntry(frame_calendario_financeiro, year=2025, locale='pt_br')
calendario_financeiro.grid(row=0, column=4 , padx=10, pady=10, sticky='nsew')

# Calendário Data Efetivação do Pagamento
frame_calendario_financeiro = ttk.LabelFrame(aba_financeiro, text="Data do Pagamento")
frame_calendario_financeiro.grid(row=0, column=5, padx=10, pady=10, sticky="w")
calendario_financeiro = DateEntry(frame_calendario_financeiro, year=2025, locale='pt_br')
calendario_financeiro.grid(row=0, column=5 , padx=10, pady=10, sticky='nsew')


# Inicie a aplicação Tkinter
# root = tk.Tk()
# root.mainloop()
# Copy




# CONSULTA CONSULTA CONSULTA

def criar_frame_consulta(parent):
    frame_consulta = ttk.LabelFrame(parent, text="Informações Sobre o PET")
    frame_consulta.grid(row=0, column=0, padx=5, pady=5, sticky="nsew")

    frame_consulta = ttk.LabelFrame(frame_consulta, text="Consultando PET")
    frame_consulta.grid(row=0, column=0, padx=5, pady=5, sticky="nsew")



# Criando um Frame para Dados Cadastrais
frame_cadastramento = tk.LabelFrame(aba_cadastro, text="Dados Cadastrais", borderwidth=3, relief='groove')
frame_cadastramento.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")

# Nome do Pet
ttk.Label(frame_cadastramento, text="Nome do Pet:").grid(row=0, column=0, padx=10, pady=5, sticky="w")
entry_nome_pet = ttk.Entry(frame_cadastramento)
entry_nome_pet.grid(row=0, column=1, padx=10, pady=5, sticky="ew")

# Idade
ttk.Label(frame_cadastramento, text="Idade (Anos):").grid(row=1, column=0, padx=10, pady=5, sticky="w")
entry_idade_anos = ttk.Entry(frame_cadastramento)
entry_idade_anos.grid(row=1, column=1, padx=10, pady=5, sticky="ew")

ttk.Label(frame_cadastramento, text="Idade (Meses):").grid(row=2, column=0, padx=10, pady=5, sticky="w")
entry_idade_meses = ttk.Entry(frame_cadastramento)
entry_idade_meses.grid(row=2, column=1, padx=10, pady=5, sticky="ew")

# Criando um Frame para Endereço e Observações
frame_endereco = tk.LabelFrame(aba_cadastro, text="Endereço e Observações", borderwidth=3, relief='groove')
frame_endereco.grid(row=0, column=2, columnspan=2, padx=10, pady=10, sticky="nsew")

ttk.Label(frame_endereco, text="Endereço:").grid(row=0, column=0, padx=10, pady=5, sticky="w")
entry_expande = ttk.Entry(frame_endereco)
entry_expande.grid(row=0, column=1, columnspan=2, padx=10, pady=5, sticky="ew")

# aumentando o tamanho do entry configurando columnconfigure(1, weight=1)
frame_endereco.columnconfigure(1, weight=2)

# Configura as colunas do frame_endereco para expansão
# for col in range(2):
#     frame_endereco.columnconfigure(col, weight=1)



ttk.Label(frame_endereco, text="Número:").grid(row=1, column=0, padx=10, pady=5, sticky="w")
entry_fixo = ttk.Entry(frame_endereco)
entry_fixo.grid(row=1, column=1, padx=10, pady=5, sticky="w")

# Endereço Complemento
ttk.Label(frame_endereco, text="Complemento").grid(row=2, column=0, padx=10, pady=10, sticky='nsew')     # Campo de entrada (Entry)
entry_enderecocomplemento = ttk.Entry(frame_endereco)
entry_enderecocomplemento.grid(row=2, column=1, columnspan=2, padx=10, pady=10, sticky='ew')




# Criando um Frame para Dados Cadastrais
frame_tutor = tk.LabelFrame(aba_cadastro, text="Dados dos Tutores", borderwidth=3, relief='groove')
frame_tutor.grid(row=1, column=0, padx=10, pady=5, sticky="ew")

# Tutor 1
ttk.Label(frame_tutor, text="NOME Tutor 1:").grid(row=2, column=0, padx=10, pady=10, sticky='nsew')
entry_tutor_1 = tk.Entry(frame_tutor)
entry_tutor_1.grid(row=2, column=1, padx=10, pady=10, sticky='nsew')

# telefone1
ttk.Label(frame_tutor, text="Telefone Tutor 1").grid(row=4, column=0, padx=10, pady=10, sticky='e')
entry_telefone_1 = tk.Entry(frame_tutor)
entry_telefone_1.grid(row=4, column=1, padx=10, pady=10, sticky='nsew')

# email Tutor1
ttk.Label(frame_tutor, text="email Tutor 1").grid(row=5, column=0, padx=10, pady=10, sticky='e')
entry_email_tutor_1 = tk.Entry(frame_tutor)
entry_email_tutor_1.grid(row=5, column=1, padx=10, pady=10, sticky='nsew')

# tutor 2
ttk.Label(frame_tutor, text="NOME Tutor 2:").grid(row=6, column=0, padx=10, pady=10, sticky='nsew')

# Campo de entrada (Entry)
entry_tutor_2 = tk.Entry(frame_tutor)
entry_tutor_2.grid(row=6, column=1, padx=10, pady=10, sticky='nsew')

# telefone 2
ttk.Label(frame_tutor, text="Telefone Tutor 2").grid(row=7, column=0, padx=10, pady=10, sticky='nsew')
# Campo de entrada (Entry)
entry_telefone_2 = tk.Entry(frame_tutor)
entry_telefone_2.grid(row=7, column=1, padx=10, pady=10, sticky='nsew')
ttk.LabelFrame(frame_tutor, text="Telefone_a")
entry_telefone_2a = tk.Entry(inner_frame)
entry_telefone_2a.grid(row=8, column=0, padx=10, pady=10, sticky='nsew')

# email Tutor2
ttk.Label(frame_tutor, text="email Tutor 2").grid(row=9, column=0, padx=10, pady=10, sticky='e')
entry_email_tutor_2 = tk.Entry(frame_tutor)
entry_email_tutor_2.grid(row=9, column=1, padx=10, pady=10, sticky='nsew')



# Criando um Frame para tipopelo e Características
aba_cadastro = ttk.Frame(aba_cadastro)
aba_cadastro.grid(row=2, column=0, padx=10, pady=5, sticky="ew")

frame_descricao = tk.LabelFrame(aba_cadastro, text=" Tamanho e Características - Pelagem ", borderwidth=3, relief="groove")
frame_descricao.grid(row=3, column=0, padx=10, pady=10, sticky="ew")

# Criando variável para os Radiobuttons
var_descricao = tk.StringVar(value="") # Inicializa sem nenhuma seleção


# Botões de Características - Pelagem (inicialmente desabilitados)
radiobutton_curta = tk.Radiobutton(frame_descricao, text="Curta", variable=var_descricao, value="Curta")
radiobutton_curta.grid(row=2, column=0, sticky="w")

radiobutton_mediana = tk.Radiobutton(frame_descricao, text="Mediana", variable=var_descricao, value="Mediana")
radiobutton_mediana.grid(row=3, column=0, sticky="w")

radiobutton_longa = tk.Radiobutton(frame_descricao, text="Longa", variable=var_descricao, value="Longa")
radiobutton_longa.grid(row=4, column=0, sticky="w")

# Função para ativar/desativar Radiobuttons
def atualizar_descricao():
    global var_descricao  # Declare a variável como global
    if var_descricao.get() in ["Curta", "Mediana", "Longa"]:
        # Ativar botões de pagamento
        radiobutton_curta.config(state="normal")
        radiobutton_mediana.config(state="normal")
        radiobutton_longa.config(state="normal")
    else:
        # Resetar e desabilitar botões de pagamento
        var_descricao.set("") # Ressetar seleção
        radiobutton_curta.config(state="disabled")
        radiobutton_mediana.config(state="disabled")
        radiobutton_longa.config(state="disabled")

# Botão para testar ativação dos Radiobuttons
# btn_ativar = ttk.Button(frame_descricao, text="Ativar Seleção", command=atualizar_descricao)
# btn_ativar.grid(row=5, column=0, pady=10, sticky="w")


# Função para salvar no banco de dados
def salvar_descricao():
    descricao_selecionada = var_descricao.get()

    if descricao_selecionada:
        conn = sqlite3.connect("petshop.db")  # Conectar ao banco de dados
        cursor = conn.cursor()

        # Criar tabela se não existir
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS caracteristicas_pet (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                descricao TEXT
            )
        ''')

        # Inserir dados
        cursor.execute("INSERT INTO caracteristicas_pet (descricao) VALUES (?)", (descricao_selecionada,))
        conn.commit()
        conn.close()

        print(f"tipopelo '{descricao_selecionada}' salva no banco de dados!")


# Criando um Frame para Tipos de Pelos
aba_cadastro = ttk.Frame(aba_cadastro)
aba_cadastro.grid(row=4, column=0, padx=10, pady=5, sticky="w")

frame_tipopelo = tk.LabelFrame(aba_cadastro, text="Tipo de Pelo", borderwidth=3, relief="groove")
frame_tipopelo.grid(row=1, column=0, padx=10, pady=5, sticky="ew")

# Criando variável para os Radiobuttons
var_tipopelo = tk.StringVar(value="") # Inicializa sem nenhuma seleção


# Botões de forma de pagamento (inicialmente desabilitados)
radiobutton_grosso = tk.Radiobutton(frame_tipopelo, text="Grosso Espesso", variable=var_tipopelo, value="Grosso Espesso")
radiobutton_grosso.grid(row=0, column=0, sticky="w")

radiobutton_fino = tk.Radiobutton(frame_tipopelo, text="Fino Suave", variable=var_tipopelo, value="Fino Suave")
radiobutton_fino.grid(row=1, column=0, sticky="w")


# Função para ativar/desativar Radiobuttons
def atualizar_tipopelo():
    global var_tipopelo  # Declare a variável como global
    if var_tipopelo.get() in ["Grosso", "Fino"]:
        # Ativar botões de pagamento
        radiobutton_grosso.config(state="normal")
        radiobutton_fino.config(state="normal")

    else:
        # Resetar e desabilitar botões de pagamento
        var_tipopelo.set("") # Ressetar seleção
        radiobutton_grosso.config(state="disabled")
        radiobutton_fino.config(state="disabled")

# Botão para testar ativação dos Radiobuttons
# btn_ativar = ttk.Button(frame_tipopelo, text="Ativar Seleção", command=atualizar_tipopelo)
# btn_ativar.grid(row=4, column=3, pady=10, sticky="w")


# Função para salvar no banco de dados
def salvar_tipopelo():
    tipopelo_selecionada = var_tipopelo.get()

    if tipopelo_selecionada:
        conn = sqlite3.connect("petshop.db")  # Conectar ao banco de dados
        cursor = conn.cursor()

        # Criar tabela se não existir
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS caracteristicas_pet (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                descricao TEXT
            )
        ''')

        # Inserir dados
        cursor.execute("INSERT INTO caracteristicas_pet (descricao) VALUES (?)", (tipopelo_selecionada,))
        conn.commit()
        conn.close()

        print(f"tipopelo '{tipopelo_selecionada}' salva no banco de dados!")


# tempo previsto para para execução
# Criando um Frame para Tempo de Execução
frame_tempo = tk.LabelFrame(aba_cadastro, text="Tempo de Execução", borderwidth=3, relief='groove')
frame_tempo.grid(row=0, column=1, rowspan=3, padx=10, pady=10, sticky="nsew")


# Ajustando colunas para melhor organização
frame_tempo.grid_columnconfigure(0, weight=1)
frame_tempo.grid_columnconfigure(1, weight=1)


# Frame de Tempo de Execução
ttk.Label(frame_tempo, text="Duração do Serviço:").grid(row=0, column=0, padx=5, pady=2, sticky='w')
entry_duracao = tk.Entry(frame_tempo)
entry_duracao.grid(row=0, column=1, sticky="ew", padx=5, pady=2)

# Tempo Banho
ttk.Label(frame_tempo, text="Tempo Banho:").grid(row=1, column=0, sticky="w", padx=5, pady=2)
entry_banho = tk.Entry(frame_tempo)
entry_banho.grid(row=1, column=1, sticky="ew", padx=5, pady=2)


# Tempo Secagem
ttk.Label(frame_tempo, text="Tempo Secagem:").grid(row=2, column=0, sticky="w", padx=5, pady=2)
entry_secagem = tk.Entry(frame_tempo)
entry_secagem.grid(row=2, column=1, sticky="ew", padx=5, pady=2)


# Hidratação
ttk.Label(frame_tempo, text="Tempo T. Hidratação:").grid(row=3, column=0, sticky="w", padx=5, pady=2)
entry_hidratacao = tk.Entry(frame_tempo)
entry_hidratacao.grid(row=3, column=1, sticky="ew", padx=5, pady=2)


# Tempo Desembolo
ttk.Label(frame_tempo, text="Tempo T. Desembolo:").grid(row=4, column=0, sticky="w", padx=5, pady=2)
entry_desembolo = tk.Entry(frame_tempo)
entry_desembolo.grid(row=4, column=1, sticky="ew", padx=5, pady=2)


# Tempo Tosa Higiênica
ttk.Label(frame_tempo, text="Tempo T. Higiênica:").grid(row=5, column=0, sticky="w", padx=5, pady=2)
entry_higienica = tk.Entry(frame_tempo)
entry_higienica.grid(row=5, column=1, sticky="ew", padx=5, pady=2)

# Tempo Tosa Máquina
ttk.Label(frame_tempo, text="Tempo T. Máquina:").grid(row=6, column=0, sticky="w", padx=5, pady=2)
entry_maquina = tk.Entry(frame_tempo)
entry_maquina.grid(row=6, column=1, sticky="ew", padx=5, pady=2)



# Tempo Tosa Tesoura
ttk.Label(frame_tempo, text="Tempo T. Tesoura:").grid(row=7, column=0, sticky="w", padx=5, pady=2)
entry_tesoura = tk.Entry(frame_tempo)
entry_tesoura.grid(row=7, column=1, sticky="ew", padx=5, pady=2)



# TEMPO TOTAL ATENDIMENTO
ttk.Label(frame_tempo, text="Tempo Total Atendimento:").grid(row=8, column=0, sticky="w", padx=5, pady=2)
entry_total = tk.Entry(frame_tempo)
entry_total.grid(row=8, column=1, sticky="ew", padx=5, pady=2)


# Criando um Frame para Cuidados Necessários
aba_cadastro = ttk.Frame(aba_cadastro)
aba_cadastro.grid(row=3, column=0, padx=10, pady=10, sticky="nsew")

frame_cuidados = tk.LabelFrame(aba_cadastro, text="Tipo de Pelo", borderwidth=3, relief="groove")
frame_cuidados.grid(row=3, column=1, padx=10, pady=10, sticky="nsew")

# Criando variável para os Radiobuttons
var_cuidados = tk.StringVar(value="") # Inicializa sem nenhuma seleção


# Usando a instância existente de root
root = tk.Tk()  # Esta linha deve ser removida se a janela principal já existir
app = App(root)
root.mainloop()  # Esta linha deve estar ao final, chamando o loop principal da janela
janela.mainloop()








PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP





Maravilha, Reinaldo! Ter uma aba como a  centralizando os  e valores como faixas de preços é uma baita vantagem para modularidade e organização. Isso te dá flexibilidade para deixar todas as outras abas mais enxutas e reutilizáveis.
Agora, como você já tem essa centralização, aqui vão algumas sugestões para integrar isso com sua  de forma limpa e modular:

🔄 1. Importar valores da  no 
Se você tiver algo como:

Você pode simplesmente importar onde precisar:


🧩 2. Compartilhar o Combobox de porte
Se o  de porte do pet já existe na , a  pode recebê-lo como argumento, por exemplo:

Assim, o  é o mesmo em todas as abas — selecione uma vez, e todas as outras refletem isso. 🧠

🪝 3. Sincronizar serviços e variáveis com o financeiro
No , se você define uma lista de serviços e vincula checkboxes a variáveis booleanas, o  pode apenas ler isso e calcular com base nos preços.
Exemplo:

E no financeiro:


📎 Dica final: proteger com  se estiver importando direto entre módulos, ou usar um arquivo  com todas as variáveis visíveis e fáceis de manter!
Se quiser, posso montar esse  como hub de variáveis, ou organizar  como fonte principal de dados para seu projeto modular. Quer que eu ajude a desenhar essa estrutura? 🧱🔗😄
Vai ficar top e super fácil de escalar!


SIM , gostaria como seria a melhor forma

Perfeito, Reinaldo! Se você já centralizou os dados em  (como combobox de porte, faixas de preços, lista de serviços, etc.), a melhor forma de estruturar seu projeto modular é criar um módulo chamado, por exemplo:

Esse arquivo será o “coração de dados” do seu sistema — os outros módulos só importam dele. Com isso, você evita variáveis duplicadas e mantém tudo consistente.

🧬 Exemplo de 


✨ Em 
Você cria o  e registra ele no módulo compartilhado:


🧩 Em 
Você importa diretamente:


✅ Vantagens desse modelo:
• 	Evita loops de importação (um módulo dependendo do outro circularmente)
• 	Variáveis “vivas”: qualquer alteração reflete onde elas forem importadas
• 	Total controle sobre seus dados e lógica
• 	Super fácil de debugar

Se quiser, posso montar todos esses arquivos com base no seu projeto real (já com nomes, checkbuttons e funções prontinhas pra importar). Quer que eu gere um template completo de  + amostra de uso em  e ? 😄📦📊
Te entrego como se fosse um mini-framework visual!

