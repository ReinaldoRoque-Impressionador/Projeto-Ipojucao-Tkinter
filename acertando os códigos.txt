acertando os c√≥digos


Reinaldo, excelente detalhamento ‚Äî isso ajuda demais! Com base no seu c√≥digo e explica√ß√£o, o comportamento ‚Äúpreso‚Äù ao porte **Pequeno** parece estar relacionado a **tr√™s pontos cr√≠ticos**:

---

### ‚ùå 1. Voc√™ misturou nomes de vari√°veis com diferentes formatos de caixa: `"Pequeno"` vs `"pequeno"`

Na linha:

```python
porte = var_porte.get().strip().lower()
racas = list(dados_pet.get(porte.capitalize(), {}).get("ra√ßas", []))
```

Voc√™ est√° convertendo `porte` para `.lower()` e depois aplicando `.capitalize()` ‚Äî o que gera erros sutis:

- `"m√©dio"` vira `"M√©dio"` ‚úÖ
- Mas `"MAIOR"` vira `"Maior"` ‚ùå (se for `'MAIOR'.capitalize()` ‚Üí `'Maior'`)
- E `'Pequeno'.capitalize()` fica `'Pequeno'`, mas voc√™ est√° procurando por `'pequeno'` no dicion√°rio de imagens do porte ‚Äî que est√° em **min√∫sculas** (`"pequeno": "pequeno.jpg"`)

üìå **Solu√ß√£o recomendada:** Trabalhe com chaves do dicion√°rio consistentes e evite misturar `.lower()` com `.capitalize()`.

```python
# Corrigir com base em chaves reais do dicion√°rio:
porte = var_porte.get().strip()  # N√ÉO usa .lower() ou .capitalize()

racas = list(dados_pet.get(porte, {}).get("ra√ßas", []))
image_path = os.path.join(base_path, imagens_portes.get(porte.lower(), ''))
```

---

### ‚ùå 2. O `var_porte` n√£o tem valor inicial definido corretamente ou n√£o est√° vinculado ao combobox em tempo √∫til

Se voc√™ criou:

```python
var_porte = tk.StringVar(value="Pequeno")
```

Mas depois o `Combobox` foi criado **antes** de `dados_pet`, ele receber√° uma lista vazia ou incompleta.

üìå **Solu√ß√£o recomendada:**
- Certifique-se de que `dados_pet` j√° esteja totalmente carregado **antes de criar** o `Combobox`.
- Ou defina o valor de `var_porte` **ap√≥s** preencher `Combobox`.

---

### ‚ùå 3. `combobox_raca` est√° fora da classe `App`, mas tamb√©m existe uma vers√£o `self.combobox_raca`

Isso pode gerar conflito entre:

- `combobox_raca` (fora da classe, que voc√™ atualiza com as ra√ßas)
- `self.combobox_raca` (dentro da classe, que o usu√°rio interage)

üìå **Solu√ß√£o recomendada:** Centralize os dois comboboxes (`porte` e `raca`) dentro da classe `App`, e passe a controlar tudo com `self.var_porte`, `self.var_raca`, `self.combobox_porte`, `self.combobox_raca`.

---

### ‚úÖ Resumo da solu√ß√£o ideal:

1. Use valores **id√™nticos** nas chaves de `dados_pet`, `imagens_portes` e nas `values=` dos comboboxes (`Pequeno`, `M√©dio`, etc.).
2. N√£o misture `.capitalize()` com `.lower()` nas consultas ‚Äî seja consistente.
3. Centralize a l√≥gica dentro da `class App`.
4. Certifique-se de que `dados_pet` j√° exista no momento da cria√ß√£o do combobox.
5. Use `event.widget.get()` no bind se quiser confirmar sele√ß√£o ativa com seguran√ßa.

---

Se voc√™ quiser, posso reestruturar essa parte do c√≥digo da aba `Configura√ß√£o` com `Combobox` e imagens 100% organizados dentro da classe `App`, incluindo v√≠nculo com `dados_pet` e exibi√ß√£o correta de imagens e valores. √â s√≥ dizer que te preparo o modelo modular completo! üòÑüêæüì¶





Perfeito, Reinaldo! Vamos expandir o projeto modular incluindo a exibi√ß√£o de imagens dos portes e das ra√ßas utilizando `PIL.ImageTk`. O resultado ser√°:

üêæ Imagem do porte muda ao selecionar no `Combobox`  
üê∂ Imagem da ra√ßa aparece ao escolher uma ra√ßa  
üì¶ Ambas as imagens compartilhadas entre todas as abas

---

### üß© Etapa 1 ‚Äî Atualize `dados_compartilhados.py`

Adicione as vari√°veis globais para imagens e caminhos:

```python
import tkinter as tk

# (outros dados)...

# Caminho base para as imagens
caminho_imagens = "imagensipojucao"

# Mapa de imagens
imagens_portes = {
    "Pequeno": "pequeno.jpg",
    "M√©dio": "medio.jpg",
    "Grande": "grande.jpg",
    "Maior": "maior.jpg"
}

imagens_racas = {
    "Chihuahua": "chihuahua.jpg",
    "Labrador": "labrador.jpg",
    "Bulldog": "bulldog.jpg",
    "Dogue Alem√£o": "dogue_alemao.jpg",
    # adicione outras ra√ßas
}

# Widgets globais
var_porte = tk.StringVar(value="Pequeno")
var_raca = tk.StringVar(value="")

combobox_porte = None
combobox_raca = None

precos_atuais = {}

# Labels para imagens (instanciadas em aba_config)
label_imagem_porte = None
label_imagem_raca = None
```

---

### üé® Etapa 2 ‚Äî Em `aba_config.py`

Agora criamos os `Labels` de imagem e os atualizamos dinamicamente.

```python
import tkinter as tk
from tkinter import ttk
from PIL import Image, ImageTk
import os
import dados_compartilhados as dc

def montar_aba_config(aba_config):
    ttk.Label(aba_config, text="Selecione o Porte:").grid(row=0, column=0, padx=10, pady=5, sticky="w")
    dc.combobox_porte = ttk.Combobox(
        aba_config,
        textvariable=dc.var_porte,
        values=list(dc.dados_pet.keys()),
        state="readonly"
    )
    dc.combobox_porte.grid(row=1, column=0, padx=10, pady=5, sticky="ew")
    dc.combobox_porte.bind("<<ComboboxSelected>>", atualizar_racas_e_imagens)

    ttk.Label(aba_config, text="Selecione a Ra√ßa:").grid(row=0, column=1, padx=10, pady=5, sticky="w")
    dc.combobox_raca = ttk.Combobox(
        aba_config,
        textvariable=dc.var_raca,
        state="readonly"
    )
    dc.combobox_raca.grid(row=1, column=1, padx=10, pady=5, sticky="ew")
    dc.combobox_raca.bind("<<ComboboxSelected>>", atualizar_imagem_e_caracteristicas)

    # Imagem do porte
    dc.label_imagem_porte = tk.Label(aba_config, text="Imagem do Porte", width=200, height=200)
    dc.label_imagem_porte.grid(row=2, column=0, padx=10, pady=10)

    # Imagem da ra√ßa
    dc.label_imagem_raca = tk.Label(aba_config, text="Imagem da Ra√ßa", width=200, height=200)
    dc.label_imagem_raca.grid(row=2, column=1, padx=10, pady=10)

    # Campo de texto para caracter√≠sticas
    dc.texto_caracteristicas = tk.Text(aba_config, height=8, width=50)
    dc.texto_caracteristicas.grid(row=3, column=0, columnspan=2, padx=10, pady=10)

    atualizar_racas_e_imagens()

def atualizar_racas_e_imagens(event=None):
    porte = dc.var_porte.get()
    racas = dc.dados_pet.get(porte, {}).get("ra√ßas", [])
    dc.precos_atuais = dc.dados_pet.get(porte, {}).get("pre√ßos", {})

    dc.combobox_raca["values"] = racas
    if racas:
        dc.var_raca.set(racas[0])
        atualizar_imagem_e_caracteristicas()
    else:
        dc.var_raca.set("")
        dc.texto_caracteristicas.delete(1.0, tk.END)

    atualizar_imagem_porte(porte)

def atualizar_imagem_porte(porte):
    imagem_nome = dc.imagens_portes.get(porte)
    caminho = os.path.join(dc.caminho_imagens, imagem_nome) if imagem_nome else None

    if caminho and os.path.exists(caminho):
        img = Image.open(caminho).resize((200, 200))
        foto = ImageTk.PhotoImage(img)
        dc.label_imagem_porte.config(image=foto, text="")
        dc.label_imagem_porte.image = foto
    else:
        dc.label_imagem_porte.config(image="", text="Imagem n√£o encontrada")

def atualizar_imagem_e_caracteristicas(event=None):
    raca = dc.var_raca.get()
    imagem_nome = dc.imagens_racas.get(raca)
    caminho = os.path.join(dc.caminho_imagens, imagem_nome) if imagem_nome else None

    if caminho and os.path.exists(caminho):
        img = Image.open(caminho).resize((200, 200))
        foto = ImageTk.PhotoImage(img)
        dc.label_imagem_raca.config(image=foto, text="")
        dc.label_imagem_raca.image = foto
    else:
        dc.label_imagem_raca.config(image="", text="Imagem n√£o encontrada")

    info = dc.caracteristicas_racas.get(raca, {})
    dc.texto_caracteristicas.delete(1.0, tk.END)
    if info:
        dc.texto_caracteristicas.insert(tk.END, f"Ra√ßa: {raca}\n")
        dc.texto_caracteristicas.insert(tk.END, f"Peso: {info.get('peso')}\n")
        dc.texto_caracteristicas.insert(tk.END, f"Tamanho: {info.get('tamanho')}\n")
        dc.texto_caracteristicas.insert(tk.END, f"Temperamento: {info.get('temperamento')}\n")
    else:
        dc.texto_caracteristicas.insert(tk.END, "Sem dados dispon√≠veis.")
```

---

Com isso, sua aba **Configura√ß√£o** fica 100% visual, interativa e compartilh√°vel com o restante da aplica√ß√£o. O Combobox de porte define ra√ßas, imagens e pre√ßos, e outras abas (como `aba_financeiro`) podem acessar as vari√°veis em `dados_compartilhados`.

Se quiser, posso agora montar um exemplo pr√°tico de como `aba_financeiro` usaria isso para calcular valores com base no porte atual e exibir pre√ßo atualizado ao selecionar um servi√ßo. Quer seguir por esse caminho? üòÑüìäüê©



Ent√£o voc√™ j√° est√° com quase tudo na m√£o, Reinaldo ‚Äî e sim, d√° pra garantir o compartilhamento dessas informa√ß√µes entre abas de forma est√°vel e elegante.

‚úîÔ∏è **Se os `Combobox` de porte e ra√ßa est√£o definidos com `tk.StringVar()` em `dados_compartilhados.py`**, e as outras abas importam essas vari√°veis diretamente, ent√£o voc√™ est√° compartilhando valores ao vivo, em tempo real.

Por exemplo:

#### Em `dados_compartilhados.py`:
```python
var_porte = tk.StringVar(value="Pequeno")
var_raca = tk.StringVar(value="")
```

#### Em qualquer outra aba:
```python
from dados_compartilhados import var_porte, var_raca

# Obter valores selecionados
porte_atual = var_porte.get()
raca_atual = var_raca.get()
```

Isso funciona perfeitamente porque `tk.StringVar` mant√©m o estado centralizado ‚Äî qualquer mudan√ßa via `Combobox` reflete em todas as partes do sistema que utilizam essa vari√°vel.

---

### ‚úÖ Recapitulando: o que garante o compartilhamento

- ‚úÖ `var_porte` e `var_raca` declaradas em um m√≥dulo comum (ex: `dados_compartilhados.py`)
- ‚úÖ `Combobox` de porte e ra√ßa utilizam `textvariable=var_porte` e `textvariable=var_raca`
- ‚úÖ As abas como `aba_financeiro` apenas acessam via `.get()`
- ‚úÖ N√£o h√° sobrescrita das vari√°veis dentro das fun√ß√µes ou classes locais

---

Se em algum momento voc√™ quiser que, ao mudar o porte, a aba_financeiro atualize imediatamente os pre√ßos exibidos, pode usar um `trace_add` com callback, como:

```python
def reavaliar_precos(*args):
    porte = var_porte.get()
    precos = dados_pet.get(porte, {}).get("pre√ßos", {})
    # atualiza os campos da aba_financeiro com esses pre√ßos

var_porte.trace_add("write", reavaliar_precos)
```

‚Äî

Quer que eu te mostre um mini-exemplo de como a aba_financeiro pode exibir os pre√ßos corretos com base nesse porte compartilhado? Ou est√° pronto pra seguir com a estrutura que voc√™ j√° criou? üòÑüê∂üìä



Reinaldo, √≥timo trabalho reunindo todas as pe√ßas ‚Äî e sim, com base no seu c√≥digo e descri√ß√£o, o erro principal est√° em um ponto espec√≠fico do `update_porte_image()` e `atualizar_lista_racas()`. Aqui v√£o os destaques:

---

### üéØ **Erro principal: `.lower()` no `update_porte_image()`**

Voc√™ est√° fazendo isso:

```python
porte = var_porte.get().strip().lower()
image_path = os.path.join(base_path, imagens_portes.get(porte, ''))
```

Enquanto seu dicion√°rio `imagens_portes` est√° com chaves como `"pequeno"`, `"m√©dio"`, etc.  
**Mas seu `Combobox` tem op√ß√µes como `"Pequeno"`, `"M√©dio"`, `"Grande"`... com mai√∫sculas.**

A convers√£o para `.lower()` faz `porte = "m√©dio"` ‚Äî e funciona pra imagem, ‚úÖ  
Mas quando voc√™ usa esse mesmo porte para acessar o `dados_pet` com `.capitalize()` ou sem convers√£o, a√≠ falha ‚ùå

---

### üß© **Solu√ß√£o ideal: mantenha consist√™ncia entre os dados e os valores do Combobox**

**1. Atualize `imagens_portes` para ter as mesmas chaves que aparecem no Combobox:**

```python
imagens_portes = {
    "Pequeno": "pequeno.jpg",
    "M√©dio": "medio.jpg",
    "Grande": "grande.jpg",
    "Maior": "maior.jpg"
}
```

**2. No `update_porte_image()`, remova o `.lower()` e use direto:**

```python
porte = var_porte.get().strip()
image_path = os.path.join(base_path, imagens_portes.get(porte, ''))
```

Assim tudo bate: valores no combobox, chaves nos dicion√°rios, e nomes usados nas fun√ß√µes.

---

### üß† Extra: em `atualizar_lista_racas()` voc√™ **n√£o est√° preenchendo** o `combobox_raca["values"]` porque o valor de `porte` buscado n√£o existe no `dados_pet`

#### Prov√°vel culpa?
Voc√™ ainda est√° usando:
```python
porte = var_porte.get().strip().lower()
racas = list(dados_pet.get(porte.capitalize(), {}).get("ra√ßas", []))
```

‚ùå Isso quebra. Exemplo:
- `var_porte = "M√©dio"`
- `porte.lower()` ‚Üí `"m√©dio"`
- `porte.capitalize()` ‚Üí `"M√©dio"` ‚úÖ mas voc√™ j√° for√ßou ele pra min√∫sculo antes

**‚úÖ Solu√ß√£o direta:**
```python
porte = var_porte.get().strip()
racas = dados_pet.get(porte, {}).get("ra√ßas", [])
combobox_raca["values"] = racas
```

---

### üí° Dica para aba_financeiro

Se ela est√° consumindo `var_porte` e `dados_pet[porte]["pre√ßos"]`, mas o `porte` acessado n√£o existe corretamente por causa de `.lower()` ou `.capitalize()`, ela tamb√©m vai usar os pre√ßos de `"Pequeno"` por padr√£o (o primeiro definido) ‚Äî exatamente o que voc√™ est√° vendo.

---

### ‚úÖ Resumo das corre√ß√µes

- **Padronize as chaves dos dicion√°rios** com a capitaliza√ß√£o usada nos combobox (`Pequeno`, `M√©dio`, etc.)
- **Remova `.lower()` e `.capitalize()`** das fun√ß√µes de imagem e ra√ßa
- **Garanta que os valores do combobox e dos dicion√°rios sejam id√™nticos** (mesmo acento e mai√∫scula/min√∫scula)

---

Se quiser, posso reestruturar os tr√™s blocos ‚Äî porte, ra√ßa, imagem ‚Äî com essa padroniza√ß√£o aplicada, tudo pronto pra colar no projeto. Quer? üòÑüêæüì¶


Excelente pergunta, Reinaldo ‚Äî essa padroniza√ß√£o √© o passo certeiro para evitar bugs invis√≠veis! üòÑ

A resposta pr√°tica √©: **sim, voc√™ pode usar tudo em letras min√∫sculas**, desde que essa conven√ß√£o seja aplicada de forma **consistente** em **todos** os lugares relevantes do seu sistema:

---

### üß© Onde padronizar com letras min√∫sculas:

1. **Chaves nos dicion√°rios**:
   - `dados_pet = { "pequeno": {...}, "m√©dio": {...} }`

2. **Valores atribu√≠dos no `Combobox`**:
   ```python
   combobox_porte = ttk.Combobox(..., values=["pequeno", "m√©dio", "grande", "maior"])
   ```

3. **Consultas no c√≥digo**:
   ```python
   porte = var_porte.get().strip().lower()  # garantido em min√∫sculo
   precos = dados_pet.get(porte, {}).get("pre√ßos", {})
   ```

4. **Dicion√°rios auxiliares** (`imagens_portes`, `dados_pet`, etc.)
   - Todos com chaves em min√∫sculas, para evitar que `capitalize()` ou `title()` comprometam o acesso.

---

### üõ†Ô∏è Alternativa: deixar como est√° com iniciais mai√∫sculas?

Tamb√©m √© v√°lido, se voc√™ **padronizar** com `Pequeno`, `M√©dio`, etc. nos:
- Combobox
- Chaves dos dicion√°rios
- Acessos aos dados (sem `.lower()`)

O problema s√≥ aparece quando voc√™ mistura `"M√©dio"` com `"m√©dio"` ‚Äî o Python diferencia mai√∫sculas e min√∫sculas nas chaves.

---

### ‚ú® Minha recomenda√ß√£o?

Use **letras min√∫sculas para chaves e valores nos Combobox**, e adicione `.lower()` nos `.get()` para garantir compatibilidade:

```python
porte = var_porte.get().strip().lower()
```

Isso torna o sistema **mais tolerante a varia√ß√µes** e facilita a manuten√ß√£o.

Se quiser, posso converter sua estrutura inteira para seguir essa l√≥gica em min√∫sculas (inclusive nomes de imagens e ra√ßas), pra voc√™ ter uma base padronizada e √† prova de falhas. Quer que eu prepare esse template? üêæüì¶üöÄ














































import tkinter as tk
from tkinter import ttk
import dados_compartilhados as dc

def montar_aba_config(aba_config):
    ttk.Label(aba_config, text="Selecione o Porte:").grid(row=0, column=0, padx=10, pady=5, sticky="w")
    dc.combobox_porte = ttk.Combobox(
        aba_config,
        textvariable=dc.var_porte,
        values=list(dc.dados_pet.keys()),
        state="readonly"
    )
    dc.combobox_porte.grid(row=1, column=0, padx=10, pady=5, sticky="ew")
    dc.combobox_porte.bind("<<ComboboxSelected>>", atualizar_racas_e_precos)

    ttk.Label(aba_config, text="Selecione a Ra√ßa:").grid(row=0, column=1, padx=10, pady=5, sticky="w")
    dc.combobox_raca = ttk.Combobox(
        aba_config,
        textvariable=dc.var_raca,
        state="readonly"
    )
    dc.combobox_raca.grid(row=1, column=1, padx=10, pady=5, sticky="ew")
    dc.combobox_raca.bind("<<ComboboxSelected>>", mostrar_caracteristicas)

    # Campo de texto para caracter√≠sticas do pet
    dc.texto_caracteristicas = tk.Text(aba_config, height=8, width=50)
    dc.texto_caracteristicas.grid(row=2, column=0, columnspan=2, padx=10, pady=10)

    # Inicializar com porte padr√£o
    atualizar_racas_e_precos()

def atualizar_racas_e_precos(event=None):
    porte = dc.var_porte.get()
    racas = dc.dados_pet.get(porte, {}).get("ra√ßas", [])
    dc.precos_atuais = dc.dados_pet.get(porte, {}).get("pre√ßos", {})

    dc.combobox_raca["values"] = racas
    if racas:
        dc.var_raca.set(racas[0])
        mostrar_caracteristicas()
    else:
        dc.var_raca.set("")
        dc.texto_caracteristicas.delete(1.0, tk.END)

def mostrar_caracteristicas(event=None):
    raca = dc.var_raca.get()
    info = dc.caracteristicas_racas.get(raca, {})

    dc.texto_caracteristicas.delete(1.0, tk.END)
    if info:
        dc.texto_caracteristicas.insert(tk.END, f"Ra√ßa: {raca}\n")
        dc.texto_caracteristicas.insert(tk.END, f"Peso: {info.get('peso')}\n")
        dc.texto_caracteristicas.insert(tk.END, f"Tamanho: {info.get('tamanho')}\n")
        dc.texto_caracteristicas.insert(tk.END, f"Temperamento: {info.get('temperamento')}\n")
    else:
        dc.texto_caracteristicas.insert(tk.END, "Sem informa√ß√µes dispon√≠veis.")








import tkinter as tk
from tkinter import ttk
from tkcalendar import DateEntry
import dados_compartilhados as dc

def montar_aba_financeiro(aba_financeiro):
    # === Scrollable frame ===
    aba_financeiro.grid_rowconfigure(0, weight=1)
aba_financeiro.grid_columnconfigure(0, weight=1)

canvas = tk.Canvas(aba_financeiro)
scrollbar_y = ttk.Scrollbar(aba_financeiro, orient="vertical", command=canvas.yview)

canvas.grid(row=0, column=0, sticky="nsew")
scrollbar_y.grid(row=0, column=1, sticky="ns")

scrollable_frame = ttk.Frame(canvas)
canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
canvas.configure(yscrollcommand=scrollbar_y.set)

    canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
    canvas.configure(yscrollcommand=scrollbar_y.set)

    canvas.grid(side="left", fill="both", expand=True)
    scrollbar_y.grid(side="right", fill="y")

    # === Frame servi√ßos ===
    frame_servicos = ttk.LabelFrame(scrollable_frame, text="Servi√ßos Dispon√≠veis")
    frame_servicos.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")

    dc.servicos_disponiveis = [
        "Banho", "Hidrata√ß√£o", "Desembolo", "Remo√ß√£o de Pelos", "Corte de Unhas", "Tosa Higi√™nica", "Tosa na M√°quina", "Tosa na Tesoura", "Leva e Tr√°s"]

    dc.variaveis_servicos = {}
    dc.labels_valores = {}

    for i, servico in enumerate(dc.servicos_disponiveis):
        dc.variaveis_servicos[servico] = tk.BooleanVar()
        chk = ttk.Checkbutton(frame_servicos, text=servico, variable=dc.variaveis_servicos[servico])
        chk.grid(row=i, column=0, sticky="w")

        dc.labels_valores[servico] = ttk.Label(frame_servicos, text="")
        dc.labels_valores[servico].grid(row=i, column=1, sticky="w")

    # === Frame desconto ===
    frame_desc = ttk.LabelFrame(scrollable_frame, text="Abatimentos")
    frame_desc.grid(row=1, column=0, padx=10, pady=10, sticky="nsew")

    dc.var_desconto_fixo = tk.BooleanVar()
    dc.var_desconto_percentual = tk.BooleanVar()

    ttk.Checkbutton(frame_desc, text="Desconto Fixo (R$)", variable=dc.var_desconto_fixo).grid(row=0, column=0, sticky="w")
    dc.entry_desconto_fixo = ttk.Entry(frame_desc)
    dc.entry_desconto_fixo.grid(row=0, column=1, padx=5, pady=5)

    ttk.Checkbutton(frame_desc, text="Desconto Percentual (%)", variable=dc.var_desconto_percentual).grid(row=1, column=0, sticky="w")
    dc.entry_desconto_percentual = ttk.Entry(frame_desc)
    dc.entry_desconto_percentual.grid(row=1, column=1, padx=5, pady=5)

    ttk.Button(frame_desc, text="Calcular Total", command=calcular_total).grid(row=2, column=0, pady=10)
    ttk.Button(frame_desc, text="Limpar", command=limpar_selecoes).grid(row=2, column=1)

    dc.label_resultado = ttk.Label(frame_desc, text="Total com desconto: R$ 0,00")
    dc.label_resultado.grid(row=3, column=0, columnspan=2, pady=5)

    # === Forma de pagamento ===
    frame_pagamento = ttk.LabelFrame(scrollable_frame, text="Forma de Pagamento")
    frame_pagamento.grid(row=2, column=0, padx=10, pady=10, sticky="nsew")

    dc.var_status_pagamento = tk.StringVar(value="Em Aberto")

    ttk.Radiobutton(frame_pagamento, text="Pago", variable=dc.var_status_pagamento, value="pago").grid(row=0, column=0, sticky="w")
    ttk.Radiobutton(frame_pagamento, text="Em Aberto", variable=dc.var_status_pagamento, value="Em Aberto").grid(row=0, column=1, sticky="w")

    # === Calend√°rio ===
    frame_calendario = ttk.LabelFrame(scrollable_frame, text="Data do Servi√ßo")
    frame_calendario.grid(row=3, column=0, padx=10, pady=10, sticky="w")

    dc.calendario_servico = DateEntry(frame_calendario, year=2025, locale="pt_br")
    dc.calendario_servico.pack(padx=10, pady=5)

    dc.var_porte.trace_add("write", lambda *args: atualizar_valores())

def atualizar_valores():
    porte = dc.var_porte.get()
    precos = dc.dados_pet.get(porte, {}).get("pre√ßos", {})

    for servico in dc.servicos_disponiveis:
        if dc.variaveis_servicos[servico].get():
            valor = precos.get(servico, 0)
            dc.labels_valores[servico].config(text=f"R$ {valor:.2f}")
        else:
            dc.labels_valores[servico].config(text="")

def limpar_selecoes():
    for var in dc.variaveis_servicos.values():
        var.set(False)
    dc.entry_desconto_fixo.delete(0, tk.END)
    dc.entry_desconto_percentual.delete(0, tk.END)
    dc.label_resultado.config(text="Total com desconto: R$ 0,00")

def calcular_total():
    total = 0
    porte = dc.var_porte.get()
    precos = dc.dados_pet.get(porte, {}).get("pre√ßos", {})

    for servico, var in dc.variaveis_servicos.items():
        if var.get():
            total += precos.get(servico, 0)

    if dc.var_desconto_fixo.get():
        valor = dc.entry_desconto_fixo.get()
        if valor.replace(',', '').replace('.', '').isdigit():
            total -= float(valor.replace(',', '.'))

    if dc.var_desconto_percentual.get():
        pct = dc.entry_desconto_percentual.get()
        if pct.replace(',', '').replace('.', '').isdigit():
            total -= total * (float(pct.replace(',', '.')) / 100)

    dc.label_resultado.config(text=f"Total com desconto: R$ {total:.2f}")
