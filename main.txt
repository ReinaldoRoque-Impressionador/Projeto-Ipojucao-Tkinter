main




import tkinter as tk
from tkinter import ttk, Entry, BooleanVar
from PIL import Image, ImageTk
import os
from tkcalendar import DateEntry
import sqlite3
import time
import dados_compartilhados as dc
#from aba_consulta import montar_aba_consulta
import pandas as pd
#import matplotlib.pyplot as plt
#from models import database, criar_app
from aba_diagnostico import criar_menu_diagnostico
from playsound import playsound
from aba_login import criar_login
import threading

def ao_logar(nome, perfil):
    print(f"Usu√°rio logado: {nome} - Perfil: {perfil}")
    # Aqui voc√™ pode controlar permiss√µes ou abrir a interface principal
    # Ex: abrir_aba_principal(perfil=perfil)

# üéØ 2. Liberar acesso √† tela de gerenciamento somente para administradores
# No seu ao_logar(nome, perfil) do main.py, adicione:

def ao_logar(nome, perfil):
    janela.deiconify()
    if perfil == "Administrador":
        from aba_login import gerenciar_usuarios
        gerenciar_usuarios(janela)

janela = tk.Tk()
janela.withdraw()  # Esconde janela at√© login ser feito
criar_login(janela, ao_logar_callback=ao_logar)
janela.mainloop()


def mostrar_splash():
    splash = tk.Toplevel()
    splash.overrideredirect(True)  # sem bordas
    largura, altura = 500, 300

    # Centraliza a splash na tela
    tela_largura = splash.winfo_screenwidth()
    tela_altura = splash.winfo_screenheight()
    x = (tela_largura - largura) // 2
    y = (tela_altura - altura) // 2
    splash.geometry(f"{largura}x{altura}+{x}+{y}")

    # Carrega o logotipo
    caminho = os.path.join("imagens", "logo_ipojucao.png")
    if os.path.exists(caminho):
        img = Image.open(caminho).resize((largura, altura))
        img_tk = ImageTk.PhotoImage(img)
        label_img = tk.Label(splash, image=img_tk)
        label_img.image = img_tk  # üîí mant√©m na mem√≥ria
        label_img.pack()

    # Toca a m√∫sica de abertura (opcional)
    def tocar():
        from playsound import playsound
        caminho_som = os.path.join("som/bouncy_pet_intro.mp3")
        if os.path.exists(caminho_som):
            playsound(caminho_som)
    threading.Thread(target=tocar, daemon=True).start()

    # Fecha a splash ap√≥s 3 segundos
    splash.after(3000, splash.destroy)
    splash.mainloop()

mostrar_splash()


def tocar_musica_abertura():
    caminho = os.path.join("som", "musica_abertura.mp3")
    threading.Thread(target=playsound, args=(caminho,), daemon=True).start()

import tkinter as tk
from tkinter import ttk
import os
import threading
from playsound import playsound

btn_audio = ttk.Button(janela, text="üîà Som Ativado")
btn_audio.config(command=lambda: alternar_audio(btn_audio))
btn_audio.place(x=880, y=10)  # Ajuste coordenadas conforme layout

# Vari√°vel global para controle do som
som_ativo = True

def tocar_som_evento(caminho):
    if som_ativo and os.path.exists(caminho):
        threading.Thread(target=playsound, args=(caminho,), daemon=True).start()

def alternar_audio(botao):
    global som_ativo
    som_ativo = not som_ativo
    novo_texto = "üîà Som Ativado" if som_ativo else "üîá Som Desativado"
    botao.config(text=novo_texto)


# Combobox para Selecionar M√∫sica

trilhas = {
    "consulta": "som/musica_consulta.mp3",
    "salvando": "som/salvando.mp3",
    "abertura": "som/musica_abertura.wav",
    "fechamento": "som/end_of_day.mp3",
    "relatorios": "som/relatorio.mp3",
    "clientes": "clair_de_lune_prelude.mp3"
}

trilha_selecionada = StringVar()
trilha_selecionada.set("Alegria leve")

combo_trilha = ttk.Combobox(janela, textvariable=trilha_selecionada, values=list(trilhas.keys()), width=25, state="readonly")
combo_trilha.place(x=680, y=10)


# E sempre que for tocar m√∫sica de consulta:
caminho = trilhas.get(trilha_selecionada.get())
tocar_som_evento(caminho)


# M√∫sica Fechamento do Programa (Janela)

def tocar_musica_fechar():
    caminho = os.path.join("sons", "musica_end_of_day.mp3")
    if os.path.exists(caminho):
        playsound(caminho)  # tocar m√∫sica at√© o fim (bloqueante)
    else:
        print("M√∫sica de fechamento n√£o encontrada.")

def mostrar_despedida_e_sair():
    despedida = tk.Label(janela, text="üêæ At√© logo! Obrigado por cuidar com carinho.", font=("Segoe UI", 14), fg="#444")
    despedida.place(relx=0.5, rely=0.4, anchor="center")

    caminho = os.path.join("sons", "musica_end_of_day.mp3")
    if os.path.exists(caminho):
        threading.Thread(target=playsound, args=(caminho,), daemon=True).start()

    def fade_out(passo=0):
        alpha = max(0, 1 - passo / 20)
        cinza = int(68 * alpha)
        cor = f"#{cinza:02x}{cinza:02x}{cinza:02x}"
        despedida.config(fg=cor)
        if passo < 20:
            janela.after(50, fade_out, passo + 1)
        else:
            janela.quit()

    janela.after(1000, fade_out)  # Espera 1s antes de come√ßar a desaparecer

# def fechar_com_musica():
#     threading.Thread(target=tocar_musica_fechar).start()
#     # Aguarda alguns segundos antes de fechar
#     janela.after(3500, janela.quit)  # ajuste o tempo (em milissegundos) conforme dura√ß√£o da m√∫sica

botao_fechar = tk.Button(janela, text='Fechar', command=mostrar_despedida_e_sair, borderwidth=2, relief='solid')
botao_fechar.grid(row=3, column=6, padx=6, pady=10, sticky='nsew', columnspan=4)



#root = tk.Tk()

# #+++++++++++++++++++++++++++++++++++++++++++


import tkinter as tk
from tkinter import ttk
import dados_compartilhados as dc

# ü™ü Criando janela principal
janela = tk.Tk()
janela.title("Planilha Controle Ipojuc√£o")
janela.geometry("1024x700")
janela.rowconfigure(0, weight=1)
janela.columnconfigure(0, weight=1)


# ‚úÖ 1. Mensagem de boas-vindas com fade-in
# Logo ap√≥s criar a janela e antes de montar as abas, adicione:

def mostrar_mensagem_boas_vindas():
    mensagem = tk.Label(janela, text="üêæ Bem-vindo(a) ao Sistema Ipojuc√£o!", font=("Segoe UI", 16), fg="#4CAF50")
    mensagem.place(relx=0.5, rely=0.1, anchor="center")
    mensagem.attributes = {"alpha": 0}  # controle manual do alpha

    def animar_fade_in(passo=0):
        alpha = passo / 20
        nova_cor = f"#{int(76 * alpha):02x}{int(175 * alpha):02x}{int(80 * alpha):02x}"  # gradiente de verde
        mensagem.config(fg=nova_cor)
        if passo < 20:
            janela.after(40, animar_fade_in, passo + 1)
        else:
            janela.after(2500, mensagem.destroy)

    animar_fade_in()

mostrar_mensagem_boas_vindas()
tocar_musica_abertura()


# üìí Criando o Notebook (abas)
notebook = ttk.Notebook(janela)
notebook.grid(row=0, column=0, sticky="nsew")

# üß† Inicializando vari√°veis globais (exemplo m√≠nimo)
dc.var_porte = tk.StringVar(value="pequeno")
dc.var_raca = tk.StringVar()

# üîß Menu Diagn√≥stico do Sistema
from aba_diagnostico import criar_menu_diagnostico
criar_menu_diagnostico(janela, notebook)

# üóÇ Importando e montando ABAS
from aba_config import montar_aba_config
aba_config = ttk.Frame(notebook)
notebook.add(aba_config, text="‚öôÔ∏è Configura√ß√£o")
montar_aba_config(aba_config)

from aba_cadastro import montar_aba_cadastro
aba_cadastro = ttk.Frame(notebook)
notebook.add(aba_cadastro, text="üê∂ Cadastro")
montar_aba_cadastro(aba_cadastro)

from aba_consulta import montar_aba_consulta
aba_consulta = ttk.Frame(notebook)
notebook.add(aba_consulta, text="üîç Consulta")
montar_aba_consulta(aba_consulta)

from aba_financeiro import montar_aba_financeiro
aba_financeiro = ttk.Frame(notebook)
notebook.add(aba_financeiro, text="üí∞ Financeiro")
montar_aba_financeiro(aba_financeiro)

from aba_relatorio import montar_aba_relatorio
aba_relatorio = ttk.Frame(notebook)
notebook.add(aba_relatorio, text="üìä Relat√≥rios")
montar_aba_relatorio(aba_relatorio)

# üü¢ Iniciando a aplica√ß√£o




# #++++++++++++++++++++++++++++++++++++++++++++









# janela = tk.Tk()
# janela.title("Planilha Controle Ipojuc√£o")
# janela.geometry("800x600")
#
# notebook = ttk.Notebook(janela)
# notebook.grid(row=0, column=0, sticky="nsew")
#
# criar_menu_diagnostico(janela, notebook)
#
#
#
def montar_aba_main(aba):
    # Permitir expans√£o
    aba.grid_rowconfigure(0, weight=1)
    aba.grid_columnconfigure(0, weight=1)

    # Canvas + Scrollbar
    canvas = tk.Canvas(aba)
    scrollbar_y = ttk.Scrollbar(aba, orient="vertical", command=canvas.yview)
    canvas.configure(yscrollcommand=scrollbar_y.set)

    canvas.grid(row=0, column=0, sticky="nsew")
    scrollbar_y.grid(row=0, column=1, sticky="ns")

    # Frame rol√°vel
    inner_frame = ttk.Frame(canvas)
    canvas.create_window((0, 0), window=inner_frame, anchor="nw")

    def ajustar_scroll(event):
        canvas.configure(scrollregion=canvas.bbox("all"))
    inner_frame.bind("<Configure>", ajustar_scroll)

    # === A partir daqui, crie widgets dentro do inner_frame ===

    # Exemplo b√°sico
    frame_exemplo = ttk.LabelFrame(inner_frame, text="Se√ß√£o de Exemplo")
    frame_exemplo.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")

    ttk.Label(frame_exemplo, text="Alguma informa√ß√£o importante").grid(row=0, column=0, sticky="w")

    # Repita quantos blocos quiser (outros frames, grids, entradas, etc.)

    # Se quiser ativar algo quando o porte mudar
    dc.var_porte.trace_add("write", lambda *args: atualizar_exemplo())

def atualizar_exemplo():
    porte = dc.var_porte.get()
    print(f"Porte selecionado na aba √©: {porte}")
#
#
# from aba_config import montar_aba_config
#
# aba_config = ttk.Frame(notebook)
# notebook.add(aba_config, text="Config")
# montar_aba_config(aba_config)
#
# from aba_relatorio import montar_aba_relatorio
#
# aba_relatorio = ttk.Frame(notebook)
# notebook.add(aba_relatorio, text="Relat√≥rios")
# montar_aba_relatorio(aba_relatorio)
#
# from aba_consulta import montar_aba_consulta
#
# aba_consulta = ttk.Frame(notebook)
# notebook.add(aba_consulta, text="Consulta")
# montar_aba_consulta(aba_consulta)
#
# from aba_cadastro import montar_aba_cadastro
#
# aba_cadastro = ttk.Frame(notebook)
# notebook.add(aba_cadastro, text="Cadastro")
# montar_aba_cadastro(aba_cadastro)
#
# from aba_financeiro import montar_aba_relatorio, montar_aba_financeiro
#
# aba_financeiro = ttk.Frame(notebook)
# notebook.add(aba_financeiro, text="Financeiro")
# montar_aba_financeiro(aba_financeiro)
#



# Agora sim pode criar StringVar!
# dc.var_porte = tk.StringVar(value="pequeno")
# dc.var_raca = tk.StringVar()

# from aba_config import montar_aba_config
# from aba_financeiro import montar_aba_financeiro
#
# notebook = ttk.Notebook(root)
# notebook.pack(fill="both", expand=True)
#
# aba_config = ttk.Frame(notebook)
# aba_financeiro = ttk.Frame(notebook)
#
# notebook.add(aba_config, text="Configura√ß√£o")
# notebook.add(aba_financeiro, text="Financeiro")
#
# montar_aba_config(aba_config)
# montar_aba_config(aba_financeiro)
# from aba_config import montar_aba_config
# montar_aba_financeiro(aba_financeiro)
#
# from aba_financeiro import montar_aba_financeiro
# montar_aba_financeiro(aba_financeiro)
#
# from aba_diagnostico import criar_menu_diagnostico  # se voc√™ salvar isso num novo arquivo
#
# criar_menu_diagnostico(janela, notebook)


janela.mainloop()







+++++++++++++++++++++++++++++++++++++++++++








usuarios.json



{
  "admin@ipojucao.com": {
    "senha": "1234",
    "nome": "Admin",
    "perfil": "Administrador"
  },
  "luna@ipojucao.com": {
    "senha": "petpet",
    "nome": "Luna",
    "perfil": "Funcion√°rio"
  }
}



++++++++++++++++++++++++++++++++++++++++++








aba_login


import json
import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import os
import threading
from playsound import playsound

CAMINHO_USUARIOS = "usuarios.json"

def carregar_usuarios():
    if os.path.exists(CAMINHO_USUARIOS):
        with open(CAMINHO_USUARIOS, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def salvar_usuarios(usuarios):
    with open(CAMINHO_USUARIOS, "w", encoding="utf-8") as f:
        json.dump(usuarios, f, indent=2)


usuarios = carregar_usuarios()

# üéØ Dicion√°rio de usu√°rios simulando um ‚Äúbanco de dados‚Äù
# usuarios = {
#     "roquereinaldo@gmail.com": {"senha": "975624asa", "nome": "Reinaldo", "perfil": "Administrador"},
#     "araujolindi@yahoo.com.br": {"senha": "1234", "nome": "Lindinalva", "perfil": "Administrador"},
#     "cebous@hotmail.com.br": {"senha": "1234", "nome": "Raphael", "perfil": "Administrador"},
#     "admin@ipojucao.com": {"senha": "1234", "nome": "Marlene", "perfil": "Administrador"},
#     "anna_paula@ipojucao.com": {"senha": "1234", "nome": "Anna Paula", "perfil": "Administrador"},
#     "admin@ipojucao.com": {"senha": "1234", "nome": "Qualquer", "perfil": "Administrador"},
#     "wander@ipojucao.com": {"senha": "petpet", "nome": "Wander", "perfil": "Funcion√°rio"},
# }

som_global_ativo = True  # Pode ser controlado por bot√£o global

# ‚úÖ 1. Fun√ß√£o  ‚Äî interface amig√°vel
# Adicione este c√≥digo ao seu :


def gerenciar_usuarios(janela_pai):
    janela_gerenciar = tk.Toplevel(janela_pai)
    janela_gerenciar.title("Gerenciar Usu√°rios")
    janela_gerenciar.geometry("420x320")
    janela_gerenciar.resizable(False, False)

    tk.Label(janela_gerenciar, text="Email:").place(x=20, y=20)
    entrada_email = tk.Entry(janela_gerenciar, width=40)
    entrada_email.place(x=100, y=20)

    tk.Label(janela_gerenciar, text="Senha:").place(x=20, y=60)
    entrada_senha = tk.Entry(janela_gerenciar, width=40, show="*")
    entrada_senha.place(x=100, y=60)

    tk.Label(janela_gerenciar, text="Nome:").place(x=20, y=100)
    entrada_nome = tk.Entry(janela_gerenciar, width=40)
    entrada_nome.place(x=100, y=100)

    tk.Label(janela_gerenciar, text="Perfil:").place(x=20, y=140)
    entrada_perfil = tk.Entry(janela_gerenciar, width=40)
    entrada_perfil.place(x=100, y=140)

    def adicionar():
        email = entrada_email.get().strip()
        senha = entrada_senha.get().strip()
        nome = entrada_nome.get().strip()
        perfil = entrada_perfil.get().strip()

        carregar_lista()

        if email and senha and nome and perfil:
            usuarios[email] = {
                "senha": senha,
                "nome": nome,
                "perfil": perfil
            }
            salvar_usuarios(usuarios)
            tocar_som_sucesso("adicionar")
            messagebox.showinfo("Usu√°rio Adicionado", f"{nome} foi cadastrado com sucesso!")

            carregar_lista()

        else:
            messagebox.showwarning("Campos Incompletos", "Preencha todos os campos.")

    def remover():
        email = entrada_email.get().strip()
        if email in usuarios:
            del usuarios[email]
            salvar_usuarios(usuarios)
            tocar_som_sucesso("remover")
            messagebox.showinfo("Usu√°rio Removido", f"{email} foi removido com sucesso!")
        else:
            messagebox.showerror("Erro", "Usu√°rio n√£o encontrado.")

    tk.Button(janela_gerenciar, text="‚ûï Adicionar", command=adicionar).place(x=100, y=200)
    tk.Button(janela_gerenciar, text="‚ûñ Remover", command=remover).place(x=220, y=200)

    carregar_lista()


# üéØ 2. Liberar acesso √† tela de gerenciamento somente para administradores
# No seu ao_logar(nome, perfil) do main.py, adicione:



def tocar_som_acesso(resultado=True):
    if som_global_ativo:
        som = os.path.join("sons", "acesso_concedido.mp3") if resultado else os.path.join("sons", "acesso_negado.mp3")
        if os.path.exists(som):
            threading.Thread(target=playsound, args=(som,), daemon=True).start()

def criar_login(janela_principal, ao_logar_callback):
    janela_login = tk.Toplevel()
    janela_login.title("Login Ipojuc√£o")
    janela_login.geometry("800x500")
    janela_login.resizable(False, False)

    # üñºÔ∏è Imagem de fundo
    caminho_imagem = os.path.join("imagens", "login_fundo.png")  # nome do seu arquivo de fundo
    if os.path.exists(caminho_imagem):
        img = Image.open(caminho_imagem).resize((800, 500))
        bg = ImageTk.PhotoImage(img)
        bg_label = tk.Label(janela_login, image=bg)
        bg_label.image = bg
        bg_label.place(relwidth=1, relheight=1)

    # üìã Campos de login
    tk.Label(janela_login, text="Email:", bg="white").place(x=260, y=180)
    email_entry = tk.Entry(janela_login, width=30)
    email_entry.place(x=330, y=180)

    tk.Label(janela_login, text="Senha:", bg="white").place(x=260, y=220)
    senha_entry = tk.Entry(janela_login, width=30, show="*")
    senha_entry.place(x=330, y=220)

    def autenticar():
        email = email_entry.get().strip()
        senha = senha_entry.get().strip()
        user = usuarios.get(email)

        if user and user["senha"] == senha:
            tocar_som_acesso(True)
            messagebox.showinfo("Bem-vindo", f"Ol√°, {user['nome']}!\nPerfil: {user['perfil']}")
            janela_login.destroy()
            ao_logar_callback(user["nome"], user["perfil"])
        else:
            tocar_som_acesso(False)
            messagebox.showerror("Acesso negado", "Email ou senha inv√°lidos.")


    tk.Button(janela_login, text="Entrar", command=autenticar).place(x=370, y=270)

    tk.Button(janela_gerenciar, text="‚úèÔ∏è Alterar senha", command=alterar_senha).place(x=155, y=210)

def ao_logar(nome, perfil):
    janela.deiconify()
    if perfil == "Administrador":
        from aba_login import gerenciar_usuarios
        gerenciar_usuarios(janela_pai)

    def tocar_som_sucesso(acao):
        mapa = {
            "adicionar": "som/usuario_adicionado.mp3",
            "remover": "som/usuario_removido.mp3"
        }

        carregar_lista()

        caminho = mapa.get(acao)
        if som_global_ativo and caminho and os.path.exists(caminho):
            threading.Thread(target=playsound, args=(caminho,), daemon=True).start()

    def alterar_senha():
        email = entrada_email.get().strip()
        nova_senha = entrada_senha.get().strip()

        if email in usuarios:
            if not nova_senha:
                messagebox.showwarning("Nova senha em branco", "Digite uma nova senha.")
                return

            confirmar = messagebox.askyesno("Confirmar altera√ß√£o",
                                            f"Tem certeza que deseja alterar a senha de {email}?")
            if confirmar:
                usuarios[email]["senha"] = nova_senha
                salvar_usuarios(usuarios)
                tocar_som_sucesso("adicionar")  # Reaproveita som
                messagebox.showinfo("Senha alterada", f"Senha de {email} atualizada com sucesso!")
        else:
            messagebox.showerror("Usu√°rio n√£o encontrado", f"{email} n√£o est√° cadastrado.")

            carregar_lista()

    # (Opcional) Bot√£o para criar novo usu√°rio ‚Äì s√≥ vis√≠vel ap√≥s login adm
    # (Voc√™ pode adicionar essa fun√ß√£o mais tarde)


from tkinter import ttk

tv = ttk.Treeview(janela_gerenciar, columns=("Email", "Nome", "Perfil"), show="headings")
tv.heading("Email", text="Email")
tv.heading("Nome", text="Nome")
tv.heading("Perfil", text="Perfil")
tv.place(x=20, y=250, width=380, height=100)

def carregar_lista():
    tv.delete(*tv.get_children())
    for email, dados in usuarios.items():
        tv.insert("", "end", values=(email, dados["nome"], dados["perfil"]))

carregar_lista()






+++++++++++++++++++++++++++++++++++++







aba clientes


from tkinter import ttk, messagebox
import tkinter as tk
from models import salvar_cliente  # Certifique-se de importar a fun√ß√£o correta

from aba_clientes import montar_aba_clientes

aba_clientes = ttk.Frame(notebook)
notebook.add(aba_clientes, text="Clientes")
montar_aba_clientes(aba_clientes)

def montar_aba_clientes(aba):
    frame = ttk.LabelFrame(aba, text="Cadastro de Clientes")
    frame.grid(row=0, column=0, padx=10, pady=10, sticky="nsew")

    ttk.Label(frame, text="Nome do Cliente:").grid(row=0, column=0, padx=5, pady=5, sticky="w")

    var_nome = tk.StringVar()
    entry_nome = ttk.Entry(frame, textvariable=var_nome, width=40)
    entry_nome.grid(row=0, column=1, padx=5, pady=5, sticky="w")


    def tocar_musica_cliente():
        caminho = os.path.join("som", "clair_de_lune_prelude.mp3")
        threading.Thread(target=playsound, args=(caminho,), daemon=True).start()

        # preenche campos como nome, idade, etc...
        tocar_musica_cliente()


    def salvar():
        nome = var_nome.get().strip()
        if not nome:
            messagebox.showwarning("Campo obrigat√≥rio", "Por favor, insira o nome do cliente.")
            return

        sucesso = salvar_cliente(nome)
        if sucesso:
            messagebox.showinfo("Salvo com sucesso", f"Cliente '{nome}' foi salvo no banco!")
            var_nome.set("")  # limpa o campo
        else:
            messagebox.showerror("Erro", "Erro ao salvar o cliente.")

    btn_salvar = ttk.Button(frame, text="Salvar Cliente", command=salvar)
    btn_salvar.grid(row=1, column=1, padx=5, pady=10, sticky="e")


tree = ttk.Treeview(frame, columns=("id", "nome", "cpf", "email"), show="headings", height=10)
tree.heading("id", text="ID")
tree.heading("nome", text="Nome")
tree.heading("cpf", text="CPF")
tree.heading("email", text="E-mail")




def listar_clientes():
    return session.query(Cliente).all()

def atualizar_cliente(id_cliente, novo_nome):
    cliente = session.query(Cliente).filter_by(id=id_cliente).first()
    if cliente:
        cliente.nome = novo_nome
        try:
            session.commit()
            return True
        except Exception as e:
            session.rollback()
            print("Erro ao atualizar:", e)
    return False

    # üîé Campos de busca
    ttk.Label(frame, text="Buscar por:").grid(row=2, column=0, sticky="w", padx=5, pady=5)
    campo_busca = ttk.Combobox(frame, values=["ID", "CPF", "E-mail"], state="readonly")
    campo_busca.set("CPF")
    campo_busca.grid(row=2, column=1, sticky="w")

    var_busca = tk.StringVar()
    entry_busca = ttk.Entry(frame, textvariable=var_busca, width=30)
    entry_busca.grid(row=2, column=2, padx=5, sticky="w")

    def buscar():
        resultados = buscar_clientes(campo_busca.get(), var_busca.get())
        tree.delete(*tree.get_children())
        for c in resultados:
            tree.insert("", "end", values=(c.id, c.nome, c.cpf, c.email))

    ttk.Button(frame, text="üîç Buscar", command=buscar).grid(row=2, column=3, padx=5, pady=5)

    # üóë Bot√£o excluir
    def excluir():
        item = tree.selection()
        if not item:
            messagebox.showwarning("Excluir", "Selecione um cliente.")
            return
        id_cliente = int(tree.item(item[0], "values")[0])
        if messagebox.askyesno("Confirmar exclus√£o", "Deseja mesmo excluir este cliente?"):
            if excluir_cliente(id_cliente):
                messagebox.showinfo("Exclu√≠do", "Cliente removido.")
                carregar_clientes()
            else:
                messagebox.showerror("Erro", "N√£o foi poss√≠vel excluir.")

    ttk.Button(frame, text="üóë Excluir Selecionado", command=excluir).grid(row=3, column=2, sticky="e", padx=5, pady=5)


app = criar_app()
with app.app_context():
    database.create_all()







+++++++++++++++++++++++++++++++++++++++++++++++





